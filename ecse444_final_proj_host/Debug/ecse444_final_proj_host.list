
ecse444_final_proj_host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e34  08005e34  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e3c  08005e3c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e40  08005e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000a0  08005ee4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005ee4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bd4  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002308  00000000  00000000  00031ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00034f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bc7  00000000  00000000  00035e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ccc  00000000  00000000  0005da1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4585  00000000  00000000  0006e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162c70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc8  00000000  00000000  00162cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058dc 	.word	0x080058dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	080058dc 	.word	0x080058dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 ff49 	bl	8001412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f86e 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f93c 	bl	8000800 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000588:	f000 f8bc 	bl	8000704 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800058c:	f000 f908 	bl	80007a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setting up LEDs
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	4829      	ldr	r0, [pc, #164]	; (800063c <main+0xc4>)
 8000598:	f001 fa8c 	bl	8001ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	4827      	ldr	r0, [pc, #156]	; (8000640 <main+0xc8>)
 80005a2:	f001 fa87 	bl	8001ab4 <HAL_GPIO_WritePin>

  // Setting up first round game
  waitForGameStart();
 80005a6:	f000 fac1 	bl	8000b2c <waitForGameStart>
  currentDirective = rand() % NUMBER_OF_DIRECTIVES;
 80005aa:	f003 ffc3 	bl	8004534 <rand>
 80005ae:	4601      	mov	r1, r0
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <main+0xcc>)
 80005b2:	fb83 3201 	smull	r3, r2, r3, r1
 80005b6:	17cb      	asrs	r3, r1, #31
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	4613      	mov	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4413      	add	r3, r2
 80005c0:	1aca      	subs	r2, r1, r3
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <main+0xd0>)
 80005c4:	601a      	str	r2, [r3, #0]
  startNextRound(currentDirective);
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <main+0xd0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fb5e 	bl	8000c8c <startNextRound>

  // Starting sleep mode with interrupts
  HAL_SuspendTick();
 80005d0:	f000 ff94 	bl	80014fc <HAL_SuspendTick>
  HAL_PWR_EnableSleepOnExit();
 80005d4:	f001 faec 	bl	8001bb0 <HAL_PWR_EnableSleepOnExit>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80005d8:	2101      	movs	r1, #1
 80005da:	2000      	movs	r0, #0
 80005dc:	f001 fab4 	bl	8001b48 <HAL_PWR_EnterSLEEPMode>

  // Game has ended, we need to restart the clock
  HAL_ResumeTick();
 80005e0:	f000 ff9c 	bl	800151c <HAL_ResumeTick>

  sprintf(msg_buffer, "\n\n\n==================================================\r\n");
 80005e4:	4919      	ldr	r1, [pc, #100]	; (800064c <main+0xd4>)
 80005e6:	481a      	ldr	r0, [pc, #104]	; (8000650 <main+0xd8>)
 80005e8:	f003 ffe4 	bl	80045b4 <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <main+0xd8>)
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	4915      	ldr	r1, [pc, #84]	; (8000650 <main+0xd8>)
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0xdc>)
 80005fc:	f003 fae2 	bl	8003bc4 <HAL_UART_Transmit>
  sprintf(msg_buffer, "Game has ended. Thank you for playing!\r\n");
 8000600:	4915      	ldr	r1, [pc, #84]	; (8000658 <main+0xe0>)
 8000602:	4813      	ldr	r0, [pc, #76]	; (8000650 <main+0xd8>)
 8000604:	f003 ffd6 	bl	80045b4 <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <main+0xd8>)
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	490e      	ldr	r1, [pc, #56]	; (8000650 <main+0xd8>)
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0xdc>)
 8000618:	f003 fad4 	bl	8003bc4 <HAL_UART_Transmit>
  sprintf(msg_buffer, "==================================================\r\n");
 800061c:	490f      	ldr	r1, [pc, #60]	; (800065c <main+0xe4>)
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <main+0xd8>)
 8000620:	f003 ffc8 	bl	80045b4 <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <main+0xd8>)
 8000626:	f7ff fdd3 	bl	80001d0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29a      	uxth	r2, r3
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	4907      	ldr	r1, [pc, #28]	; (8000650 <main+0xd8>)
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0xdc>)
 8000634:	f003 fac6 	bl	8003bc4 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0xc0>
 800063a:	bf00      	nop
 800063c:	48000400 	.word	0x48000400
 8000640:	48001000 	.word	0x48001000
 8000644:	55555556 	.word	0x55555556
 8000648:	200001a8 	.word	0x200001a8
 800064c:	080058f4 	.word	0x080058f4
 8000650:	200000dc 	.word	0x200000dc
 8000654:	200001ac 	.word	0x200001ac
 8000658:	0800592c 	.word	0x0800592c
 800065c:	08005958 	.word	0x08005958

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 ff58 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f001 fac1 	bl	8001c0c <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 fc8c 	bl	8000fac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000694:	2310      	movs	r3, #16
 8000696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a0:	2360      	movs	r3, #96	; 0x60
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a8:	2301      	movs	r3, #1
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b0:	2328      	movs	r3, #40	; 0x28
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fb3f 	bl	8001d48 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006d0:	f000 fc6c 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 ff11 	bl	8002514 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f8:	f000 fc58 	bl	8000fac <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	; 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_TIM2_Init+0x98>)
 8000724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_TIM2_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_TIM2_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_TIM2_Init+0x98>)
 8000738:	f04f 32ff 	mov.w	r2, #4294967295
 800073c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_TIM2_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_TIM2_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074a:	4814      	ldr	r0, [pc, #80]	; (800079c <MX_TIM2_Init+0x98>)
 800074c:	f002 fda4 	bl	8003298 <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000756:	f000 fc29 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_TIM2_Init+0x98>)
 8000768:	f002 ff0c 	bl	8003584 <HAL_TIM_ConfigClockSource>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000772:	f000 fc1b 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_TIM2_Init+0x98>)
 8000784:	f003 f92a 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800078e:	f000 fc0d 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000230 	.word	0x20000230

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART1_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007e4:	f003 f9a0 	bl	8003b28 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 fbdd 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001ac 	.word	0x200001ac
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	4b56      	ldr	r3, [pc, #344]	; (8000970 <MX_GPIO_Init+0x170>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a55      	ldr	r2, [pc, #340]	; (8000970 <MX_GPIO_Init+0x170>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b53      	ldr	r3, [pc, #332]	; (8000970 <MX_GPIO_Init+0x170>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b50      	ldr	r3, [pc, #320]	; (8000970 <MX_GPIO_Init+0x170>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a4f      	ldr	r2, [pc, #316]	; (8000970 <MX_GPIO_Init+0x170>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MX_GPIO_Init+0x170>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <MX_GPIO_Init+0x170>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a49      	ldr	r2, [pc, #292]	; (8000970 <MX_GPIO_Init+0x170>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <MX_GPIO_Init+0x170>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <MX_GPIO_Init+0x170>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <MX_GPIO_Init+0x170>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b41      	ldr	r3, [pc, #260]	; (8000970 <MX_GPIO_Init+0x170>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	483e      	ldr	r0, [pc, #248]	; (8000974 <MX_GPIO_Init+0x174>)
 800087c:	f001 f91a 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|RESET_P1_Pin|RESET_P2_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8000886:	483c      	ldr	r0, [pc, #240]	; (8000978 <MX_GPIO_Init+0x178>)
 8000888:	f001 f914 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800088c:	2308      	movs	r3, #8
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4834      	ldr	r0, [pc, #208]	; (8000974 <MX_GPIO_Init+0x174>)
 80008a4:	f000 ff5c 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_GPIO_Init+0x17c>)
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4830      	ldr	r0, [pc, #192]	; (8000980 <MX_GPIO_Init+0x180>)
 80008be:	f000 ff4f 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_IN_2_Pin MIC_IN_2_Pin ACC_IN_2_Pin BUTTON_IN_1_Pin
                           MIC_IN_1_Pin ACC_IN_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_IN_2_Pin|MIC_IN_2_Pin|ACC_IN_2_Pin|BUTTON_IN_1_Pin
 80008c2:	233f      	movs	r3, #63	; 0x3f
 80008c4:	617b      	str	r3, [r7, #20]
                          |MIC_IN_1_Pin|ACC_IN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <MX_GPIO_Init+0x184>)
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	482a      	ldr	r0, [pc, #168]	; (8000980 <MX_GPIO_Init+0x180>)
 80008d6:	f000 ff43 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin RESET_P1_Pin RESET_P2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|RESET_P1_Pin|RESET_P2_Pin;
 80008da:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4821      	ldr	r0, [pc, #132]	; (8000978 <MX_GPIO_Init+0x178>)
 80008f4:	f000 ff34 	bl	8001760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2006      	movs	r0, #6
 80008fe:	f000 fef8 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000902:	2006      	movs	r0, #6
 8000904:	f000 ff11 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2007      	movs	r0, #7
 800090e:	f000 fef0 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000912:	2007      	movs	r0, #7
 8000914:	f000 ff09 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2008      	movs	r0, #8
 800091e:	f000 fee8 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000922:	2008      	movs	r0, #8
 8000924:	f000 ff01 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	2009      	movs	r0, #9
 800092e:	f000 fee0 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000932:	2009      	movs	r0, #9
 8000934:	f000 fef9 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	200a      	movs	r0, #10
 800093e:	f000 fed8 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000942:	200a      	movs	r0, #10
 8000944:	f000 fef1 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2017      	movs	r0, #23
 800094e:	f000 fed0 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000952:	2017      	movs	r0, #23
 8000954:	f000 fee9 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f000 fec8 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f000 fee1 	bl	800172a <HAL_NVIC_EnableIRQ>

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48001000 	.word	0x48001000
 8000978:	48000400 	.word	0x48000400
 800097c:	10110000 	.word	0x10110000
 8000980:	48000800 	.word	0x48000800
 8000984:	10310000 	.word	0x10310000

08000988 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	/*
	 * BUTTON PIN INTERRUPTS
	 * 1st: start the game
	 * 2nd: end the game
	 */
	if (GPIO_Pin == Button_Pin && gameStart == 0){
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000998:	d107      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x22>
 800099a:	4b58      	ldr	r3, [pc, #352]	; (8000afc <HAL_GPIO_EXTI_Callback+0x174>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x22>
		gameStart = 1;
 80009a2:	4b56      	ldr	r3, [pc, #344]	; (8000afc <HAL_GPIO_EXTI_Callback+0x174>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e0a3      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0x16a>

	} else if (GPIO_Pin == Button_Pin && gameStart == 1){
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b0:	d106      	bne.n	80009c0 <HAL_GPIO_EXTI_Callback+0x38>
 80009b2:	4b52      	ldr	r3, [pc, #328]	; (8000afc <HAL_GPIO_EXTI_Callback+0x174>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d102      	bne.n	80009c0 <HAL_GPIO_EXTI_Callback+0x38>
		//game is over
		HAL_PWR_DisableSleepOnExit();
 80009ba:	f001 f909 	bl	8001bd0 <HAL_PWR_DisableSleepOnExit>
 80009be:	e098      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0x16a>
		 * 		3 Player 2 - Press
		 * 		4 Player 2 - Twist
		 * 		5 Player 2 - Say
		 */

		if (GPIO_Pin == ACC_IN_1_Pin)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	2b20      	cmp	r3, #32
 80009c4:	d107      	bne.n	80009d6 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ca:	484d      	ldr	r0, [pc, #308]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x178>)
 80009cc:	f001 f88a 	bl	8001ae4 <HAL_GPIO_TogglePin>
			roundState = 1;
 80009d0:	4b4c      	ldr	r3, [pc, #304]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
		}
		if (GPIO_Pin == ACC_IN_2_Pin)
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d106      	bne.n	80009ea <HAL_GPIO_EXTI_Callback+0x62>
		{
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80009dc:	2108      	movs	r1, #8
 80009de:	484a      	ldr	r0, [pc, #296]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x180>)
 80009e0:	f001 f880 	bl	8001ae4 <HAL_GPIO_TogglePin>
			roundState = 4;
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
		}

		if (GPIO_Pin == BUTTON_IN_1_Pin){
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d107      	bne.n	8000a00 <HAL_GPIO_EXTI_Callback+0x78>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f4:	4842      	ldr	r0, [pc, #264]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x178>)
 80009f6:	f001 f875 	bl	8001ae4 <HAL_GPIO_TogglePin>
			roundState = 0;
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
		}
		if (GPIO_Pin == BUTTON_IN_2_Pin){
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d106      	bne.n	8000a14 <HAL_GPIO_EXTI_Callback+0x8c>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a06:	2108      	movs	r1, #8
 8000a08:	483f      	ldr	r0, [pc, #252]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x180>)
 8000a0a:	f001 f86b 	bl	8001ae4 <HAL_GPIO_TogglePin>
			roundState = 3;
 8000a0e:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	601a      	str	r2, [r3, #0]
		}

		if (GPIO_Pin == MIC_IN_1_Pin){
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	2b10      	cmp	r3, #16
 8000a18:	d107      	bne.n	8000a2a <HAL_GPIO_EXTI_Callback+0xa2>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4838      	ldr	r0, [pc, #224]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x178>)
 8000a20:	f001 f860 	bl	8001ae4 <HAL_GPIO_TogglePin>
			roundState = 2;
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	601a      	str	r2, [r3, #0]
		}
		if (GPIO_Pin == MIC_IN_2_Pin){
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d106      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0xb6>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a30:	2108      	movs	r1, #8
 8000a32:	4835      	ldr	r0, [pc, #212]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x180>)
 8000a34:	f001 f856 	bl	8001ae4 <HAL_GPIO_TogglePin>
			roundState = 5;
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_TogglePin(RESET_P1_GPIO_Port, RESET_P1_Pin);
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	482f      	ldr	r0, [pc, #188]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x178>)
 8000a44:	f001 f84e 	bl	8001ae4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RESET_P2_GPIO_Port, RESET_P2_Pin);
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	482c      	ldr	r0, [pc, #176]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x178>)
 8000a4e:	f001 f849 	bl	8001ae4 <HAL_GPIO_TogglePin>

		decideWinner();
 8000a52:	f000 f9e9 	bl	8000e28 <decideWinner>
//		HAL_Delay(1000);
		while (timer < 5000000) {
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_EXTI_Callback+0xda>
			timer++;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a60:	6013      	str	r3, [r2, #0]
		while (timer < 5000000) {
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a2a      	ldr	r2, [pc, #168]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x188>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	ddf5      	ble.n	8000a58 <HAL_GPIO_EXTI_Callback+0xd0>
		}
		timer = 0;
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]

		updateScoreboard();
 8000a72:	f000 fa59 	bl	8000f28 <updateScoreboard>

//		HAL_Delay(1000);
		while (timer < 5000000) {
 8000a76:	e004      	b.n	8000a82 <HAL_GPIO_EXTI_Callback+0xfa>
			timer++;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a80:	6013      	str	r3, [r2, #0]
		while (timer < 5000000) {
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x188>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	ddf5      	ble.n	8000a78 <HAL_GPIO_EXTI_Callback+0xf0>
		}
		timer = 0;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

		sprintf(msg_buffer, "Setting up next round...\r\n");
 8000a92:	4920      	ldr	r1, [pc, #128]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000a94:	4820      	ldr	r0, [pc, #128]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x190>)
 8000a96:	f003 fd8d 	bl	80045b4 <siprintf>
		HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000a9a:	481f      	ldr	r0, [pc, #124]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x190>)
 8000a9c:	f7ff fb98 	bl	80001d0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	2364      	movs	r3, #100	; 0x64
 8000aa6:	491c      	ldr	r1, [pc, #112]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x190>)
 8000aa8:	481c      	ldr	r0, [pc, #112]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x194>)
 8000aaa:	f003 f88b 	bl	8003bc4 <HAL_UART_Transmit>

//		HAL_Delay(5000);
		while (timer < 25000000) {
 8000aae:	e004      	b.n	8000aba <HAL_GPIO_EXTI_Callback+0x132>
			timer++;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000ab8:	6013      	str	r3, [r2, #0]
		while (timer < 25000000) {
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x198>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	ddf5      	ble.n	8000ab0 <HAL_GPIO_EXTI_Callback+0x128>
		}
		timer = 0;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]

		currentDirective = rand() % NUMBER_OF_DIRECTIVES;
 8000aca:	f003 fd33 	bl	8004534 <rand>
 8000ace:	4601      	mov	r1, r0
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ad2:	fb83 3201 	smull	r3, r2, r3, r1
 8000ad6:	17cb      	asrs	r3, r1, #31
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	1aca      	subs	r2, r1, r3
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000ae4:	601a      	str	r2, [r3, #0]
		startNextRound(currentDirective);
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8ce 	bl	8000c8c <startNextRound>

		//	HAL_Delay(1000);
		//	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		//    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	48000400 	.word	0x48000400
 8000b04:	200001a4 	.word	0x200001a4
 8000b08:	48001000 	.word	0x48001000
 8000b0c:	200000bc 	.word	0x200000bc
 8000b10:	004c4b3f 	.word	0x004c4b3f
 8000b14:	08005990 	.word	0x08005990
 8000b18:	200000dc 	.word	0x200000dc
 8000b1c:	200001ac 	.word	0x200001ac
 8000b20:	017d783f 	.word	0x017d783f
 8000b24:	55555556 	.word	0x55555556
 8000b28:	200001a8 	.word	0x200001a8

08000b2c <waitForGameStart>:

void waitForGameStart(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	sprintf(msg_buffer, "\n\n\n==================================================\r\n");
 8000b30:	4949      	ldr	r1, [pc, #292]	; (8000c58 <waitForGameStart+0x12c>)
 8000b32:	484a      	ldr	r0, [pc, #296]	; (8000c5c <waitForGameStart+0x130>)
 8000b34:	f003 fd3e 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b38:	4848      	ldr	r0, [pc, #288]	; (8000c5c <waitForGameStart+0x130>)
 8000b3a:	f7ff fb49 	bl	80001d0 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	4945      	ldr	r1, [pc, #276]	; (8000c5c <waitForGameStart+0x130>)
 8000b46:	4846      	ldr	r0, [pc, #280]	; (8000c60 <waitForGameStart+0x134>)
 8000b48:	f003 f83c 	bl	8003bc4 <HAL_UART_Transmit>
	sprintf(msg_buffer, "WELCOME TO COMPETITIVE BOP IT\r\n");
 8000b4c:	4945      	ldr	r1, [pc, #276]	; (8000c64 <waitForGameStart+0x138>)
 8000b4e:	4843      	ldr	r0, [pc, #268]	; (8000c5c <waitForGameStart+0x130>)
 8000b50:	f003 fd30 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b54:	4841      	ldr	r0, [pc, #260]	; (8000c5c <waitForGameStart+0x130>)
 8000b56:	f7ff fb3b 	bl	80001d0 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	493e      	ldr	r1, [pc, #248]	; (8000c5c <waitForGameStart+0x130>)
 8000b62:	483f      	ldr	r0, [pc, #252]	; (8000c60 <waitForGameStart+0x134>)
 8000b64:	f003 f82e 	bl	8003bc4 <HAL_UART_Transmit>
	sprintf(msg_buffer, "==================================================\r\n");
 8000b68:	493f      	ldr	r1, [pc, #252]	; (8000c68 <waitForGameStart+0x13c>)
 8000b6a:	483c      	ldr	r0, [pc, #240]	; (8000c5c <waitForGameStart+0x130>)
 8000b6c:	f003 fd22 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b70:	483a      	ldr	r0, [pc, #232]	; (8000c5c <waitForGameStart+0x130>)
 8000b72:	f7ff fb2d 	bl	80001d0 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	4937      	ldr	r1, [pc, #220]	; (8000c5c <waitForGameStart+0x130>)
 8000b7e:	4838      	ldr	r0, [pc, #224]	; (8000c60 <waitForGameStart+0x134>)
 8000b80:	f003 f820 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "Here are the rules of the game:\r\n");
 8000b84:	4939      	ldr	r1, [pc, #228]	; (8000c6c <waitForGameStart+0x140>)
 8000b86:	4835      	ldr	r0, [pc, #212]	; (8000c5c <waitForGameStart+0x130>)
 8000b88:	f003 fd14 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b8c:	4833      	ldr	r0, [pc, #204]	; (8000c5c <waitForGameStart+0x130>)
 8000b8e:	f7ff fb1f 	bl	80001d0 <strlen>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	2364      	movs	r3, #100	; 0x64
 8000b98:	4930      	ldr	r1, [pc, #192]	; (8000c5c <waitForGameStart+0x130>)
 8000b9a:	4831      	ldr	r0, [pc, #196]	; (8000c60 <waitForGameStart+0x134>)
 8000b9c:	f003 f812 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\t1. When prompted, press the blue button on the host board to start the game.\r\n");
 8000ba0:	4933      	ldr	r1, [pc, #204]	; (8000c70 <waitForGameStart+0x144>)
 8000ba2:	482e      	ldr	r0, [pc, #184]	; (8000c5c <waitForGameStart+0x130>)
 8000ba4:	f003 fd06 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ba8:	482c      	ldr	r0, [pc, #176]	; (8000c5c <waitForGameStart+0x130>)
 8000baa:	f7ff fb11 	bl	80001d0 <strlen>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	2364      	movs	r3, #100	; 0x64
 8000bb4:	4929      	ldr	r1, [pc, #164]	; (8000c5c <waitForGameStart+0x130>)
 8000bb6:	482a      	ldr	r0, [pc, #168]	; (8000c60 <waitForGameStart+0x134>)
 8000bb8:	f003 f804 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\t2. Perform the directives printed to the screen as quickly as possible.\r\n");
 8000bbc:	492d      	ldr	r1, [pc, #180]	; (8000c74 <waitForGameStart+0x148>)
 8000bbe:	4827      	ldr	r0, [pc, #156]	; (8000c5c <waitForGameStart+0x130>)
 8000bc0:	f003 fcf8 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000bc4:	4825      	ldr	r0, [pc, #148]	; (8000c5c <waitForGameStart+0x130>)
 8000bc6:	f7ff fb03 	bl	80001d0 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	4922      	ldr	r1, [pc, #136]	; (8000c5c <waitForGameStart+0x130>)
 8000bd2:	4823      	ldr	r0, [pc, #140]	; (8000c60 <waitForGameStart+0x134>)
 8000bd4:	f002 fff6 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\t3. First person to complete the action wins the round.\r\n");
 8000bd8:	4927      	ldr	r1, [pc, #156]	; (8000c78 <waitForGameStart+0x14c>)
 8000bda:	4820      	ldr	r0, [pc, #128]	; (8000c5c <waitForGameStart+0x130>)
 8000bdc:	f003 fcea 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000be0:	481e      	ldr	r0, [pc, #120]	; (8000c5c <waitForGameStart+0x130>)
 8000be2:	f7ff faf5 	bl	80001d0 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	491b      	ldr	r1, [pc, #108]	; (8000c5c <waitForGameStart+0x130>)
 8000bee:	481c      	ldr	r0, [pc, #112]	; (8000c60 <waitForGameStart+0x134>)
 8000bf0:	f002 ffe8 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\t4. If you do the wrong action, you lose a point.\r\n");
 8000bf4:	4921      	ldr	r1, [pc, #132]	; (8000c7c <waitForGameStart+0x150>)
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <waitForGameStart+0x130>)
 8000bf8:	f003 fcdc 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <waitForGameStart+0x130>)
 8000bfe:	f7ff fae7 	bl	80001d0 <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	4914      	ldr	r1, [pc, #80]	; (8000c5c <waitForGameStart+0x130>)
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <waitForGameStart+0x134>)
 8000c0c:	f002 ffda 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\n\nPress button when you are ready to start...\r\n");
 8000c10:	491b      	ldr	r1, [pc, #108]	; (8000c80 <waitForGameStart+0x154>)
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <waitForGameStart+0x130>)
 8000c14:	f003 fcce 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <waitForGameStart+0x130>)
 8000c1a:	f7ff fad9 	bl	80001d0 <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	2364      	movs	r3, #100	; 0x64
 8000c24:	490d      	ldr	r1, [pc, #52]	; (8000c5c <waitForGameStart+0x130>)
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <waitForGameStart+0x134>)
 8000c28:	f002 ffcc 	bl	8003bc4 <HAL_UART_Transmit>


	while(!gameStart);
 8000c2c:	bf00      	nop
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <waitForGameStart+0x158>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0fb      	beq.n	8000c2e <waitForGameStart+0x102>

	sprintf(msg_buffer, "GAME STARTED! ENJOY!\r\n");
 8000c36:	4914      	ldr	r1, [pc, #80]	; (8000c88 <waitForGameStart+0x15c>)
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <waitForGameStart+0x130>)
 8000c3a:	f003 fcbb 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <waitForGameStart+0x130>)
 8000c40:	f7ff fac6 	bl	80001d0 <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	4904      	ldr	r1, [pc, #16]	; (8000c5c <waitForGameStart+0x130>)
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <waitForGameStart+0x134>)
 8000c4e:	f002 ffb9 	bl	8003bc4 <HAL_UART_Transmit>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	080058f4 	.word	0x080058f4
 8000c5c:	200000dc 	.word	0x200000dc
 8000c60:	200001ac 	.word	0x200001ac
 8000c64:	080059ac 	.word	0x080059ac
 8000c68:	08005958 	.word	0x08005958
 8000c6c:	080059cc 	.word	0x080059cc
 8000c70:	080059f0 	.word	0x080059f0
 8000c74:	08005a40 	.word	0x08005a40
 8000c78:	08005a8c 	.word	0x08005a8c
 8000c7c:	08005ac8 	.word	0x08005ac8
 8000c80:	08005afc 	.word	0x08005afc
 8000c84:	200000c0 	.word	0x200000c0
 8000c88:	08005b2c 	.word	0x08005b2c

08000c8c <startNextRound>:

void startNextRound(int dir) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	roundNumber ++;
 8000c94:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <startNextRound+0x164>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <startNextRound+0x164>)
 8000c9c:	6013      	str	r3, [r2, #0]

	sprintf(msg_buffer, "\n\n==================================================\r\n");
 8000c9e:	4955      	ldr	r1, [pc, #340]	; (8000df4 <startNextRound+0x168>)
 8000ca0:	4855      	ldr	r0, [pc, #340]	; (8000df8 <startNextRound+0x16c>)
 8000ca2:	f003 fc87 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ca6:	4854      	ldr	r0, [pc, #336]	; (8000df8 <startNextRound+0x16c>)
 8000ca8:	f7ff fa92 	bl	80001d0 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	2364      	movs	r3, #100	; 0x64
 8000cb2:	4951      	ldr	r1, [pc, #324]	; (8000df8 <startNextRound+0x16c>)
 8000cb4:	4851      	ldr	r0, [pc, #324]	; (8000dfc <startNextRound+0x170>)
 8000cb6:	f002 ff85 	bl	8003bc4 <HAL_UART_Transmit>
	sprintf(msg_buffer, "ROUND #%d\r\n", roundNumber);
 8000cba:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <startNextRound+0x164>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	494f      	ldr	r1, [pc, #316]	; (8000e00 <startNextRound+0x174>)
 8000cc2:	484d      	ldr	r0, [pc, #308]	; (8000df8 <startNextRound+0x16c>)
 8000cc4:	f003 fc76 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000cc8:	484b      	ldr	r0, [pc, #300]	; (8000df8 <startNextRound+0x16c>)
 8000cca:	f7ff fa81 	bl	80001d0 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	4948      	ldr	r1, [pc, #288]	; (8000df8 <startNextRound+0x16c>)
 8000cd6:	4849      	ldr	r0, [pc, #292]	; (8000dfc <startNextRound+0x170>)
 8000cd8:	f002 ff74 	bl	8003bc4 <HAL_UART_Transmit>
	sprintf(msg_buffer, "==================================================\r\n");
 8000cdc:	4949      	ldr	r1, [pc, #292]	; (8000e04 <startNextRound+0x178>)
 8000cde:	4846      	ldr	r0, [pc, #280]	; (8000df8 <startNextRound+0x16c>)
 8000ce0:	f003 fc68 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ce4:	4844      	ldr	r0, [pc, #272]	; (8000df8 <startNextRound+0x16c>)
 8000ce6:	f7ff fa73 	bl	80001d0 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	2364      	movs	r3, #100	; 0x64
 8000cf0:	4941      	ldr	r1, [pc, #260]	; (8000df8 <startNextRound+0x16c>)
 8000cf2:	4842      	ldr	r0, [pc, #264]	; (8000dfc <startNextRound+0x170>)
 8000cf4:	f002 ff66 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "The next round will begin in:\r\n");
 8000cf8:	4943      	ldr	r1, [pc, #268]	; (8000e08 <startNextRound+0x17c>)
 8000cfa:	483f      	ldr	r0, [pc, #252]	; (8000df8 <startNextRound+0x16c>)
 8000cfc:	f003 fc5a 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <startNextRound+0x16c>)
 8000d02:	f7ff fa65 	bl	80001d0 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	493a      	ldr	r1, [pc, #232]	; (8000df8 <startNextRound+0x16c>)
 8000d0e:	483b      	ldr	r0, [pc, #236]	; (8000dfc <startNextRound+0x170>)
 8000d10:	f002 ff58 	bl	8003bc4 <HAL_UART_Transmit>
	sprintf(msg_buffer, "3...\r\n");
 8000d14:	493d      	ldr	r1, [pc, #244]	; (8000e0c <startNextRound+0x180>)
 8000d16:	4838      	ldr	r0, [pc, #224]	; (8000df8 <startNextRound+0x16c>)
 8000d18:	f003 fc4c 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d1c:	4836      	ldr	r0, [pc, #216]	; (8000df8 <startNextRound+0x16c>)
 8000d1e:	f7ff fa57 	bl	80001d0 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	2364      	movs	r3, #100	; 0x64
 8000d28:	4933      	ldr	r1, [pc, #204]	; (8000df8 <startNextRound+0x16c>)
 8000d2a:	4834      	ldr	r0, [pc, #208]	; (8000dfc <startNextRound+0x170>)
 8000d2c:	f002 ff4a 	bl	8003bc4 <HAL_UART_Transmit>
	while (timer < 5000000) {
 8000d30:	e004      	b.n	8000d3c <startNextRound+0xb0>
		timer++;
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <startNextRound+0x184>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <startNextRound+0x184>)
 8000d3a:	6013      	str	r3, [r2, #0]
	while (timer < 5000000) {
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <startNextRound+0x184>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <startNextRound+0x188>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	ddf5      	ble.n	8000d32 <startNextRound+0xa6>
	}
	timer = 0;
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <startNextRound+0x184>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

	sprintf(msg_buffer, "2...\r\n");
 8000d4c:	4932      	ldr	r1, [pc, #200]	; (8000e18 <startNextRound+0x18c>)
 8000d4e:	482a      	ldr	r0, [pc, #168]	; (8000df8 <startNextRound+0x16c>)
 8000d50:	f003 fc30 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <startNextRound+0x16c>)
 8000d56:	f7ff fa3b 	bl	80001d0 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	4925      	ldr	r1, [pc, #148]	; (8000df8 <startNextRound+0x16c>)
 8000d62:	4826      	ldr	r0, [pc, #152]	; (8000dfc <startNextRound+0x170>)
 8000d64:	f002 ff2e 	bl	8003bc4 <HAL_UART_Transmit>
	while (timer < 5000000) {
 8000d68:	e004      	b.n	8000d74 <startNextRound+0xe8>
		timer++;
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <startNextRound+0x184>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <startNextRound+0x184>)
 8000d72:	6013      	str	r3, [r2, #0]
	while (timer < 5000000) {
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <startNextRound+0x184>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <startNextRound+0x188>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	ddf5      	ble.n	8000d6a <startNextRound+0xde>
	}
	timer = 0;
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <startNextRound+0x184>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]

	sprintf(msg_buffer, "1...\r\n");
 8000d84:	4925      	ldr	r1, [pc, #148]	; (8000e1c <startNextRound+0x190>)
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <startNextRound+0x16c>)
 8000d88:	f003 fc14 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d8c:	481a      	ldr	r0, [pc, #104]	; (8000df8 <startNextRound+0x16c>)
 8000d8e:	f7ff fa1f 	bl	80001d0 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	4917      	ldr	r1, [pc, #92]	; (8000df8 <startNextRound+0x16c>)
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <startNextRound+0x170>)
 8000d9c:	f002 ff12 	bl	8003bc4 <HAL_UART_Transmit>
	while (timer < 5000000) {
 8000da0:	e004      	b.n	8000dac <startNextRound+0x120>
		timer++;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <startNextRound+0x184>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <startNextRound+0x184>)
 8000daa:	6013      	str	r3, [r2, #0]
	while (timer < 5000000) {
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <startNextRound+0x184>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <startNextRound+0x188>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	ddf5      	ble.n	8000da2 <startNextRound+0x116>
	}
	timer = 0;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <startNextRound+0x184>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

	sprintf(msg_buffer, "%s\r\n", directives[dir]);
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <startNextRound+0x194>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4916      	ldr	r1, [pc, #88]	; (8000e24 <startNextRound+0x198>)
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <startNextRound+0x16c>)
 8000dce:	f003 fbf1 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <startNextRound+0x16c>)
 8000dd4:	f7ff f9fc 	bl	80001d0 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	4906      	ldr	r1, [pc, #24]	; (8000df8 <startNextRound+0x16c>)
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <startNextRound+0x170>)
 8000de2:	f002 feef 	bl	8003bc4 <HAL_UART_Transmit>

}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000c4 	.word	0x200000c4
 8000df4:	08005b44 	.word	0x08005b44
 8000df8:	200000dc 	.word	0x200000dc
 8000dfc:	200001ac 	.word	0x200001ac
 8000e00:	08005b7c 	.word	0x08005b7c
 8000e04:	08005958 	.word	0x08005958
 8000e08:	08005b88 	.word	0x08005b88
 8000e0c:	08005ba8 	.word	0x08005ba8
 8000e10:	200000bc 	.word	0x200000bc
 8000e14:	004c4b3f 	.word	0x004c4b3f
 8000e18:	08005bb0 	.word	0x08005bb0
 8000e1c:	08005bb8 	.word	0x08005bb8
 8000e20:	20000000 	.word	0x20000000
 8000e24:	08005bc0 	.word	0x08005bc0

08000e28 <decideWinner>:

void decideWinner(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	if(roundState % NUMBER_OF_DIRECTIVES == currentDirective) {
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <decideWinner+0xd4>)
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <decideWinner+0xd8>)
 8000e32:	fb83 3201 	smull	r3, r2, r3, r1
 8000e36:	17cb      	asrs	r3, r1, #31
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	1aca      	subs	r2, r1, r3
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <decideWinner+0xdc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d12b      	bne.n	8000ea2 <decideWinner+0x7a>
		// Right input
		if(roundState < 3) {
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <decideWinner+0xd4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	dc13      	bgt.n	8000e7a <decideWinner+0x52>
			// P1 wins point
			p1Score++;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <decideWinner+0xe0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <decideWinner+0xe0>)
 8000e5a:	6013      	str	r3, [r2, #0]

			sprintf(msg_buffer, "Player 1 has scored the point!\r\n");
 8000e5c:	492b      	ldr	r1, [pc, #172]	; (8000f0c <decideWinner+0xe4>)
 8000e5e:	482c      	ldr	r0, [pc, #176]	; (8000f10 <decideWinner+0xe8>)
 8000e60:	f003 fba8 	bl	80045b4 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000e64:	482a      	ldr	r0, [pc, #168]	; (8000f10 <decideWinner+0xe8>)
 8000e66:	f7ff f9b3 	bl	80001d0 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	4927      	ldr	r1, [pc, #156]	; (8000f10 <decideWinner+0xe8>)
 8000e72:	4828      	ldr	r0, [pc, #160]	; (8000f14 <decideWinner+0xec>)
 8000e74:	f002 fea6 	bl	8003bc4 <HAL_UART_Transmit>

			sprintf(msg_buffer, "Player 2 has done the wrong action. -1 point.\r\n");
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
		}
	}
}
 8000e78:	e03e      	b.n	8000ef8 <decideWinner+0xd0>
			p2Score++;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <decideWinner+0xf0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <decideWinner+0xf0>)
 8000e82:	6013      	str	r3, [r2, #0]
			sprintf(msg_buffer, "Player 2 has scored the point!\r\n");
 8000e84:	4925      	ldr	r1, [pc, #148]	; (8000f1c <decideWinner+0xf4>)
 8000e86:	4822      	ldr	r0, [pc, #136]	; (8000f10 <decideWinner+0xe8>)
 8000e88:	f003 fb94 	bl	80045b4 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000e8c:	4820      	ldr	r0, [pc, #128]	; (8000f10 <decideWinner+0xe8>)
 8000e8e:	f7ff f99f 	bl	80001d0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	491d      	ldr	r1, [pc, #116]	; (8000f10 <decideWinner+0xe8>)
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <decideWinner+0xec>)
 8000e9c:	f002 fe92 	bl	8003bc4 <HAL_UART_Transmit>
}
 8000ea0:	e02a      	b.n	8000ef8 <decideWinner+0xd0>
		if(roundState < 3) {
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <decideWinner+0xd4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	dc13      	bgt.n	8000ed2 <decideWinner+0xaa>
			p1Score--;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <decideWinner+0xe0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <decideWinner+0xe0>)
 8000eb2:	6013      	str	r3, [r2, #0]
			sprintf(msg_buffer, "Player 1 has done the wrong action. -1 point.\r\n");
 8000eb4:	491a      	ldr	r1, [pc, #104]	; (8000f20 <decideWinner+0xf8>)
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <decideWinner+0xe8>)
 8000eb8:	f003 fb7c 	bl	80045b4 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <decideWinner+0xe8>)
 8000ebe:	f7ff f987 	bl	80001d0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	4911      	ldr	r1, [pc, #68]	; (8000f10 <decideWinner+0xe8>)
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <decideWinner+0xec>)
 8000ecc:	f002 fe7a 	bl	8003bc4 <HAL_UART_Transmit>
}
 8000ed0:	e012      	b.n	8000ef8 <decideWinner+0xd0>
			p2Score--;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <decideWinner+0xf0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <decideWinner+0xf0>)
 8000eda:	6013      	str	r3, [r2, #0]
			sprintf(msg_buffer, "Player 2 has done the wrong action. -1 point.\r\n");
 8000edc:	4911      	ldr	r1, [pc, #68]	; (8000f24 <decideWinner+0xfc>)
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <decideWinner+0xe8>)
 8000ee0:	f003 fb68 	bl	80045b4 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <decideWinner+0xe8>)
 8000ee6:	f7ff f973 	bl	80001d0 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	2364      	movs	r3, #100	; 0x64
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <decideWinner+0xe8>)
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <decideWinner+0xec>)
 8000ef4:	f002 fe66 	bl	8003bc4 <HAL_UART_Transmit>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001a4 	.word	0x200001a4
 8000f00:	55555556 	.word	0x55555556
 8000f04:	200001a8 	.word	0x200001a8
 8000f08:	200000c8 	.word	0x200000c8
 8000f0c:	08005bc8 	.word	0x08005bc8
 8000f10:	200000dc 	.word	0x200000dc
 8000f14:	200001ac 	.word	0x200001ac
 8000f18:	200000cc 	.word	0x200000cc
 8000f1c:	08005bec 	.word	0x08005bec
 8000f20:	08005c10 	.word	0x08005c10
 8000f24:	08005c40 	.word	0x08005c40

08000f28 <updateScoreboard>:

void updateScoreboard(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	sprintf(msg_buffer, "Scoreboard:\r\n");
 8000f2c:	4918      	ldr	r1, [pc, #96]	; (8000f90 <updateScoreboard+0x68>)
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <updateScoreboard+0x6c>)
 8000f30:	f003 fb40 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000f34:	4817      	ldr	r0, [pc, #92]	; (8000f94 <updateScoreboard+0x6c>)
 8000f36:	f7ff f94b 	bl	80001d0 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	4914      	ldr	r1, [pc, #80]	; (8000f94 <updateScoreboard+0x6c>)
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <updateScoreboard+0x70>)
 8000f44:	f002 fe3e 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\tPlayer 1: %d\r\n", p1Score);
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <updateScoreboard+0x74>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4914      	ldr	r1, [pc, #80]	; (8000fa0 <updateScoreboard+0x78>)
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <updateScoreboard+0x6c>)
 8000f52:	f003 fb2f 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <updateScoreboard+0x6c>)
 8000f58:	f7ff f93a 	bl	80001d0 <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	490c      	ldr	r1, [pc, #48]	; (8000f94 <updateScoreboard+0x6c>)
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <updateScoreboard+0x70>)
 8000f66:	f002 fe2d 	bl	8003bc4 <HAL_UART_Transmit>

	sprintf(msg_buffer, "\tPlayer 2: %d\r\n", p2Score);
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <updateScoreboard+0x7c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <updateScoreboard+0x80>)
 8000f72:	4808      	ldr	r0, [pc, #32]	; (8000f94 <updateScoreboard+0x6c>)
 8000f74:	f003 fb1e 	bl	80045b4 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <updateScoreboard+0x6c>)
 8000f7a:	f7ff f929 	bl	80001d0 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	4903      	ldr	r1, [pc, #12]	; (8000f94 <updateScoreboard+0x6c>)
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <updateScoreboard+0x70>)
 8000f88:	f002 fe1c 	bl	8003bc4 <HAL_UART_Transmit>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08005c70 	.word	0x08005c70
 8000f94:	200000dc 	.word	0x200000dc
 8000f98:	200001ac 	.word	0x200001ac
 8000f9c:	200000c8 	.word	0x200000c8
 8000fa0:	08005c80 	.word	0x08005c80
 8000fa4:	200000cc 	.word	0x200000cc
 8000fa8:	08005c90 	.word	0x08005c90

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_MspInit+0x44>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_MspInit+0x44>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x44>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x44>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001010:	d113      	bne.n	800103a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_TIM_Base_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_TIM_Base_MspInit+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_TIM_Base_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	201c      	movs	r0, #28
 8001030:	f000 fb5f 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001034:	201c      	movs	r0, #28
 8001036:	f000 fb78 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0ac      	sub	sp, #176	; 0xb0
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2288      	movs	r2, #136	; 0x88
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fa5b 	bl	8004524 <memset>
  if(huart->Instance==USART1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <HAL_UART_MspInit+0xb0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d13a      	bne.n	80010ee <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001078:	2301      	movs	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107c:	2300      	movs	r3, #0
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fc4b 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff ff8c 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_MspInit+0xb4>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_UART_MspInit+0xb4>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6613      	str	r3, [r2, #96]	; 0x60
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_UART_MspInit+0xb4>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_UART_MspInit+0xb4>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_UART_MspInit+0xb4>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_UART_MspInit+0xb4>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c4:	23c0      	movs	r3, #192	; 0xc0
 80010c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_UART_MspInit+0xb8>)
 80010ea:	f000 fb39 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	37b0      	adds	r7, #176	; 0xb0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 f9b4 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fcdb 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}

08001166 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800116a:	2002      	movs	r0, #2
 800116c:	f000 fcd4 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001178:	2004      	movs	r0, #4
 800117a:	f000 fccd 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}

08001182 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001186:	2008      	movs	r0, #8
 8001188:	f000 fcc6 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001194:	2010      	movs	r0, #16
 8001196:	f000 fcbf 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}

0800119e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80011a2:	2020      	movs	r0, #32
 80011a4:	f000 fcb8 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM2_IRQHandler+0x10>)
 80011b2:	f002 f8c8 	bl	8003346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000230 	.word	0x20000230

080011c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c8:	f000 fca6 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_kill>:

int _kill(int pid, int sig)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011ea:	f003 f971 	bl	80044d0 <__errno>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2216      	movs	r2, #22
 80011f2:	601a      	str	r2, [r3, #0]
	return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_exit>:

void _exit (int status)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffe7 	bl	80011e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001212:	e7fe      	b.n	8001212 <_exit+0x12>

08001214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00a      	b.n	800123c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001226:	f3af 8000 	nop.w
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbf0      	blt.n	8001226 <_read+0x12>
	}

return len;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e009      	b.n	8001274 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf1      	blt.n	8001260 <_write+0x12>
	}
	return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:

int _close(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ae:	605a      	str	r2, [r3, #4]
	return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f003 f8d6 	bl	80044d0 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20018000 	.word	0x20018000
 8001350:	00000400 	.word	0x00000400
 8001354:	200000d0 	.word	0x200000d0
 8001358:	20000290 	.word	0x20000290

0800135c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <SystemInit+0x5c>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <SystemInit+0x5c>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <SystemInit+0x60>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <SystemInit+0x60>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <SystemInit+0x60>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <SystemInit+0x60>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <SystemInit+0x60>)
 8001388:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800138c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001390:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <SystemInit+0x60>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <SystemInit+0x60>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <SystemInit+0x60>)
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SystemInit+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	40021000 	.word	0x40021000

080013c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff ffca 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ca:	e003      	b.n	80013d4 <LoopCopyDataInit>

080013cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013d2:	3104      	adds	r1, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013dc:	d3f6      	bcc.n	80013cc <CopyDataInit>
	ldr	r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013e0:	e002      	b.n	80013e8 <LoopFillZerobss>

080013e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013e4:	f842 3b04 	str.w	r3, [r2], #4

080013e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <LoopForever+0x16>)
	cmp	r2, r3
 80013ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013ec:	d3f9      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f003 f875 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f2:	f7ff f8c1 	bl	8000578 <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013fc:	08005e44 	.word	0x08005e44
	ldr	r0, =_sdata
 8001400:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001404:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 8001408:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 800140c:	20000290 	.word	0x20000290

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>

08001412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f95d 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f80e 	bl	8001444 <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e001      	b.n	8001438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001434:	f7ff fdc0 	bl	8000fb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001438:	79fb      	ldrb	r3, [r7, #7]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_InitTick+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_InitTick+0x70>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_InitTick+0x6c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f969 	bl	8001746 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d809      	bhi.n	8001494 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f933 	bl	80016f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_InitTick+0x74>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e007      	b.n	80014a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e004      	b.n	80014a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e001      	b.n	80014a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000038 	.word	0x20000038
 80014b4:	20000030 	.word	0x20000030
 80014b8:	20000034 	.word	0x20000034

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000038 	.word	0x20000038
 80014e0:	2000027c 	.word	0x2000027c

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2000027c 	.word	0x2000027c

080014fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_SuspendTick+0x1c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_SuspendTick+0x1c>)
 8001506:	f023 0302 	bic.w	r3, r3, #2
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_ResumeTick+0x1c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_ResumeTick+0x1c>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e17f      	b.n	8001a70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8171 	beq.w	8001a6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d00b      	beq.n	80017a8 <HAL_GPIO_Init+0x48>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179c:	2b11      	cmp	r3, #17
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b12      	cmp	r3, #18
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b03      	cmp	r3, #3
 8001814:	d118      	bne.n	8001848 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800181c:	2201      	movs	r2, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	f003 0201 	and.w	r2, r3, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x128>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d123      	bne.n	80018d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80ac 	beq.w	8001a6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6613      	str	r3, [r2, #96]	; 0x60
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800192a:	4a5a      	ldr	r2, [pc, #360]	; (8001a94 <HAL_GPIO_Init+0x334>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x242>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x338>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_GPIO_Init+0x33c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x340>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <HAL_GPIO_Init+0x344>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x348>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x34c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x22a>
 8001986:	2306      	movs	r3, #6
 8001988:	e00c      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 800198a:	2307      	movs	r3, #7
 800198c:	e00a      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 800198e:	2305      	movs	r3, #5
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 8001992:	2304      	movs	r3, #4
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x244>
 80019a2:	2300      	movs	r3, #0
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b4:	4937      	ldr	r1, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x334>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e6:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f ae78 	bne.w	8001770 <HAL_GPIO_Init+0x10>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000c00 	.word	0x48000c00
 8001aa4:	48001000 	.word	0x48001000
 8001aa8:	48001400 	.word	0x48001400
 8001aac:	48001800 	.word	0x48001800
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43d9      	mvns	r1, r3
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	400b      	ands	r3, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe ff26 	bl	8000988 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b66:	d10e      	bne.n	8001b86 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001b68:	f000 f8b6 	bl	8001cd8 <HAL_PWREx_DisableLowPowerRunMode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001b72:	e016      	b.n	8001ba2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b80:	d001      	beq.n	8001b86 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001b82:	f000 f899 	bl	8001cb8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_PWR_EnterSLEEPMode+0x64>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_PWR_EnterSLEEPMode+0x64>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001b98:	bf30      	wfi
 8001b9a:	e002      	b.n	8001ba2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001b9c:	bf40      	sev
    __WFE();
 8001b9e:	bf20      	wfe
    __WFE();
 8001ba0:	bf20      	wfe
  }

}
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	6113      	str	r3, [r2, #16]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001bda:	f023 0302 	bic.w	r3, r3, #2
 8001bde:	6113      	str	r3, [r2, #16]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1a:	d130      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c28:	d038      	beq.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2232      	movs	r2, #50	; 0x32
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c50:	e002      	b.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c64:	d102      	bne.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f2      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d110      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e00f      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8a:	d007      	beq.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c94:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	20000030 	.word	0x20000030
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2232      	movs	r2, #50	; 0x32
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9b      	lsrs	r3, r3, #18
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001d00:	e002      	b.n	8001d08 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d14:	d102      	bne.n	8001d1c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f2      	bne.n	8001d02 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	d101      	bne.n	8001d2e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e000      	b.n	8001d30 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	20000030 	.word	0x20000030
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e3d4      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d64:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80e4 	beq.w	8001f44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_RCC_OscConfig+0x4a>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	f040 808b 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	f040 8087 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d92:	4b93      	ldr	r3, [pc, #588]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x62>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e3ac      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x7c>
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_OscConfig+0x88>
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d223      	bcs.n	8001e1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fd41 	bl	8002860 <RCC_SetFlashLatencyFromMSIRange>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e38d      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de8:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7c      	ldr	r2, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4977      	ldr	r1, [pc, #476]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	4972      	ldr	r1, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
 8001e1a:	e025      	b.n	8001e68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6f      	ldr	r2, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	496a      	ldr	r1, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	4965      	ldr	r1, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fd01 	bl	8002860 <RCC_SetFlashLatencyFromMSIRange>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e34d      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e68:	f000 fc36 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	495a      	ldr	r1, [pc, #360]	; (8001fe4 <HAL_RCC_OscConfig+0x29c>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x2a0>)
 8001e86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e88:	4b58      	ldr	r3, [pc, #352]	; (8001fec <HAL_RCC_OscConfig+0x2a4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fad9 	bl	8001444 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d052      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	e331      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d032      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb16 	bl	80014e4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fb12 	bl	80014e4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e31a      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	493b      	ldr	r1, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e01a      	b.n	8001f44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fae3 	bl	80014e4 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f22:	f7ff fadf 	bl	80014e4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e2e7      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x1da>
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d074      	beq.n	800203a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x21a>
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d10e      	bne.n	8001f7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d10b      	bne.n	8001f7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d064      	beq.n	8002038 <HAL_RCC_OscConfig+0x2f0>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d160      	bne.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e2c4      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x24a>
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e01d      	b.n	8001fce <HAL_RCC_OscConfig+0x286>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x26e>
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x286>
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01c      	beq.n	8002010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fa85 	bl	80014e4 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fdc:	e011      	b.n	8002002 <HAL_RCC_OscConfig+0x2ba>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08005ca0 	.word	0x08005ca0
 8001fe8:	20000030 	.word	0x20000030
 8001fec:	20000034 	.word	0x20000034
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fa78 	bl	80014e4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e280      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4baf      	ldr	r3, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2a8>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fa68 	bl	80014e4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fa64 	bl	80014e4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e26c      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202a:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x2d0>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d060      	beq.n	8002108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x310>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d119      	bne.n	8002086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d116      	bne.n	8002086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	4b99      	ldr	r3, [pc, #612]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x328>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e249      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	4990      	ldr	r1, [pc, #576]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002084:	e040      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d023      	beq.n	80020d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208e:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8b      	ldr	r2, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7ff fa23 	bl	80014e4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff fa1f 	bl	80014e4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e227      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	497c      	ldr	r1, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e018      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f9ff 	bl	80014e4 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f9fb 	bl	80014e4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e203      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03c      	beq.n	800218e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01c      	beq.n	8002156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff f9da 	bl	80014e4 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff f9d6 	bl	80014e4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1de      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCC_OscConfig+0x3ec>
 8002154:	e01b      	b.n	800218e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7ff f9bd 	bl	80014e4 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff f9b9 	bl	80014e4 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1c1      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80a6 	beq.w	80022e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a0:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d118      	bne.n	8002206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e0:	f7ff f980 	bl	80014e4 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7ff f97c 	bl	80014e4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e184      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x4d8>
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221e:	e024      	b.n	800226a <HAL_RCC_OscConfig+0x522>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d110      	bne.n	800224a <HAL_RCC_OscConfig+0x502>
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002248:	e00f      	b.n	800226a <HAL_RCC_OscConfig+0x522>
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002262:	f023 0304 	bic.w	r3, r3, #4
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff f937 	bl	80014e4 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff f933 	bl	80014e4 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e139      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ed      	beq.n	800227a <HAL_RCC_OscConfig+0x532>
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff f920 	bl	80014e4 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff f91c 	bl	80014e4 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d906      	bls.n	80022c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e122      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c8:	4b90      	ldr	r3, [pc, #576]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e8      	bne.n	80022a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a8a      	ldr	r2, [pc, #552]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8108 	beq.w	8002502 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	f040 80d0 	bne.w	800249c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022fc:	4b83      	ldr	r3, [pc, #524]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	429a      	cmp	r2, r3
 800230e:	d130      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	3b01      	subs	r3, #1
 800231c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d127      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d11f      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800233c:	2a07      	cmp	r2, #7
 800233e:	bf14      	ite	ne
 8002340:	2201      	movne	r2, #1
 8002342:	2200      	moveq	r2, #0
 8002344:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002346:	4293      	cmp	r3, r2
 8002348:	d113      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d109      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	3b01      	subs	r3, #1
 800236c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d06e      	beq.n	8002450 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d069      	beq.n	800244c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002378:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b7      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002394:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5c      	ldr	r2, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a0:	f7ff f8a0 	bl	80014e4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff f89c 	bl	80014e4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0a4      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ba:	4b54      	ldr	r3, [pc, #336]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c6:	4b51      	ldr	r3, [pc, #324]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_RCC_OscConfig+0x7c8>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d6:	3a01      	subs	r2, #1
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e8:	0852      	lsrs	r2, r2, #1
 80023ea:	3a01      	subs	r2, #1
 80023ec:	0552      	lsls	r2, r2, #21
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f4:	0852      	lsrs	r2, r2, #1
 80023f6:	3a01      	subs	r2, #1
 80023f8:	0652      	lsls	r2, r2, #25
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002400:	0912      	lsrs	r2, r2, #4
 8002402:	0452      	lsls	r2, r2, #17
 8002404:	430a      	orrs	r2, r1
 8002406:	4941      	ldr	r1, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800240c:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3e      	ldr	r2, [pc, #248]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002418:	4b3c      	ldr	r3, [pc, #240]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a3b      	ldr	r2, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002424:	f7ff f85e 	bl	80014e4 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f85a 	bl	80014e4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e062      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800244a:	e05a      	b.n	8002502 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e059      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d152      	bne.n	8002502 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2a      	ldr	r2, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002474:	f7ff f836 	bl	80014e4 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff f832 	bl	80014e4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e03a      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x734>
 800249a:	e032      	b.n	8002502 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d02d      	beq.n	80024fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024c0:	f023 0303 	bic.w	r3, r3, #3
 80024c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7ff f805 	bl	80014e4 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7ff f801 	bl	80014e4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e009      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x796>
 80024fc:	e001      	b.n	8002502 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	f99d808c 	.word	0xf99d808c

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0c8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d910      	bls.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4961      	ldr	r1, [pc, #388]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b0      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d04c      	beq.n	80025fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d107      	bne.n	800257c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d121      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e09e      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d107      	bne.n	8002594 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d115      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e092      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e086      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e07e      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 0203 	bic.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	493f      	ldr	r1, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ce:	f7fe ff89 	bl	80014e4 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fe ff85 	bl	80014e4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e066      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 020c 	and.w	r2, r3, #12
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d1eb      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	492c      	ldr	r1, [pc, #176]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d210      	bcs.n	800264c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4924      	ldr	r1, [pc, #144]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e036      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4918      	ldr	r1, [pc, #96]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4910      	ldr	r1, [pc, #64]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800268a:	f000 f825 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490c      	ldr	r1, [pc, #48]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fec8 	bl	8001444 <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80026b8:	7afb      	ldrb	r3, [r7, #11]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08005ca0 	.word	0x08005ca0
 80026d0:	20000030 	.word	0x20000030
 80026d4:	20000034 	.word	0x20000034

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d121      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d11e      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e005      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d102      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e004      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d101      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 800275e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d134      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0xa6>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d003      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xac>
 800277c:	e005      	b.n	800278a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002780:	617b      	str	r3, [r7, #20]
      break;
 8002782:	e005      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002786:	617b      	str	r3, [r7, #20]
      break;
 8002788:	e002      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	3301      	adds	r3, #1
 800279c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	fb02 f203 	mul.w	r2, r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	0e5b      	lsrs	r3, r3, #25
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	3301      	adds	r3, #1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d0:	69bb      	ldr	r3, [r7, #24]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08005cb8 	.word	0x08005cb8
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000030 	.word	0x20000030

08002808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800280c:	f7ff fff0 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4904      	ldr	r1, [pc, #16]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08005cb0 	.word	0x08005cb0

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002838:	f7ff ffda 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4904      	ldr	r1, [pc, #16]	; (800285c <HAL_RCC_GetPCLK2Freq+0x28>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08005cb0 	.word	0x08005cb0

08002860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002878:	f7ff f9ba 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
 800287c:	6178      	str	r0, [r7, #20]
 800287e:	e014      	b.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b25      	ldr	r3, [pc, #148]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	6593      	str	r3, [r2, #88]	; 0x58
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002898:	f7ff f9aa 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
 800289c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b0:	d10b      	bne.n	80028ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d919      	bls.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2ba0      	cmp	r3, #160	; 0xa0
 80028bc:	d902      	bls.n	80028c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028be:	2302      	movs	r3, #2
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	e013      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028c4:	2301      	movs	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e010      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d902      	bls.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028d0:	2303      	movs	r3, #3
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e00a      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d102      	bne.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028dc:	2302      	movs	r3, #2
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e004      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b70      	cmp	r3, #112	; 0x70
 80028e6:	d101      	bne.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 0207 	bic.w	r2, r3, #7
 80028f4:	4909      	ldr	r1, [pc, #36]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	40022000 	.word	0x40022000

08002920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002928:	2300      	movs	r3, #0
 800292a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800292c:	2300      	movs	r3, #0
 800292e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d041      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002940:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002944:	d02a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002946:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800294a:	d824      	bhi.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800294c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002956:	d81e      	bhi.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002960:	d010      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002962:	e018      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002964:	4b86      	ldr	r3, [pc, #536]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a85      	ldr	r2, [pc, #532]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002970:	e015      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fabb 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002982:	e00c      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3320      	adds	r3, #32
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fba6 	bl	80030dc <RCCEx_PLLSAI2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002994:	e003      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	74fb      	strb	r3, [r7, #19]
      break;
 800299a:	e000      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800299c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a4:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b2:	4973      	ldr	r1, [pc, #460]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ba:	e001      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d041      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029d4:	d02a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029da:	d824      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e6:	d81e      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f0:	d010      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029f2:	e018      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029f4:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a00:	e015      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fa73 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3320      	adds	r3, #32
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fb5e 	bl	80030dc <RCCEx_PLLSAI2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	74fb      	strb	r3, [r7, #19]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a34:	4b52      	ldr	r3, [pc, #328]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a42:	494f      	ldr	r1, [pc, #316]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4a:	e001      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a0 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fd20 	bl	80014e4 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aa6:	e009      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fe fd1c 	bl	80014e4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aba:	e005      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d15c      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ace:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01f      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d019      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fcdb 	bl	80014e4 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b30:	e00b      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fcd7 	bl	80014e4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	74fb      	strb	r3, [r7, #19]
            break;
 8002b48:	e006      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ec      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6e:	4904      	ldr	r1, [pc, #16]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b76:	e009      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8c:	7c7b      	ldrb	r3, [r7, #17]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b9e      	ldr	r3, [pc, #632]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a9d      	ldr	r2, [pc, #628]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002baa:	4b98      	ldr	r3, [pc, #608]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f023 0203 	bic.w	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	4994      	ldr	r1, [pc, #592]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 020c 	bic.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	498c      	ldr	r1, [pc, #560]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bee:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	4983      	ldr	r1, [pc, #524]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	497b      	ldr	r1, [pc, #492]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	4972      	ldr	r1, [pc, #456]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c54:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	496a      	ldr	r1, [pc, #424]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	4961      	ldr	r1, [pc, #388]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	4959      	ldr	r1, [pc, #356]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	4950      	ldr	r1, [pc, #320]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	4948      	ldr	r1, [pc, #288]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	493f      	ldr	r1, [pc, #252]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d028      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d20:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2e:	4937      	ldr	r1, [pc, #220]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4a:	60d3      	str	r3, [r2, #12]
 8002d4c:	e011      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f8c8 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	491f      	ldr	r1, [pc, #124]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da8:	60d3      	str	r3, [r2, #12]
 8002daa:	e011      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f899 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e06:	60d3      	str	r3, [r2, #12]
 8002e08:	e014      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f867 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4e:	4928      	ldr	r1, [pc, #160]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f844 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d014      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	74bb      	strb	r3, [r7, #18]
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3320      	adds	r3, #32
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f925 	bl	80030dc <RCCEx_PLLSAI2_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ede:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ee6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f02:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0203 	and.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
       ||
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f26:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
       ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d047      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e044      	b.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d018      	beq.n	8002f7a <RCCEx_PLLSAI1_Config+0x86>
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d825      	bhi.n	8002f98 <RCCEx_PLLSAI1_Config+0xa4>
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d002      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x62>
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d009      	beq.n	8002f68 <RCCEx_PLLSAI1_Config+0x74>
 8002f54:	e020      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f56:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11d      	bne.n	8002f9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f66:	e01a      	b.n	8002f9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f68:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d116      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f78:	e013      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7a:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f96:	e006      	b.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e004      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	4944      	ldr	r1, [pc, #272]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d17d      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fa82 	bl	80014e4 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe4:	f7fe fa7e 	bl	80014e4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff6:	e005      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ff8:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ef      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d160      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d111      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	0912      	lsrs	r2, r2, #4
 8003028:	0452      	lsls	r2, r2, #17
 800302a:	430a      	orrs	r2, r1
 800302c:	492a      	ldr	r1, [pc, #168]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	610b      	str	r3, [r1, #16]
 8003032:	e027      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d112      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003042:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	0211      	lsls	r1, r2, #8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6912      	ldr	r2, [r2, #16]
 8003050:	0852      	lsrs	r2, r2, #1
 8003052:	3a01      	subs	r2, #1
 8003054:	0552      	lsls	r2, r2, #21
 8003056:	430a      	orrs	r2, r1
 8003058:	491f      	ldr	r1, [pc, #124]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	610b      	str	r3, [r1, #16]
 800305e:	e011      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	0211      	lsls	r1, r2, #8
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6952      	ldr	r2, [r2, #20]
 8003076:	0852      	lsrs	r2, r2, #1
 8003078:	3a01      	subs	r2, #1
 800307a:	0652      	lsls	r2, r2, #25
 800307c:	430a      	orrs	r2, r1
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800308e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fa28 	bl	80014e4 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003096:	e009      	b.n	80030ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003098:	f7fe fa24 	bl	80014e4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d902      	bls.n	80030ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	73fb      	strb	r3, [r7, #15]
          break;
 80030aa:	e005      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000

080030dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
       ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
       ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d047      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e044      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d018      	beq.n	8003162 <RCCEx_PLLSAI2_Config+0x86>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCCEx_PLLSAI2_Config+0xa4>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <RCCEx_PLLSAI2_Config+0x62>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d009      	beq.n	8003150 <RCCEx_PLLSAI2_Config+0x74>
 800313c:	e020      	b.n	8003180 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313e:	4b55      	ldr	r3, [pc, #340]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e01a      	b.n	8003186 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e013      	b.n	800318a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003162:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317e:	e006      	b.n	800318e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800318e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4939      	ldr	r1, [pc, #228]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d167      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fe f98e 	bl	80014e4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031cc:	f7fe f98a 	bl	80014e4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
        break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ef      	bne.n	80031cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d14a      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	0912      	lsrs	r2, r2, #4
 8003210:	0452      	lsls	r2, r2, #17
 8003212:	430a      	orrs	r2, r1
 8003214:	491f      	ldr	r1, [pc, #124]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	614b      	str	r3, [r1, #20]
 800321a:	e011      	b.n	8003240 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	0211      	lsls	r1, r2, #8
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6912      	ldr	r2, [r2, #16]
 8003232:	0852      	lsrs	r2, r2, #1
 8003234:	3a01      	subs	r2, #1
 8003236:	0652      	lsls	r2, r2, #25
 8003238:	430a      	orrs	r2, r1
 800323a:	4916      	ldr	r1, [pc, #88]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7fe f94a 	bl	80014e4 <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003252:	e009      	b.n	8003268 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003254:	f7fe f946 	bl	80014e4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d902      	bls.n	8003268 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	73fb      	strb	r3, [r7, #15]
          break;
 8003266:	e005      	b.n	8003274 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ef      	beq.n	8003254 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4904      	ldr	r1, [pc, #16]	; (8003294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fe9e 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fa4c 	bl	8003774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d122      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d11b      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0202 	mvn.w	r2, #2
 8003372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f9d5 	bl	8003738 <HAL_TIM_IC_CaptureCallback>
 800338e:	e005      	b.n	800339c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f9c7 	bl	8003724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9d8 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d122      	bne.n	80033f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d11b      	bne.n	80033f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0204 	mvn.w	r2, #4
 80033c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f9ab 	bl	8003738 <HAL_TIM_IC_CaptureCallback>
 80033e2:	e005      	b.n	80033f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f99d 	bl	8003724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f9ae 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d122      	bne.n	800344a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11b      	bne.n	800344a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0208 	mvn.w	r2, #8
 800341a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2204      	movs	r2, #4
 8003420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f981 	bl	8003738 <HAL_TIM_IC_CaptureCallback>
 8003436:	e005      	b.n	8003444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f973 	bl	8003724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f984 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d122      	bne.n	800349e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b10      	cmp	r3, #16
 8003464:	d11b      	bne.n	800349e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0210 	mvn.w	r2, #16
 800346e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2208      	movs	r2, #8
 8003474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f957 	bl	8003738 <HAL_TIM_IC_CaptureCallback>
 800348a:	e005      	b.n	8003498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f949 	bl	8003724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f95a 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0201 	mvn.w	r2, #1
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f923 	bl	8003710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b80      	cmp	r3, #128	; 0x80
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fb05 	bl	8003b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 faf8 	bl	8003b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f908 	bl	8003760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d10e      	bne.n	800357c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	d107      	bne.n	800357c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0220 	mvn.w	r2, #32
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fab8 	bl	8003aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_TIM_ConfigClockSource+0x18>
 8003598:	2302      	movs	r3, #2
 800359a:	e0b5      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x184>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	d03e      	beq.n	8003658 <HAL_TIM_ConfigClockSource+0xd4>
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035de:	f200 8087 	bhi.w	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	f000 8085 	beq.w	80036f4 <HAL_TIM_ConfigClockSource+0x170>
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d87f      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d01a      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xa6>
 80035f4:	2b70      	cmp	r3, #112	; 0x70
 80035f6:	d87b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b60      	cmp	r3, #96	; 0x60
 80035fa:	d050      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x11a>
 80035fc:	2b60      	cmp	r3, #96	; 0x60
 80035fe:	d877      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b50      	cmp	r3, #80	; 0x50
 8003602:	d03c      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xfa>
 8003604:	2b50      	cmp	r3, #80	; 0x50
 8003606:	d873      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d058      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x13a>
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d86f      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b30      	cmp	r3, #48	; 0x30
 8003612:	d064      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003614:	2b30      	cmp	r3, #48	; 0x30
 8003616:	d86b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b20      	cmp	r3, #32
 800361a:	d060      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d867      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05c      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003624:	2b10      	cmp	r3, #16
 8003626:	d05a      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003628:	e062      	b.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f000 f9af 	bl	800399c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800364c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	609a      	str	r2, [r3, #8]
      break;
 8003656:	e04e      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f000 f998 	bl	800399c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367a:	609a      	str	r2, [r3, #8]
      break;
 800367c:	e03b      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	461a      	mov	r2, r3
 800368c:	f000 f90c 	bl	80038a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2150      	movs	r1, #80	; 0x50
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f965 	bl	8003966 <TIM_ITRx_SetConfig>
      break;
 800369c:	e02b      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 f92b 	bl	8003906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2160      	movs	r1, #96	; 0x60
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f955 	bl	8003966 <TIM_ITRx_SetConfig>
      break;
 80036bc:	e01b      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 f8ec 	bl	80038a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f945 	bl	8003966 <TIM_ITRx_SetConfig>
      break;
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f000 f93c 	bl	8003966 <TIM_ITRx_SetConfig>
        break;
 80036ee:	e002      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80036f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a40      	ldr	r2, [pc, #256]	; (8003888 <TIM_Base_SetConfig+0x114>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d00f      	beq.n	80037b4 <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3d      	ldr	r2, [pc, #244]	; (800388c <TIM_Base_SetConfig+0x118>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00b      	beq.n	80037b4 <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3c      	ldr	r2, [pc, #240]	; (8003890 <TIM_Base_SetConfig+0x11c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_Base_SetConfig+0x40>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	; (8003894 <TIM_Base_SetConfig+0x120>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0x40>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a3a      	ldr	r2, [pc, #232]	; (8003898 <TIM_Base_SetConfig+0x124>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d108      	bne.n	80037c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <TIM_Base_SetConfig+0x114>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01f      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d01b      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2c      	ldr	r2, [pc, #176]	; (800388c <TIM_Base_SetConfig+0x118>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d017      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <TIM_Base_SetConfig+0x11c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <TIM_Base_SetConfig+0x120>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a29      	ldr	r2, [pc, #164]	; (8003898 <TIM_Base_SetConfig+0x124>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a28      	ldr	r2, [pc, #160]	; (800389c <TIM_Base_SetConfig+0x128>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a27      	ldr	r2, [pc, #156]	; (80038a0 <TIM_Base_SetConfig+0x12c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_Base_SetConfig+0x9a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a26      	ldr	r2, [pc, #152]	; (80038a4 <TIM_Base_SetConfig+0x130>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a10      	ldr	r2, [pc, #64]	; (8003888 <TIM_Base_SetConfig+0x114>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00f      	beq.n	800386c <TIM_Base_SetConfig+0xf8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <TIM_Base_SetConfig+0x124>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00b      	beq.n	800386c <TIM_Base_SetConfig+0xf8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a11      	ldr	r2, [pc, #68]	; (800389c <TIM_Base_SetConfig+0x128>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <TIM_Base_SetConfig+0xf8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <TIM_Base_SetConfig+0x12c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_Base_SetConfig+0xf8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <TIM_Base_SetConfig+0x130>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d103      	bne.n	8003874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	615a      	str	r2, [r3, #20]
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800
 8003894:	40000c00 	.word	0x40000c00
 8003898:	40013400 	.word	0x40013400
 800389c:	40014000 	.word	0x40014000
 80038a0:	40014400 	.word	0x40014400
 80038a4:	40014800 	.word	0x40014800

080038a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 030a 	bic.w	r3, r3, #10
 80038e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003906:	b480      	push	{r7}
 8003908:	b087      	sub	sp, #28
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 0210 	bic.w	r2, r3, #16
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	031b      	lsls	r3, r3, #12
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	f043 0307 	orr.w	r3, r3, #7
 8003988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	431a      	orrs	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e068      	b.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2d      	ldr	r2, [pc, #180]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01d      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d018      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40014000 	.word	0x40014000

08003aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e040      	b.n	8003bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd fa7c 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8c0 	bl	8003cec <UART_SetConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e022      	b.n	8003bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fb3e 	bl	8004200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fbc5 	bl	8004344 <UART_CheckIdleState>
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 8082 	bne.w	8003ce2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_UART_Transmit+0x26>
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07a      	b.n	8003ce4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_UART_Transmit+0x38>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e073      	b.n	8003ce4 <HAL_UART_Transmit+0x120>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2221      	movs	r2, #33	; 0x21
 8003c10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c12:	f7fd fc67 	bl	80014e4 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d108      	bne.n	8003c44 <HAL_UART_Transmit+0x80>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e003      	b.n	8003c4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c54:	e02d      	b.n	8003cb2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fbb8 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e039      	b.n	8003ce4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	881a      	ldrh	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c82:	b292      	uxth	r2, r2
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e008      	b.n	8003ca0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	b292      	uxth	r2, r2
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1cb      	bne.n	8003c56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb84 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e005      	b.n	8003ce4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cec:	b5b0      	push	{r4, r5, r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4bad      	ldr	r3, [pc, #692]	; (8003fcc <UART_SetConfig+0x2e0>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	69f9      	ldr	r1, [r7, #28]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4aa2      	ldr	r2, [pc, #648]	; (8003fd0 <UART_SetConfig+0x2e4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a99      	ldr	r2, [pc, #612]	; (8003fd4 <UART_SetConfig+0x2e8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d121      	bne.n	8003db6 <UART_SetConfig+0xca>
 8003d72:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <UART_SetConfig+0x2ec>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d817      	bhi.n	8003db0 <UART_SetConfig+0xc4>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <UART_SetConfig+0x9c>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003da5 	.word	0x08003da5
 8003d90:	08003d9f 	.word	0x08003d9f
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	2301      	movs	r3, #1
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	e0e7      	b.n	8003f6e <UART_SetConfig+0x282>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	76fb      	strb	r3, [r7, #27]
 8003da2:	e0e4      	b.n	8003f6e <UART_SetConfig+0x282>
 8003da4:	2304      	movs	r3, #4
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e0e1      	b.n	8003f6e <UART_SetConfig+0x282>
 8003daa:	2308      	movs	r3, #8
 8003dac:	76fb      	strb	r3, [r7, #27]
 8003dae:	e0de      	b.n	8003f6e <UART_SetConfig+0x282>
 8003db0:	2310      	movs	r3, #16
 8003db2:	76fb      	strb	r3, [r7, #27]
 8003db4:	e0db      	b.n	8003f6e <UART_SetConfig+0x282>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a88      	ldr	r2, [pc, #544]	; (8003fdc <UART_SetConfig+0x2f0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d132      	bne.n	8003e26 <UART_SetConfig+0x13a>
 8003dc0:	4b85      	ldr	r3, [pc, #532]	; (8003fd8 <UART_SetConfig+0x2ec>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d828      	bhi.n	8003e20 <UART_SetConfig+0x134>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0xe8>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	08003e21 	.word	0x08003e21
 8003ddc:	08003e21 	.word	0x08003e21
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e15 	.word	0x08003e15
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e0f 	.word	0x08003e0f
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e21 	.word	0x08003e21
 8003e04:	08003e1b 	.word	0x08003e1b
 8003e08:	2300      	movs	r3, #0
 8003e0a:	76fb      	strb	r3, [r7, #27]
 8003e0c:	e0af      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	76fb      	strb	r3, [r7, #27]
 8003e12:	e0ac      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e14:	2304      	movs	r3, #4
 8003e16:	76fb      	strb	r3, [r7, #27]
 8003e18:	e0a9      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	76fb      	strb	r3, [r7, #27]
 8003e1e:	e0a6      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e20:	2310      	movs	r3, #16
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e0a3      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6d      	ldr	r2, [pc, #436]	; (8003fe0 <UART_SetConfig+0x2f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d120      	bne.n	8003e72 <UART_SetConfig+0x186>
 8003e30:	4b69      	ldr	r3, [pc, #420]	; (8003fd8 <UART_SetConfig+0x2ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d013      	beq.n	8003e66 <UART_SetConfig+0x17a>
 8003e3e:	2b30      	cmp	r3, #48	; 0x30
 8003e40:	d814      	bhi.n	8003e6c <UART_SetConfig+0x180>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d009      	beq.n	8003e5a <UART_SetConfig+0x16e>
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d810      	bhi.n	8003e6c <UART_SetConfig+0x180>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <UART_SetConfig+0x168>
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d006      	beq.n	8003e60 <UART_SetConfig+0x174>
 8003e52:	e00b      	b.n	8003e6c <UART_SetConfig+0x180>
 8003e54:	2300      	movs	r3, #0
 8003e56:	76fb      	strb	r3, [r7, #27]
 8003e58:	e089      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	76fb      	strb	r3, [r7, #27]
 8003e5e:	e086      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e60:	2304      	movs	r3, #4
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	e083      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e66:	2308      	movs	r3, #8
 8003e68:	76fb      	strb	r3, [r7, #27]
 8003e6a:	e080      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e07d      	b.n	8003f6e <UART_SetConfig+0x282>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <UART_SetConfig+0x2f8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d120      	bne.n	8003ebe <UART_SetConfig+0x1d2>
 8003e7c:	4b56      	ldr	r3, [pc, #344]	; (8003fd8 <UART_SetConfig+0x2ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e86:	2bc0      	cmp	r3, #192	; 0xc0
 8003e88:	d013      	beq.n	8003eb2 <UART_SetConfig+0x1c6>
 8003e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e8c:	d814      	bhi.n	8003eb8 <UART_SetConfig+0x1cc>
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d009      	beq.n	8003ea6 <UART_SetConfig+0x1ba>
 8003e92:	2b80      	cmp	r3, #128	; 0x80
 8003e94:	d810      	bhi.n	8003eb8 <UART_SetConfig+0x1cc>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0x1b4>
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d006      	beq.n	8003eac <UART_SetConfig+0x1c0>
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x1cc>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	76fb      	strb	r3, [r7, #27]
 8003ea4:	e063      	b.n	8003f6e <UART_SetConfig+0x282>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	76fb      	strb	r3, [r7, #27]
 8003eaa:	e060      	b.n	8003f6e <UART_SetConfig+0x282>
 8003eac:	2304      	movs	r3, #4
 8003eae:	76fb      	strb	r3, [r7, #27]
 8003eb0:	e05d      	b.n	8003f6e <UART_SetConfig+0x282>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	76fb      	strb	r3, [r7, #27]
 8003eb6:	e05a      	b.n	8003f6e <UART_SetConfig+0x282>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	76fb      	strb	r3, [r7, #27]
 8003ebc:	e057      	b.n	8003f6e <UART_SetConfig+0x282>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a49      	ldr	r2, [pc, #292]	; (8003fe8 <UART_SetConfig+0x2fc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d125      	bne.n	8003f14 <UART_SetConfig+0x228>
 8003ec8:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <UART_SetConfig+0x2ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed6:	d017      	beq.n	8003f08 <UART_SetConfig+0x21c>
 8003ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003edc:	d817      	bhi.n	8003f0e <UART_SetConfig+0x222>
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee2:	d00b      	beq.n	8003efc <UART_SetConfig+0x210>
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d811      	bhi.n	8003f0e <UART_SetConfig+0x222>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <UART_SetConfig+0x20a>
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d006      	beq.n	8003f02 <UART_SetConfig+0x216>
 8003ef4:	e00b      	b.n	8003f0e <UART_SetConfig+0x222>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	76fb      	strb	r3, [r7, #27]
 8003efa:	e038      	b.n	8003f6e <UART_SetConfig+0x282>
 8003efc:	2302      	movs	r3, #2
 8003efe:	76fb      	strb	r3, [r7, #27]
 8003f00:	e035      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f02:	2304      	movs	r3, #4
 8003f04:	76fb      	strb	r3, [r7, #27]
 8003f06:	e032      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	76fb      	strb	r3, [r7, #27]
 8003f0c:	e02f      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e02c      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2d      	ldr	r2, [pc, #180]	; (8003fd0 <UART_SetConfig+0x2e4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d125      	bne.n	8003f6a <UART_SetConfig+0x27e>
 8003f1e:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <UART_SetConfig+0x2ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f2c:	d017      	beq.n	8003f5e <UART_SetConfig+0x272>
 8003f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f32:	d817      	bhi.n	8003f64 <UART_SetConfig+0x278>
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d00b      	beq.n	8003f52 <UART_SetConfig+0x266>
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3e:	d811      	bhi.n	8003f64 <UART_SetConfig+0x278>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <UART_SetConfig+0x260>
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d006      	beq.n	8003f58 <UART_SetConfig+0x26c>
 8003f4a:	e00b      	b.n	8003f64 <UART_SetConfig+0x278>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	76fb      	strb	r3, [r7, #27]
 8003f50:	e00d      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f52:	2302      	movs	r3, #2
 8003f54:	76fb      	strb	r3, [r7, #27]
 8003f56:	e00a      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	76fb      	strb	r3, [r7, #27]
 8003f5c:	e007      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	76fb      	strb	r3, [r7, #27]
 8003f62:	e004      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f64:	2310      	movs	r3, #16
 8003f66:	76fb      	strb	r3, [r7, #27]
 8003f68:	e001      	b.n	8003f6e <UART_SetConfig+0x282>
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <UART_SetConfig+0x2e4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	f040 8087 	bne.w	8004088 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f7a:	7efb      	ldrb	r3, [r7, #27]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d837      	bhi.n	8003ff0 <UART_SetConfig+0x304>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0x29c>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003ff1 	.word	0x08003ff1
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003ff1 	.word	0x08003ff1
 8003f98:	08003fbb 	.word	0x08003fbb
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003ff1 	.word	0x08003ff1
 8003fa8:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe fc2c 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	6178      	str	r0, [r7, #20]
        break;
 8003fb2:	e022      	b.n	8003ffa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <UART_SetConfig+0x300>)
 8003fb6:	617b      	str	r3, [r7, #20]
        break;
 8003fb8:	e01f      	b.n	8003ffa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7fe fb8d 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8003fbe:	6178      	str	r0, [r7, #20]
        break;
 8003fc0:	e01b      	b.n	8003ffa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc6:	617b      	str	r3, [r7, #20]
        break;
 8003fc8:	e017      	b.n	8003ffa <UART_SetConfig+0x30e>
 8003fca:	bf00      	nop
 8003fcc:	efff69f3 	.word	0xefff69f3
 8003fd0:	40008000 	.word	0x40008000
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40004800 	.word	0x40004800
 8003fe4:	40004c00 	.word	0x40004c00
 8003fe8:	40005000 	.word	0x40005000
 8003fec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	76bb      	strb	r3, [r7, #26]
        break;
 8003ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80f1 	beq.w	80041e4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	429a      	cmp	r2, r3
 8004010:	d305      	bcc.n	800401e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	429a      	cmp	r2, r3
 800401c:	d902      	bls.n	8004024 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	76bb      	strb	r3, [r7, #26]
 8004022:	e0df      	b.n	80041e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4618      	mov	r0, r3
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	020b      	lsls	r3, r1, #8
 8004036:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800403a:	0202      	lsls	r2, r0, #8
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	6849      	ldr	r1, [r1, #4]
 8004040:	0849      	lsrs	r1, r1, #1
 8004042:	4608      	mov	r0, r1
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	1814      	adds	r4, r2, r0
 800404a:	eb43 0501 	adc.w	r5, r3, r1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	4620      	mov	r0, r4
 800405a:	4629      	mov	r1, r5
 800405c:	f7fc f910 	bl	8000280 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4613      	mov	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406e:	d308      	bcc.n	8004082 <UART_SetConfig+0x396>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004076:	d204      	bcs.n	8004082 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	e0b0      	b.n	80041e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	76bb      	strb	r3, [r7, #26]
 8004086:	e0ad      	b.n	80041e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004090:	d15c      	bne.n	800414c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004092:	7efb      	ldrb	r3, [r7, #27]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d828      	bhi.n	80040ea <UART_SetConfig+0x3fe>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x3b4>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	080040eb 	.word	0x080040eb
 80040b0:	080040db 	.word	0x080040db
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	080040eb 	.word	0x080040eb
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe fba0 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 80040c8:	6178      	str	r0, [r7, #20]
        break;
 80040ca:	e013      	b.n	80040f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fe fbb2 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80040d0:	6178      	str	r0, [r7, #20]
        break;
 80040d2:	e00f      	b.n	80040f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b49      	ldr	r3, [pc, #292]	; (80041fc <UART_SetConfig+0x510>)
 80040d6:	617b      	str	r3, [r7, #20]
        break;
 80040d8:	e00c      	b.n	80040f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe fafd 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 80040de:	6178      	str	r0, [r7, #20]
        break;
 80040e0:	e008      	b.n	80040f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	617b      	str	r3, [r7, #20]
        break;
 80040e8:	e004      	b.n	80040f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	76bb      	strb	r3, [r7, #26]
        break;
 80040f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d074      	beq.n	80041e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005a      	lsls	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	b29b      	uxth	r3, r3
 8004110:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b0f      	cmp	r3, #15
 8004116:	d916      	bls.n	8004146 <UART_SetConfig+0x45a>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411e:	d212      	bcs.n	8004146 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f023 030f 	bic.w	r3, r3, #15
 8004128:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	b29a      	uxth	r2, r3
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	4313      	orrs	r3, r2
 800413a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	89fa      	ldrh	r2, [r7, #14]
 8004142:	60da      	str	r2, [r3, #12]
 8004144:	e04e      	b.n	80041e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	76bb      	strb	r3, [r7, #26]
 800414a:	e04b      	b.n	80041e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d827      	bhi.n	80041a2 <UART_SetConfig+0x4b6>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x46c>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004185 	.word	0x08004185
 8004160:	0800418d 	.word	0x0800418d
 8004164:	080041a3 	.word	0x080041a3
 8004168:	08004193 	.word	0x08004193
 800416c:	080041a3 	.word	0x080041a3
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041a3 	.word	0x080041a3
 8004178:	0800419b 	.word	0x0800419b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fe fb44 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8004180:	6178      	str	r0, [r7, #20]
        break;
 8004182:	e013      	b.n	80041ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7fe fb56 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8004188:	6178      	str	r0, [r7, #20]
        break;
 800418a:	e00f      	b.n	80041ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <UART_SetConfig+0x510>)
 800418e:	617b      	str	r3, [r7, #20]
        break;
 8004190:	e00c      	b.n	80041ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004192:	f7fe faa1 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8004196:	6178      	str	r0, [r7, #20]
        break;
 8004198:	e008      	b.n	80041ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	617b      	str	r3, [r7, #20]
        break;
 80041a0:	e004      	b.n	80041ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	76bb      	strb	r3, [r7, #26]
        break;
 80041aa:	bf00      	nop
    }

    if (pclk != 0U)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	085a      	lsrs	r2, r3, #1
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	441a      	add	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d908      	bls.n	80041e0 <UART_SetConfig+0x4f4>
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d204      	bcs.n	80041e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e001      	b.n	80041e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bdb0      	pop	{r4, r5, r7, pc}
 80041fa:	bf00      	nop
 80041fc:	00f42400 	.word	0x00f42400

08004200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01a      	beq.n	8004316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fe:	d10a      	bne.n	8004316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004354:	f7fd f8c6 	bl	80014e4 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d10e      	bne.n	8004386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f82d 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e023      	b.n	80043ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d10e      	bne.n	80043b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f817 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e00d      	b.n	80043ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e6:	e05e      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d05a      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7fd f878 	bl	80014e4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <UART_WaitOnFlagUntilTimeout+0x30>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d11b      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004414:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e043      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02c      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d124      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004474:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d091      	beq.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <__errno>:
 80044d0:	4b01      	ldr	r3, [pc, #4]	; (80044d8 <__errno+0x8>)
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	2000003c 	.word	0x2000003c

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x38>)
 80044e0:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e2:	1b64      	subs	r4, r4, r5
 80044e4:	10a4      	asrs	r4, r4, #2
 80044e6:	2600      	movs	r6, #0
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	4d0b      	ldr	r5, [pc, #44]	; (800451c <__libc_init_array+0x40>)
 80044ee:	4c0c      	ldr	r4, [pc, #48]	; (8004520 <__libc_init_array+0x44>)
 80044f0:	f001 f9f4 	bl	80058dc <_init>
 80044f4:	1b64      	subs	r4, r4, r5
 80044f6:	10a4      	asrs	r4, r4, #2
 80044f8:	2600      	movs	r6, #0
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	08005e3c 	.word	0x08005e3c
 8004518:	08005e3c 	.word	0x08005e3c
 800451c:	08005e3c 	.word	0x08005e3c
 8004520:	08005e40 	.word	0x08005e40

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <rand>:
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <rand+0x60>)
 8004536:	b510      	push	{r4, lr}
 8004538:	681c      	ldr	r4, [r3, #0]
 800453a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800453c:	b9b3      	cbnz	r3, 800456c <rand+0x38>
 800453e:	2018      	movs	r0, #24
 8004540:	f000 f888 	bl	8004654 <malloc>
 8004544:	63a0      	str	r0, [r4, #56]	; 0x38
 8004546:	b928      	cbnz	r0, 8004554 <rand+0x20>
 8004548:	4602      	mov	r2, r0
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <rand+0x64>)
 800454c:	4813      	ldr	r0, [pc, #76]	; (800459c <rand+0x68>)
 800454e:	214e      	movs	r1, #78	; 0x4e
 8004550:	f000 f850 	bl	80045f4 <__assert_func>
 8004554:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <rand+0x6c>)
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <rand+0x70>)
 8004558:	e9c0 2300 	strd	r2, r3, [r0]
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <rand+0x74>)
 800455e:	6083      	str	r3, [r0, #8]
 8004560:	230b      	movs	r3, #11
 8004562:	8183      	strh	r3, [r0, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	2300      	movs	r3, #0
 8004568:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800456c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800456e:	480f      	ldr	r0, [pc, #60]	; (80045ac <rand+0x78>)
 8004570:	690a      	ldr	r2, [r1, #16]
 8004572:	694b      	ldr	r3, [r1, #20]
 8004574:	4c0e      	ldr	r4, [pc, #56]	; (80045b0 <rand+0x7c>)
 8004576:	4350      	muls	r0, r2
 8004578:	fb04 0003 	mla	r0, r4, r3, r0
 800457c:	fba2 3404 	umull	r3, r4, r2, r4
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	4404      	add	r4, r0
 8004584:	f144 0000 	adc.w	r0, r4, #0
 8004588:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800458c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004590:	bd10      	pop	{r4, pc}
 8004592:	bf00      	nop
 8004594:	2000003c 	.word	0x2000003c
 8004598:	08005cec 	.word	0x08005cec
 800459c:	08005d03 	.word	0x08005d03
 80045a0:	abcd330e 	.word	0xabcd330e
 80045a4:	e66d1234 	.word	0xe66d1234
 80045a8:	0005deec 	.word	0x0005deec
 80045ac:	5851f42d 	.word	0x5851f42d
 80045b0:	4c957f2d 	.word	0x4c957f2d

080045b4 <siprintf>:
 80045b4:	b40e      	push	{r1, r2, r3}
 80045b6:	b500      	push	{lr}
 80045b8:	b09c      	sub	sp, #112	; 0x70
 80045ba:	ab1d      	add	r3, sp, #116	; 0x74
 80045bc:	9002      	str	r0, [sp, #8]
 80045be:	9006      	str	r0, [sp, #24]
 80045c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045c4:	4809      	ldr	r0, [pc, #36]	; (80045ec <siprintf+0x38>)
 80045c6:	9107      	str	r1, [sp, #28]
 80045c8:	9104      	str	r1, [sp, #16]
 80045ca:	4909      	ldr	r1, [pc, #36]	; (80045f0 <siprintf+0x3c>)
 80045cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d0:	9105      	str	r1, [sp, #20]
 80045d2:	6800      	ldr	r0, [r0, #0]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	a902      	add	r1, sp, #8
 80045d8:	f000 f94a 	bl	8004870 <_svfiprintf_r>
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	b01c      	add	sp, #112	; 0x70
 80045e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e8:	b003      	add	sp, #12
 80045ea:	4770      	bx	lr
 80045ec:	2000003c 	.word	0x2000003c
 80045f0:	ffff0208 	.word	0xffff0208

080045f4 <__assert_func>:
 80045f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045f6:	4614      	mov	r4, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <__assert_func+0x2c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4605      	mov	r5, r0
 8004600:	68d8      	ldr	r0, [r3, #12]
 8004602:	b14c      	cbz	r4, 8004618 <__assert_func+0x24>
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <__assert_func+0x30>)
 8004606:	9100      	str	r1, [sp, #0]
 8004608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800460c:	4906      	ldr	r1, [pc, #24]	; (8004628 <__assert_func+0x34>)
 800460e:	462b      	mov	r3, r5
 8004610:	f000 f80e 	bl	8004630 <fiprintf>
 8004614:	f000 fdea 	bl	80051ec <abort>
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <__assert_func+0x38>)
 800461a:	461c      	mov	r4, r3
 800461c:	e7f3      	b.n	8004606 <__assert_func+0x12>
 800461e:	bf00      	nop
 8004620:	2000003c 	.word	0x2000003c
 8004624:	08005d62 	.word	0x08005d62
 8004628:	08005d6f 	.word	0x08005d6f
 800462c:	08005d9d 	.word	0x08005d9d

08004630 <fiprintf>:
 8004630:	b40e      	push	{r1, r2, r3}
 8004632:	b503      	push	{r0, r1, lr}
 8004634:	4601      	mov	r1, r0
 8004636:	ab03      	add	r3, sp, #12
 8004638:	4805      	ldr	r0, [pc, #20]	; (8004650 <fiprintf+0x20>)
 800463a:	f853 2b04 	ldr.w	r2, [r3], #4
 800463e:	6800      	ldr	r0, [r0, #0]
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	f000 fa3f 	bl	8004ac4 <_vfiprintf_r>
 8004646:	b002      	add	sp, #8
 8004648:	f85d eb04 	ldr.w	lr, [sp], #4
 800464c:	b003      	add	sp, #12
 800464e:	4770      	bx	lr
 8004650:	2000003c 	.word	0x2000003c

08004654 <malloc>:
 8004654:	4b02      	ldr	r3, [pc, #8]	; (8004660 <malloc+0xc>)
 8004656:	4601      	mov	r1, r0
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	f000 b853 	b.w	8004704 <_malloc_r>
 800465e:	bf00      	nop
 8004660:	2000003c 	.word	0x2000003c

08004664 <_free_r>:
 8004664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004666:	2900      	cmp	r1, #0
 8004668:	d048      	beq.n	80046fc <_free_r+0x98>
 800466a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466e:	9001      	str	r0, [sp, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f1a1 0404 	sub.w	r4, r1, #4
 8004676:	bfb8      	it	lt
 8004678:	18e4      	addlt	r4, r4, r3
 800467a:	f001 f805 	bl	8005688 <__malloc_lock>
 800467e:	4a20      	ldr	r2, [pc, #128]	; (8004700 <_free_r+0x9c>)
 8004680:	9801      	ldr	r0, [sp, #4]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	4615      	mov	r5, r2
 8004686:	b933      	cbnz	r3, 8004696 <_free_r+0x32>
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	6014      	str	r4, [r2, #0]
 800468c:	b003      	add	sp, #12
 800468e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004692:	f000 bfff 	b.w	8005694 <__malloc_unlock>
 8004696:	42a3      	cmp	r3, r4
 8004698:	d90b      	bls.n	80046b2 <_free_r+0x4e>
 800469a:	6821      	ldr	r1, [r4, #0]
 800469c:	1862      	adds	r2, r4, r1
 800469e:	4293      	cmp	r3, r2
 80046a0:	bf04      	itt	eq
 80046a2:	681a      	ldreq	r2, [r3, #0]
 80046a4:	685b      	ldreq	r3, [r3, #4]
 80046a6:	6063      	str	r3, [r4, #4]
 80046a8:	bf04      	itt	eq
 80046aa:	1852      	addeq	r2, r2, r1
 80046ac:	6022      	streq	r2, [r4, #0]
 80046ae:	602c      	str	r4, [r5, #0]
 80046b0:	e7ec      	b.n	800468c <_free_r+0x28>
 80046b2:	461a      	mov	r2, r3
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	b10b      	cbz	r3, 80046bc <_free_r+0x58>
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	d9fa      	bls.n	80046b2 <_free_r+0x4e>
 80046bc:	6811      	ldr	r1, [r2, #0]
 80046be:	1855      	adds	r5, r2, r1
 80046c0:	42a5      	cmp	r5, r4
 80046c2:	d10b      	bne.n	80046dc <_free_r+0x78>
 80046c4:	6824      	ldr	r4, [r4, #0]
 80046c6:	4421      	add	r1, r4
 80046c8:	1854      	adds	r4, r2, r1
 80046ca:	42a3      	cmp	r3, r4
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	d1dd      	bne.n	800468c <_free_r+0x28>
 80046d0:	681c      	ldr	r4, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	6053      	str	r3, [r2, #4]
 80046d6:	4421      	add	r1, r4
 80046d8:	6011      	str	r1, [r2, #0]
 80046da:	e7d7      	b.n	800468c <_free_r+0x28>
 80046dc:	d902      	bls.n	80046e4 <_free_r+0x80>
 80046de:	230c      	movs	r3, #12
 80046e0:	6003      	str	r3, [r0, #0]
 80046e2:	e7d3      	b.n	800468c <_free_r+0x28>
 80046e4:	6825      	ldr	r5, [r4, #0]
 80046e6:	1961      	adds	r1, r4, r5
 80046e8:	428b      	cmp	r3, r1
 80046ea:	bf04      	itt	eq
 80046ec:	6819      	ldreq	r1, [r3, #0]
 80046ee:	685b      	ldreq	r3, [r3, #4]
 80046f0:	6063      	str	r3, [r4, #4]
 80046f2:	bf04      	itt	eq
 80046f4:	1949      	addeq	r1, r1, r5
 80046f6:	6021      	streq	r1, [r4, #0]
 80046f8:	6054      	str	r4, [r2, #4]
 80046fa:	e7c7      	b.n	800468c <_free_r+0x28>
 80046fc:	b003      	add	sp, #12
 80046fe:	bd30      	pop	{r4, r5, pc}
 8004700:	200000d4 	.word	0x200000d4

08004704 <_malloc_r>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	1ccd      	adds	r5, r1, #3
 8004708:	f025 0503 	bic.w	r5, r5, #3
 800470c:	3508      	adds	r5, #8
 800470e:	2d0c      	cmp	r5, #12
 8004710:	bf38      	it	cc
 8004712:	250c      	movcc	r5, #12
 8004714:	2d00      	cmp	r5, #0
 8004716:	4606      	mov	r6, r0
 8004718:	db01      	blt.n	800471e <_malloc_r+0x1a>
 800471a:	42a9      	cmp	r1, r5
 800471c:	d903      	bls.n	8004726 <_malloc_r+0x22>
 800471e:	230c      	movs	r3, #12
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	2000      	movs	r0, #0
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004726:	f000 ffaf 	bl	8005688 <__malloc_lock>
 800472a:	4921      	ldr	r1, [pc, #132]	; (80047b0 <_malloc_r+0xac>)
 800472c:	680a      	ldr	r2, [r1, #0]
 800472e:	4614      	mov	r4, r2
 8004730:	b99c      	cbnz	r4, 800475a <_malloc_r+0x56>
 8004732:	4f20      	ldr	r7, [pc, #128]	; (80047b4 <_malloc_r+0xb0>)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b923      	cbnz	r3, 8004742 <_malloc_r+0x3e>
 8004738:	4621      	mov	r1, r4
 800473a:	4630      	mov	r0, r6
 800473c:	f000 fc86 	bl	800504c <_sbrk_r>
 8004740:	6038      	str	r0, [r7, #0]
 8004742:	4629      	mov	r1, r5
 8004744:	4630      	mov	r0, r6
 8004746:	f000 fc81 	bl	800504c <_sbrk_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d123      	bne.n	8004796 <_malloc_r+0x92>
 800474e:	230c      	movs	r3, #12
 8004750:	6033      	str	r3, [r6, #0]
 8004752:	4630      	mov	r0, r6
 8004754:	f000 ff9e 	bl	8005694 <__malloc_unlock>
 8004758:	e7e3      	b.n	8004722 <_malloc_r+0x1e>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	1b5b      	subs	r3, r3, r5
 800475e:	d417      	bmi.n	8004790 <_malloc_r+0x8c>
 8004760:	2b0b      	cmp	r3, #11
 8004762:	d903      	bls.n	800476c <_malloc_r+0x68>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	441c      	add	r4, r3
 8004768:	6025      	str	r5, [r4, #0]
 800476a:	e004      	b.n	8004776 <_malloc_r+0x72>
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	42a2      	cmp	r2, r4
 8004770:	bf0c      	ite	eq
 8004772:	600b      	streq	r3, [r1, #0]
 8004774:	6053      	strne	r3, [r2, #4]
 8004776:	4630      	mov	r0, r6
 8004778:	f000 ff8c 	bl	8005694 <__malloc_unlock>
 800477c:	f104 000b 	add.w	r0, r4, #11
 8004780:	1d23      	adds	r3, r4, #4
 8004782:	f020 0007 	bic.w	r0, r0, #7
 8004786:	1ac2      	subs	r2, r0, r3
 8004788:	d0cc      	beq.n	8004724 <_malloc_r+0x20>
 800478a:	1a1b      	subs	r3, r3, r0
 800478c:	50a3      	str	r3, [r4, r2]
 800478e:	e7c9      	b.n	8004724 <_malloc_r+0x20>
 8004790:	4622      	mov	r2, r4
 8004792:	6864      	ldr	r4, [r4, #4]
 8004794:	e7cc      	b.n	8004730 <_malloc_r+0x2c>
 8004796:	1cc4      	adds	r4, r0, #3
 8004798:	f024 0403 	bic.w	r4, r4, #3
 800479c:	42a0      	cmp	r0, r4
 800479e:	d0e3      	beq.n	8004768 <_malloc_r+0x64>
 80047a0:	1a21      	subs	r1, r4, r0
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 fc52 	bl	800504c <_sbrk_r>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d1dd      	bne.n	8004768 <_malloc_r+0x64>
 80047ac:	e7cf      	b.n	800474e <_malloc_r+0x4a>
 80047ae:	bf00      	nop
 80047b0:	200000d4 	.word	0x200000d4
 80047b4:	200000d8 	.word	0x200000d8

080047b8 <__ssputs_r>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	688e      	ldr	r6, [r1, #8]
 80047be:	429e      	cmp	r6, r3
 80047c0:	4682      	mov	sl, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	4690      	mov	r8, r2
 80047c6:	461f      	mov	r7, r3
 80047c8:	d838      	bhi.n	800483c <__ssputs_r+0x84>
 80047ca:	898a      	ldrh	r2, [r1, #12]
 80047cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047d0:	d032      	beq.n	8004838 <__ssputs_r+0x80>
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	6909      	ldr	r1, [r1, #16]
 80047d6:	eba5 0901 	sub.w	r9, r5, r1
 80047da:	6965      	ldr	r5, [r4, #20]
 80047dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047e4:	3301      	adds	r3, #1
 80047e6:	444b      	add	r3, r9
 80047e8:	106d      	asrs	r5, r5, #1
 80047ea:	429d      	cmp	r5, r3
 80047ec:	bf38      	it	cc
 80047ee:	461d      	movcc	r5, r3
 80047f0:	0553      	lsls	r3, r2, #21
 80047f2:	d531      	bpl.n	8004858 <__ssputs_r+0xa0>
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7ff ff85 	bl	8004704 <_malloc_r>
 80047fa:	4606      	mov	r6, r0
 80047fc:	b950      	cbnz	r0, 8004814 <__ssputs_r+0x5c>
 80047fe:	230c      	movs	r3, #12
 8004800:	f8ca 3000 	str.w	r3, [sl]
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004814:	6921      	ldr	r1, [r4, #16]
 8004816:	464a      	mov	r2, r9
 8004818:	f000 ff0e 	bl	8005638 <memcpy>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	6126      	str	r6, [r4, #16]
 800482a:	6165      	str	r5, [r4, #20]
 800482c:	444e      	add	r6, r9
 800482e:	eba5 0509 	sub.w	r5, r5, r9
 8004832:	6026      	str	r6, [r4, #0]
 8004834:	60a5      	str	r5, [r4, #8]
 8004836:	463e      	mov	r6, r7
 8004838:	42be      	cmp	r6, r7
 800483a:	d900      	bls.n	800483e <__ssputs_r+0x86>
 800483c:	463e      	mov	r6, r7
 800483e:	4632      	mov	r2, r6
 8004840:	6820      	ldr	r0, [r4, #0]
 8004842:	4641      	mov	r1, r8
 8004844:	f000 ff06 	bl	8005654 <memmove>
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	1b9b      	subs	r3, r3, r6
 800484e:	4432      	add	r2, r6
 8004850:	60a3      	str	r3, [r4, #8]
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	2000      	movs	r0, #0
 8004856:	e7db      	b.n	8004810 <__ssputs_r+0x58>
 8004858:	462a      	mov	r2, r5
 800485a:	f000 ff21 	bl	80056a0 <_realloc_r>
 800485e:	4606      	mov	r6, r0
 8004860:	2800      	cmp	r0, #0
 8004862:	d1e1      	bne.n	8004828 <__ssputs_r+0x70>
 8004864:	6921      	ldr	r1, [r4, #16]
 8004866:	4650      	mov	r0, sl
 8004868:	f7ff fefc 	bl	8004664 <_free_r>
 800486c:	e7c7      	b.n	80047fe <__ssputs_r+0x46>
	...

08004870 <_svfiprintf_r>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	4698      	mov	r8, r3
 8004876:	898b      	ldrh	r3, [r1, #12]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	b09d      	sub	sp, #116	; 0x74
 800487c:	4607      	mov	r7, r0
 800487e:	460d      	mov	r5, r1
 8004880:	4614      	mov	r4, r2
 8004882:	d50e      	bpl.n	80048a2 <_svfiprintf_r+0x32>
 8004884:	690b      	ldr	r3, [r1, #16]
 8004886:	b963      	cbnz	r3, 80048a2 <_svfiprintf_r+0x32>
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	f7ff ff3b 	bl	8004704 <_malloc_r>
 800488e:	6028      	str	r0, [r5, #0]
 8004890:	6128      	str	r0, [r5, #16]
 8004892:	b920      	cbnz	r0, 800489e <_svfiprintf_r+0x2e>
 8004894:	230c      	movs	r3, #12
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e0d1      	b.n	8004a42 <_svfiprintf_r+0x1d2>
 800489e:	2340      	movs	r3, #64	; 0x40
 80048a0:	616b      	str	r3, [r5, #20]
 80048a2:	2300      	movs	r3, #0
 80048a4:	9309      	str	r3, [sp, #36]	; 0x24
 80048a6:	2320      	movs	r3, #32
 80048a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80048b0:	2330      	movs	r3, #48	; 0x30
 80048b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a5c <_svfiprintf_r+0x1ec>
 80048b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ba:	f04f 0901 	mov.w	r9, #1
 80048be:	4623      	mov	r3, r4
 80048c0:	469a      	mov	sl, r3
 80048c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c6:	b10a      	cbz	r2, 80048cc <_svfiprintf_r+0x5c>
 80048c8:	2a25      	cmp	r2, #37	; 0x25
 80048ca:	d1f9      	bne.n	80048c0 <_svfiprintf_r+0x50>
 80048cc:	ebba 0b04 	subs.w	fp, sl, r4
 80048d0:	d00b      	beq.n	80048ea <_svfiprintf_r+0x7a>
 80048d2:	465b      	mov	r3, fp
 80048d4:	4622      	mov	r2, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	4638      	mov	r0, r7
 80048da:	f7ff ff6d 	bl	80047b8 <__ssputs_r>
 80048de:	3001      	adds	r0, #1
 80048e0:	f000 80aa 	beq.w	8004a38 <_svfiprintf_r+0x1c8>
 80048e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e6:	445a      	add	r2, fp
 80048e8:	9209      	str	r2, [sp, #36]	; 0x24
 80048ea:	f89a 3000 	ldrb.w	r3, [sl]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80a2 	beq.w	8004a38 <_svfiprintf_r+0x1c8>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048fe:	f10a 0a01 	add.w	sl, sl, #1
 8004902:	9304      	str	r3, [sp, #16]
 8004904:	9307      	str	r3, [sp, #28]
 8004906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800490a:	931a      	str	r3, [sp, #104]	; 0x68
 800490c:	4654      	mov	r4, sl
 800490e:	2205      	movs	r2, #5
 8004910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004914:	4851      	ldr	r0, [pc, #324]	; (8004a5c <_svfiprintf_r+0x1ec>)
 8004916:	f7fb fc63 	bl	80001e0 <memchr>
 800491a:	9a04      	ldr	r2, [sp, #16]
 800491c:	b9d8      	cbnz	r0, 8004956 <_svfiprintf_r+0xe6>
 800491e:	06d0      	lsls	r0, r2, #27
 8004920:	bf44      	itt	mi
 8004922:	2320      	movmi	r3, #32
 8004924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004928:	0711      	lsls	r1, r2, #28
 800492a:	bf44      	itt	mi
 800492c:	232b      	movmi	r3, #43	; 0x2b
 800492e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004932:	f89a 3000 	ldrb.w	r3, [sl]
 8004936:	2b2a      	cmp	r3, #42	; 0x2a
 8004938:	d015      	beq.n	8004966 <_svfiprintf_r+0xf6>
 800493a:	9a07      	ldr	r2, [sp, #28]
 800493c:	4654      	mov	r4, sl
 800493e:	2000      	movs	r0, #0
 8004940:	f04f 0c0a 	mov.w	ip, #10
 8004944:	4621      	mov	r1, r4
 8004946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800494a:	3b30      	subs	r3, #48	; 0x30
 800494c:	2b09      	cmp	r3, #9
 800494e:	d94e      	bls.n	80049ee <_svfiprintf_r+0x17e>
 8004950:	b1b0      	cbz	r0, 8004980 <_svfiprintf_r+0x110>
 8004952:	9207      	str	r2, [sp, #28]
 8004954:	e014      	b.n	8004980 <_svfiprintf_r+0x110>
 8004956:	eba0 0308 	sub.w	r3, r0, r8
 800495a:	fa09 f303 	lsl.w	r3, r9, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	9304      	str	r3, [sp, #16]
 8004962:	46a2      	mov	sl, r4
 8004964:	e7d2      	b.n	800490c <_svfiprintf_r+0x9c>
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	1d19      	adds	r1, r3, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	9103      	str	r1, [sp, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfbb      	ittet	lt
 8004972:	425b      	neglt	r3, r3
 8004974:	f042 0202 	orrlt.w	r2, r2, #2
 8004978:	9307      	strge	r3, [sp, #28]
 800497a:	9307      	strlt	r3, [sp, #28]
 800497c:	bfb8      	it	lt
 800497e:	9204      	strlt	r2, [sp, #16]
 8004980:	7823      	ldrb	r3, [r4, #0]
 8004982:	2b2e      	cmp	r3, #46	; 0x2e
 8004984:	d10c      	bne.n	80049a0 <_svfiprintf_r+0x130>
 8004986:	7863      	ldrb	r3, [r4, #1]
 8004988:	2b2a      	cmp	r3, #42	; 0x2a
 800498a:	d135      	bne.n	80049f8 <_svfiprintf_r+0x188>
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	1d1a      	adds	r2, r3, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	9203      	str	r2, [sp, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	bfb8      	it	lt
 8004998:	f04f 33ff 	movlt.w	r3, #4294967295
 800499c:	3402      	adds	r4, #2
 800499e:	9305      	str	r3, [sp, #20]
 80049a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a6c <_svfiprintf_r+0x1fc>
 80049a4:	7821      	ldrb	r1, [r4, #0]
 80049a6:	2203      	movs	r2, #3
 80049a8:	4650      	mov	r0, sl
 80049aa:	f7fb fc19 	bl	80001e0 <memchr>
 80049ae:	b140      	cbz	r0, 80049c2 <_svfiprintf_r+0x152>
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	eba0 000a 	sub.w	r0, r0, sl
 80049b6:	fa03 f000 	lsl.w	r0, r3, r0
 80049ba:	9b04      	ldr	r3, [sp, #16]
 80049bc:	4303      	orrs	r3, r0
 80049be:	3401      	adds	r4, #1
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c6:	4826      	ldr	r0, [pc, #152]	; (8004a60 <_svfiprintf_r+0x1f0>)
 80049c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049cc:	2206      	movs	r2, #6
 80049ce:	f7fb fc07 	bl	80001e0 <memchr>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d038      	beq.n	8004a48 <_svfiprintf_r+0x1d8>
 80049d6:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <_svfiprintf_r+0x1f4>)
 80049d8:	bb1b      	cbnz	r3, 8004a22 <_svfiprintf_r+0x1b2>
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	3307      	adds	r3, #7
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	3308      	adds	r3, #8
 80049e4:	9303      	str	r3, [sp, #12]
 80049e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e8:	4433      	add	r3, r6
 80049ea:	9309      	str	r3, [sp, #36]	; 0x24
 80049ec:	e767      	b.n	80048be <_svfiprintf_r+0x4e>
 80049ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f2:	460c      	mov	r4, r1
 80049f4:	2001      	movs	r0, #1
 80049f6:	e7a5      	b.n	8004944 <_svfiprintf_r+0xd4>
 80049f8:	2300      	movs	r3, #0
 80049fa:	3401      	adds	r4, #1
 80049fc:	9305      	str	r3, [sp, #20]
 80049fe:	4619      	mov	r1, r3
 8004a00:	f04f 0c0a 	mov.w	ip, #10
 8004a04:	4620      	mov	r0, r4
 8004a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a0a:	3a30      	subs	r2, #48	; 0x30
 8004a0c:	2a09      	cmp	r2, #9
 8004a0e:	d903      	bls.n	8004a18 <_svfiprintf_r+0x1a8>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0c5      	beq.n	80049a0 <_svfiprintf_r+0x130>
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	e7c3      	b.n	80049a0 <_svfiprintf_r+0x130>
 8004a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e7f0      	b.n	8004a04 <_svfiprintf_r+0x194>
 8004a22:	ab03      	add	r3, sp, #12
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	462a      	mov	r2, r5
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <_svfiprintf_r+0x1f8>)
 8004a2a:	a904      	add	r1, sp, #16
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f3af 8000 	nop.w
 8004a32:	1c42      	adds	r2, r0, #1
 8004a34:	4606      	mov	r6, r0
 8004a36:	d1d6      	bne.n	80049e6 <_svfiprintf_r+0x176>
 8004a38:	89ab      	ldrh	r3, [r5, #12]
 8004a3a:	065b      	lsls	r3, r3, #25
 8004a3c:	f53f af2c 	bmi.w	8004898 <_svfiprintf_r+0x28>
 8004a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a42:	b01d      	add	sp, #116	; 0x74
 8004a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a48:	ab03      	add	r3, sp, #12
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <_svfiprintf_r+0x1f8>)
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	4638      	mov	r0, r7
 8004a54:	f000 f9d4 	bl	8004e00 <_printf_i>
 8004a58:	e7eb      	b.n	8004a32 <_svfiprintf_r+0x1c2>
 8004a5a:	bf00      	nop
 8004a5c:	08005d9e 	.word	0x08005d9e
 8004a60:	08005da8 	.word	0x08005da8
 8004a64:	00000000 	.word	0x00000000
 8004a68:	080047b9 	.word	0x080047b9
 8004a6c:	08005da4 	.word	0x08005da4

08004a70 <__sfputc_r>:
 8004a70:	6893      	ldr	r3, [r2, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	b410      	push	{r4}
 8004a78:	6093      	str	r3, [r2, #8]
 8004a7a:	da08      	bge.n	8004a8e <__sfputc_r+0x1e>
 8004a7c:	6994      	ldr	r4, [r2, #24]
 8004a7e:	42a3      	cmp	r3, r4
 8004a80:	db01      	blt.n	8004a86 <__sfputc_r+0x16>
 8004a82:	290a      	cmp	r1, #10
 8004a84:	d103      	bne.n	8004a8e <__sfputc_r+0x1e>
 8004a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a8a:	f000 baef 	b.w	800506c <__swbuf_r>
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	1c58      	adds	r0, r3, #1
 8004a92:	6010      	str	r0, [r2, #0]
 8004a94:	7019      	strb	r1, [r3, #0]
 8004a96:	4608      	mov	r0, r1
 8004a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <__sfputs_r>:
 8004a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	460f      	mov	r7, r1
 8004aa4:	4614      	mov	r4, r2
 8004aa6:	18d5      	adds	r5, r2, r3
 8004aa8:	42ac      	cmp	r4, r5
 8004aaa:	d101      	bne.n	8004ab0 <__sfputs_r+0x12>
 8004aac:	2000      	movs	r0, #0
 8004aae:	e007      	b.n	8004ac0 <__sfputs_r+0x22>
 8004ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab4:	463a      	mov	r2, r7
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7ff ffda 	bl	8004a70 <__sfputc_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d1f3      	bne.n	8004aa8 <__sfputs_r+0xa>
 8004ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ac4 <_vfiprintf_r>:
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	460d      	mov	r5, r1
 8004aca:	b09d      	sub	sp, #116	; 0x74
 8004acc:	4614      	mov	r4, r2
 8004ace:	4698      	mov	r8, r3
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	b118      	cbz	r0, 8004adc <_vfiprintf_r+0x18>
 8004ad4:	6983      	ldr	r3, [r0, #24]
 8004ad6:	b90b      	cbnz	r3, 8004adc <_vfiprintf_r+0x18>
 8004ad8:	f000 fcaa 	bl	8005430 <__sinit>
 8004adc:	4b89      	ldr	r3, [pc, #548]	; (8004d04 <_vfiprintf_r+0x240>)
 8004ade:	429d      	cmp	r5, r3
 8004ae0:	d11b      	bne.n	8004b1a <_vfiprintf_r+0x56>
 8004ae2:	6875      	ldr	r5, [r6, #4]
 8004ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ae6:	07d9      	lsls	r1, r3, #31
 8004ae8:	d405      	bmi.n	8004af6 <_vfiprintf_r+0x32>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d402      	bmi.n	8004af6 <_vfiprintf_r+0x32>
 8004af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af2:	f000 fd3b 	bl	800556c <__retarget_lock_acquire_recursive>
 8004af6:	89ab      	ldrh	r3, [r5, #12]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	d501      	bpl.n	8004b00 <_vfiprintf_r+0x3c>
 8004afc:	692b      	ldr	r3, [r5, #16]
 8004afe:	b9eb      	cbnz	r3, 8004b3c <_vfiprintf_r+0x78>
 8004b00:	4629      	mov	r1, r5
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 fb04 	bl	8005110 <__swsetup_r>
 8004b08:	b1c0      	cbz	r0, 8004b3c <_vfiprintf_r+0x78>
 8004b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b0c:	07dc      	lsls	r4, r3, #31
 8004b0e:	d50e      	bpl.n	8004b2e <_vfiprintf_r+0x6a>
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	b01d      	add	sp, #116	; 0x74
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	; (8004d08 <_vfiprintf_r+0x244>)
 8004b1c:	429d      	cmp	r5, r3
 8004b1e:	d101      	bne.n	8004b24 <_vfiprintf_r+0x60>
 8004b20:	68b5      	ldr	r5, [r6, #8]
 8004b22:	e7df      	b.n	8004ae4 <_vfiprintf_r+0x20>
 8004b24:	4b79      	ldr	r3, [pc, #484]	; (8004d0c <_vfiprintf_r+0x248>)
 8004b26:	429d      	cmp	r5, r3
 8004b28:	bf08      	it	eq
 8004b2a:	68f5      	ldreq	r5, [r6, #12]
 8004b2c:	e7da      	b.n	8004ae4 <_vfiprintf_r+0x20>
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	0598      	lsls	r0, r3, #22
 8004b32:	d4ed      	bmi.n	8004b10 <_vfiprintf_r+0x4c>
 8004b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b36:	f000 fd1a 	bl	800556e <__retarget_lock_release_recursive>
 8004b3a:	e7e9      	b.n	8004b10 <_vfiprintf_r+0x4c>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b40:	2320      	movs	r3, #32
 8004b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4a:	2330      	movs	r3, #48	; 0x30
 8004b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d10 <_vfiprintf_r+0x24c>
 8004b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b54:	f04f 0901 	mov.w	r9, #1
 8004b58:	4623      	mov	r3, r4
 8004b5a:	469a      	mov	sl, r3
 8004b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b60:	b10a      	cbz	r2, 8004b66 <_vfiprintf_r+0xa2>
 8004b62:	2a25      	cmp	r2, #37	; 0x25
 8004b64:	d1f9      	bne.n	8004b5a <_vfiprintf_r+0x96>
 8004b66:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6a:	d00b      	beq.n	8004b84 <_vfiprintf_r+0xc0>
 8004b6c:	465b      	mov	r3, fp
 8004b6e:	4622      	mov	r2, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff ff93 	bl	8004a9e <__sfputs_r>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f000 80aa 	beq.w	8004cd2 <_vfiprintf_r+0x20e>
 8004b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b80:	445a      	add	r2, fp
 8004b82:	9209      	str	r2, [sp, #36]	; 0x24
 8004b84:	f89a 3000 	ldrb.w	r3, [sl]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a2 	beq.w	8004cd2 <_vfiprintf_r+0x20e>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b98:	f10a 0a01 	add.w	sl, sl, #1
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	9307      	str	r3, [sp, #28]
 8004ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba6:	4654      	mov	r4, sl
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bae:	4858      	ldr	r0, [pc, #352]	; (8004d10 <_vfiprintf_r+0x24c>)
 8004bb0:	f7fb fb16 	bl	80001e0 <memchr>
 8004bb4:	9a04      	ldr	r2, [sp, #16]
 8004bb6:	b9d8      	cbnz	r0, 8004bf0 <_vfiprintf_r+0x12c>
 8004bb8:	06d1      	lsls	r1, r2, #27
 8004bba:	bf44      	itt	mi
 8004bbc:	2320      	movmi	r3, #32
 8004bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc2:	0713      	lsls	r3, r2, #28
 8004bc4:	bf44      	itt	mi
 8004bc6:	232b      	movmi	r3, #43	; 0x2b
 8004bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd2:	d015      	beq.n	8004c00 <_vfiprintf_r+0x13c>
 8004bd4:	9a07      	ldr	r2, [sp, #28]
 8004bd6:	4654      	mov	r4, sl
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f04f 0c0a 	mov.w	ip, #10
 8004bde:	4621      	mov	r1, r4
 8004be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be4:	3b30      	subs	r3, #48	; 0x30
 8004be6:	2b09      	cmp	r3, #9
 8004be8:	d94e      	bls.n	8004c88 <_vfiprintf_r+0x1c4>
 8004bea:	b1b0      	cbz	r0, 8004c1a <_vfiprintf_r+0x156>
 8004bec:	9207      	str	r2, [sp, #28]
 8004bee:	e014      	b.n	8004c1a <_vfiprintf_r+0x156>
 8004bf0:	eba0 0308 	sub.w	r3, r0, r8
 8004bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	9304      	str	r3, [sp, #16]
 8004bfc:	46a2      	mov	sl, r4
 8004bfe:	e7d2      	b.n	8004ba6 <_vfiprintf_r+0xe2>
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	1d19      	adds	r1, r3, #4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	9103      	str	r1, [sp, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bfbb      	ittet	lt
 8004c0c:	425b      	neglt	r3, r3
 8004c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c12:	9307      	strge	r3, [sp, #28]
 8004c14:	9307      	strlt	r3, [sp, #28]
 8004c16:	bfb8      	it	lt
 8004c18:	9204      	strlt	r2, [sp, #16]
 8004c1a:	7823      	ldrb	r3, [r4, #0]
 8004c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c1e:	d10c      	bne.n	8004c3a <_vfiprintf_r+0x176>
 8004c20:	7863      	ldrb	r3, [r4, #1]
 8004c22:	2b2a      	cmp	r3, #42	; 0x2a
 8004c24:	d135      	bne.n	8004c92 <_vfiprintf_r+0x1ce>
 8004c26:	9b03      	ldr	r3, [sp, #12]
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	9203      	str	r2, [sp, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb8      	it	lt
 8004c32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c36:	3402      	adds	r4, #2
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d20 <_vfiprintf_r+0x25c>
 8004c3e:	7821      	ldrb	r1, [r4, #0]
 8004c40:	2203      	movs	r2, #3
 8004c42:	4650      	mov	r0, sl
 8004c44:	f7fb facc 	bl	80001e0 <memchr>
 8004c48:	b140      	cbz	r0, 8004c5c <_vfiprintf_r+0x198>
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	eba0 000a 	sub.w	r0, r0, sl
 8004c50:	fa03 f000 	lsl.w	r0, r3, r0
 8004c54:	9b04      	ldr	r3, [sp, #16]
 8004c56:	4303      	orrs	r3, r0
 8004c58:	3401      	adds	r4, #1
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c60:	482c      	ldr	r0, [pc, #176]	; (8004d14 <_vfiprintf_r+0x250>)
 8004c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c66:	2206      	movs	r2, #6
 8004c68:	f7fb faba 	bl	80001e0 <memchr>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d03f      	beq.n	8004cf0 <_vfiprintf_r+0x22c>
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <_vfiprintf_r+0x254>)
 8004c72:	bb1b      	cbnz	r3, 8004cbc <_vfiprintf_r+0x1f8>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	3307      	adds	r3, #7
 8004c78:	f023 0307 	bic.w	r3, r3, #7
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	9303      	str	r3, [sp, #12]
 8004c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c82:	443b      	add	r3, r7
 8004c84:	9309      	str	r3, [sp, #36]	; 0x24
 8004c86:	e767      	b.n	8004b58 <_vfiprintf_r+0x94>
 8004c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	2001      	movs	r0, #1
 8004c90:	e7a5      	b.n	8004bde <_vfiprintf_r+0x11a>
 8004c92:	2300      	movs	r3, #0
 8004c94:	3401      	adds	r4, #1
 8004c96:	9305      	str	r3, [sp, #20]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f04f 0c0a 	mov.w	ip, #10
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca4:	3a30      	subs	r2, #48	; 0x30
 8004ca6:	2a09      	cmp	r2, #9
 8004ca8:	d903      	bls.n	8004cb2 <_vfiprintf_r+0x1ee>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0c5      	beq.n	8004c3a <_vfiprintf_r+0x176>
 8004cae:	9105      	str	r1, [sp, #20]
 8004cb0:	e7c3      	b.n	8004c3a <_vfiprintf_r+0x176>
 8004cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e7f0      	b.n	8004c9e <_vfiprintf_r+0x1da>
 8004cbc:	ab03      	add	r3, sp, #12
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	462a      	mov	r2, r5
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <_vfiprintf_r+0x258>)
 8004cc4:	a904      	add	r1, sp, #16
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f3af 8000 	nop.w
 8004ccc:	4607      	mov	r7, r0
 8004cce:	1c78      	adds	r0, r7, #1
 8004cd0:	d1d6      	bne.n	8004c80 <_vfiprintf_r+0x1bc>
 8004cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cd4:	07d9      	lsls	r1, r3, #31
 8004cd6:	d405      	bmi.n	8004ce4 <_vfiprintf_r+0x220>
 8004cd8:	89ab      	ldrh	r3, [r5, #12]
 8004cda:	059a      	lsls	r2, r3, #22
 8004cdc:	d402      	bmi.n	8004ce4 <_vfiprintf_r+0x220>
 8004cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ce0:	f000 fc45 	bl	800556e <__retarget_lock_release_recursive>
 8004ce4:	89ab      	ldrh	r3, [r5, #12]
 8004ce6:	065b      	lsls	r3, r3, #25
 8004ce8:	f53f af12 	bmi.w	8004b10 <_vfiprintf_r+0x4c>
 8004cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cee:	e711      	b.n	8004b14 <_vfiprintf_r+0x50>
 8004cf0:	ab03      	add	r3, sp, #12
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <_vfiprintf_r+0x258>)
 8004cf8:	a904      	add	r1, sp, #16
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f880 	bl	8004e00 <_printf_i>
 8004d00:	e7e4      	b.n	8004ccc <_vfiprintf_r+0x208>
 8004d02:	bf00      	nop
 8004d04:	08005df4 	.word	0x08005df4
 8004d08:	08005e14 	.word	0x08005e14
 8004d0c:	08005dd4 	.word	0x08005dd4
 8004d10:	08005d9e 	.word	0x08005d9e
 8004d14:	08005da8 	.word	0x08005da8
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	08004a9f 	.word	0x08004a9f
 8004d20:	08005da4 	.word	0x08005da4

08004d24 <_printf_common>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4616      	mov	r6, r2
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	688a      	ldr	r2, [r1, #8]
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfb8      	it	lt
 8004d38:	4613      	movlt	r3, r2
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d40:	4607      	mov	r7, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	b10a      	cbz	r2, 8004d4a <_printf_common+0x26>
 8004d46:	3301      	adds	r3, #1
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	6833      	ldrmi	r3, [r6, #0]
 8004d52:	3302      	addmi	r3, #2
 8004d54:	6033      	strmi	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d106      	bne.n	8004d6c <_printf_common+0x48>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc26      	bgt.n	8004dba <_printf_common+0x96>
 8004d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	bf18      	it	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	0692      	lsls	r2, r2, #26
 8004d7a:	d42b      	bmi.n	8004dd4 <_printf_common+0xb0>
 8004d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d01e      	beq.n	8004dc8 <_printf_common+0xa4>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	68e5      	ldr	r5, [r4, #12]
 8004d8e:	6832      	ldr	r2, [r6, #0]
 8004d90:	f003 0306 	and.w	r3, r3, #6
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	bf08      	it	eq
 8004d98:	1aad      	subeq	r5, r5, r2
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	bf0c      	ite	eq
 8004da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da4:	2500      	movne	r5, #0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bfc4      	itt	gt
 8004daa:	1a9b      	subgt	r3, r3, r2
 8004dac:	18ed      	addgt	r5, r5, r3
 8004dae:	2600      	movs	r6, #0
 8004db0:	341a      	adds	r4, #26
 8004db2:	42b5      	cmp	r5, r6
 8004db4:	d11a      	bne.n	8004dec <_printf_common+0xc8>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e008      	b.n	8004dcc <_printf_common+0xa8>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	47c0      	blx	r8
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d103      	bne.n	8004dd0 <_printf_common+0xac>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e7c6      	b.n	8004d62 <_printf_common+0x3e>
 8004dd4:	18e1      	adds	r1, r4, r3
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	2030      	movs	r0, #48	; 0x30
 8004dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dde:	4422      	add	r2, r4
 8004de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de8:	3302      	adds	r3, #2
 8004dea:	e7c7      	b.n	8004d7c <_printf_common+0x58>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4622      	mov	r2, r4
 8004df0:	4649      	mov	r1, r9
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0e6      	beq.n	8004dc8 <_printf_common+0xa4>
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7d9      	b.n	8004db2 <_printf_common+0x8e>
	...

08004e00 <_printf_i>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	460c      	mov	r4, r1
 8004e06:	4691      	mov	r9, r2
 8004e08:	7e27      	ldrb	r7, [r4, #24]
 8004e0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e0c:	2f78      	cmp	r7, #120	; 0x78
 8004e0e:	4680      	mov	r8, r0
 8004e10:	469a      	mov	sl, r3
 8004e12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e16:	d807      	bhi.n	8004e28 <_printf_i+0x28>
 8004e18:	2f62      	cmp	r7, #98	; 0x62
 8004e1a:	d80a      	bhi.n	8004e32 <_printf_i+0x32>
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	f000 80d8 	beq.w	8004fd2 <_printf_i+0x1d2>
 8004e22:	2f58      	cmp	r7, #88	; 0x58
 8004e24:	f000 80a3 	beq.w	8004f6e <_printf_i+0x16e>
 8004e28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e30:	e03a      	b.n	8004ea8 <_printf_i+0xa8>
 8004e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e36:	2b15      	cmp	r3, #21
 8004e38:	d8f6      	bhi.n	8004e28 <_printf_i+0x28>
 8004e3a:	a001      	add	r0, pc, #4	; (adr r0, 8004e40 <_printf_i+0x40>)
 8004e3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004e29 	.word	0x08004e29
 8004e4c:	08004e29 	.word	0x08004e29
 8004e50:	08004e29 	.word	0x08004e29
 8004e54:	08004e29 	.word	0x08004e29
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004e29 	.word	0x08004e29
 8004e60:	08004e29 	.word	0x08004e29
 8004e64:	08004e29 	.word	0x08004e29
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08004fb9 	.word	0x08004fb9
 8004e70:	08004edd 	.word	0x08004edd
 8004e74:	08004f9b 	.word	0x08004f9b
 8004e78:	08004e29 	.word	0x08004e29
 8004e7c:	08004e29 	.word	0x08004e29
 8004e80:	08004fdb 	.word	0x08004fdb
 8004e84:	08004e29 	.word	0x08004e29
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e29 	.word	0x08004e29
 8004e90:	08004e29 	.word	0x08004e29
 8004e94:	08004fa3 	.word	0x08004fa3
 8004e98:	680b      	ldr	r3, [r1, #0]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	600a      	str	r2, [r1, #0]
 8004ea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0a3      	b.n	8004ff4 <_printf_i+0x1f4>
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	6808      	ldr	r0, [r1, #0]
 8004eb0:	062e      	lsls	r6, r5, #24
 8004eb2:	f100 0304 	add.w	r3, r0, #4
 8004eb6:	d50a      	bpl.n	8004ece <_printf_i+0xce>
 8004eb8:	6805      	ldr	r5, [r0, #0]
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xc8>
 8004ec0:	232d      	movs	r3, #45	; 0x2d
 8004ec2:	426d      	negs	r5, r5
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	485e      	ldr	r0, [pc, #376]	; (8005044 <_printf_i+0x244>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e019      	b.n	8004f02 <_printf_i+0x102>
 8004ece:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ed2:	6805      	ldr	r5, [r0, #0]
 8004ed4:	600b      	str	r3, [r1, #0]
 8004ed6:	bf18      	it	ne
 8004ed8:	b22d      	sxthne	r5, r5
 8004eda:	e7ef      	b.n	8004ebc <_printf_i+0xbc>
 8004edc:	680b      	ldr	r3, [r1, #0]
 8004ede:	6825      	ldr	r5, [r4, #0]
 8004ee0:	1d18      	adds	r0, r3, #4
 8004ee2:	6008      	str	r0, [r1, #0]
 8004ee4:	0628      	lsls	r0, r5, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0xec>
 8004ee8:	681d      	ldr	r5, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0xf2>
 8004eec:	0669      	lsls	r1, r5, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0xe8>
 8004ef0:	881d      	ldrh	r5, [r3, #0]
 8004ef2:	4854      	ldr	r0, [pc, #336]	; (8005044 <_printf_i+0x244>)
 8004ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2308      	moveq	r3, #8
 8004efa:	230a      	movne	r3, #10
 8004efc:	2100      	movs	r1, #0
 8004efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f02:	6866      	ldr	r6, [r4, #4]
 8004f04:	60a6      	str	r6, [r4, #8]
 8004f06:	2e00      	cmp	r6, #0
 8004f08:	bfa2      	ittt	ge
 8004f0a:	6821      	ldrge	r1, [r4, #0]
 8004f0c:	f021 0104 	bicge.w	r1, r1, #4
 8004f10:	6021      	strge	r1, [r4, #0]
 8004f12:	b90d      	cbnz	r5, 8004f18 <_printf_i+0x118>
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	d04d      	beq.n	8004fb4 <_printf_i+0x1b4>
 8004f18:	4616      	mov	r6, r2
 8004f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f22:	5dc7      	ldrb	r7, [r0, r7]
 8004f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f28:	462f      	mov	r7, r5
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	d9f4      	bls.n	8004f1a <_printf_i+0x11a>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x14c>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07df      	lsls	r7, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x14c>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f4c:	1b92      	subs	r2, r2, r6
 8004f4e:	6122      	str	r2, [r4, #16]
 8004f50:	f8cd a000 	str.w	sl, [sp]
 8004f54:	464b      	mov	r3, r9
 8004f56:	aa03      	add	r2, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fee2 	bl	8004d24 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d14c      	bne.n	8004ffe <_printf_i+0x1fe>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	4835      	ldr	r0, [pc, #212]	; (8005044 <_printf_i+0x244>)
 8004f70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	680e      	ldr	r6, [r1, #0]
 8004f78:	061f      	lsls	r7, r3, #24
 8004f7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f7e:	600e      	str	r6, [r1, #0]
 8004f80:	d514      	bpl.n	8004fac <_printf_i+0x1ac>
 8004f82:	07d9      	lsls	r1, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b91d      	cbnz	r5, 8004f96 <_printf_i+0x196>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f023 0320 	bic.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2310      	movs	r3, #16
 8004f98:	e7b0      	b.n	8004efc <_printf_i+0xfc>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	2378      	movs	r3, #120	; 0x78
 8004fa4:	4828      	ldr	r0, [pc, #160]	; (8005048 <_printf_i+0x248>)
 8004fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004faa:	e7e3      	b.n	8004f74 <_printf_i+0x174>
 8004fac:	065e      	lsls	r6, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2ad      	uxthmi	r5, r5
 8004fb2:	e7e6      	b.n	8004f82 <_printf_i+0x182>
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	e7bb      	b.n	8004f30 <_printf_i+0x130>
 8004fb8:	680b      	ldr	r3, [r1, #0]
 8004fba:	6826      	ldr	r6, [r4, #0]
 8004fbc:	6960      	ldr	r0, [r4, #20]
 8004fbe:	1d1d      	adds	r5, r3, #4
 8004fc0:	600d      	str	r5, [r1, #0]
 8004fc2:	0635      	lsls	r5, r6, #24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0x1cc>
 8004fc8:	6018      	str	r0, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0x1d2>
 8004fcc:	0671      	lsls	r1, r6, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0x1c8>
 8004fd0:	8018      	strh	r0, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	4616      	mov	r6, r2
 8004fd8:	e7ba      	b.n	8004f50 <_printf_i+0x150>
 8004fda:	680b      	ldr	r3, [r1, #0]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	600a      	str	r2, [r1, #0]
 8004fe0:	681e      	ldr	r6, [r3, #0]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7fb f8fa 	bl	80001e0 <memchr>
 8004fec:	b108      	cbz	r0, 8004ff2 <_printf_i+0x1f2>
 8004fee:	1b80      	subs	r0, r0, r6
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e7a8      	b.n	8004f50 <_printf_i+0x150>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d0ab      	beq.n	8004f64 <_printf_i+0x164>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	079b      	lsls	r3, r3, #30
 8005010:	d413      	bmi.n	800503a <_printf_i+0x23a>
 8005012:	68e0      	ldr	r0, [r4, #12]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	4298      	cmp	r0, r3
 8005018:	bfb8      	it	lt
 800501a:	4618      	movlt	r0, r3
 800501c:	e7a4      	b.n	8004f68 <_printf_i+0x168>
 800501e:	2301      	movs	r3, #1
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d09b      	beq.n	8004f64 <_printf_i+0x164>
 800502c:	3501      	adds	r5, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	9903      	ldr	r1, [sp, #12]
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	42ab      	cmp	r3, r5
 8005036:	dcf2      	bgt.n	800501e <_printf_i+0x21e>
 8005038:	e7eb      	b.n	8005012 <_printf_i+0x212>
 800503a:	2500      	movs	r5, #0
 800503c:	f104 0619 	add.w	r6, r4, #25
 8005040:	e7f5      	b.n	800502e <_printf_i+0x22e>
 8005042:	bf00      	nop
 8005044:	08005daf 	.word	0x08005daf
 8005048:	08005dc0 	.word	0x08005dc0

0800504c <_sbrk_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	; (8005068 <_sbrk_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fc f94a 	bl	80012f0 <_sbrk>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_sbrk_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_sbrk_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	2000028c 	.word	0x2000028c

0800506c <__swbuf_r>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	460e      	mov	r6, r1
 8005070:	4614      	mov	r4, r2
 8005072:	4605      	mov	r5, r0
 8005074:	b118      	cbz	r0, 800507e <__swbuf_r+0x12>
 8005076:	6983      	ldr	r3, [r0, #24]
 8005078:	b90b      	cbnz	r3, 800507e <__swbuf_r+0x12>
 800507a:	f000 f9d9 	bl	8005430 <__sinit>
 800507e:	4b21      	ldr	r3, [pc, #132]	; (8005104 <__swbuf_r+0x98>)
 8005080:	429c      	cmp	r4, r3
 8005082:	d12b      	bne.n	80050dc <__swbuf_r+0x70>
 8005084:	686c      	ldr	r4, [r5, #4]
 8005086:	69a3      	ldr	r3, [r4, #24]
 8005088:	60a3      	str	r3, [r4, #8]
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	071a      	lsls	r2, r3, #28
 800508e:	d52f      	bpl.n	80050f0 <__swbuf_r+0x84>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	b36b      	cbz	r3, 80050f0 <__swbuf_r+0x84>
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	6963      	ldr	r3, [r4, #20]
 800509c:	b2f6      	uxtb	r6, r6
 800509e:	4283      	cmp	r3, r0
 80050a0:	4637      	mov	r7, r6
 80050a2:	dc04      	bgt.n	80050ae <__swbuf_r+0x42>
 80050a4:	4621      	mov	r1, r4
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 f92e 	bl	8005308 <_fflush_r>
 80050ac:	bb30      	cbnz	r0, 80050fc <__swbuf_r+0x90>
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	60a3      	str	r3, [r4, #8]
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	6022      	str	r2, [r4, #0]
 80050ba:	701e      	strb	r6, [r3, #0]
 80050bc:	6963      	ldr	r3, [r4, #20]
 80050be:	3001      	adds	r0, #1
 80050c0:	4283      	cmp	r3, r0
 80050c2:	d004      	beq.n	80050ce <__swbuf_r+0x62>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	07db      	lsls	r3, r3, #31
 80050c8:	d506      	bpl.n	80050d8 <__swbuf_r+0x6c>
 80050ca:	2e0a      	cmp	r6, #10
 80050cc:	d104      	bne.n	80050d8 <__swbuf_r+0x6c>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 f919 	bl	8005308 <_fflush_r>
 80050d6:	b988      	cbnz	r0, 80050fc <__swbuf_r+0x90>
 80050d8:	4638      	mov	r0, r7
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <__swbuf_r+0x9c>)
 80050de:	429c      	cmp	r4, r3
 80050e0:	d101      	bne.n	80050e6 <__swbuf_r+0x7a>
 80050e2:	68ac      	ldr	r4, [r5, #8]
 80050e4:	e7cf      	b.n	8005086 <__swbuf_r+0x1a>
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <__swbuf_r+0xa0>)
 80050e8:	429c      	cmp	r4, r3
 80050ea:	bf08      	it	eq
 80050ec:	68ec      	ldreq	r4, [r5, #12]
 80050ee:	e7ca      	b.n	8005086 <__swbuf_r+0x1a>
 80050f0:	4621      	mov	r1, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f80c 	bl	8005110 <__swsetup_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d0cb      	beq.n	8005094 <__swbuf_r+0x28>
 80050fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005100:	e7ea      	b.n	80050d8 <__swbuf_r+0x6c>
 8005102:	bf00      	nop
 8005104:	08005df4 	.word	0x08005df4
 8005108:	08005e14 	.word	0x08005e14
 800510c:	08005dd4 	.word	0x08005dd4

08005110 <__swsetup_r>:
 8005110:	4b32      	ldr	r3, [pc, #200]	; (80051dc <__swsetup_r+0xcc>)
 8005112:	b570      	push	{r4, r5, r6, lr}
 8005114:	681d      	ldr	r5, [r3, #0]
 8005116:	4606      	mov	r6, r0
 8005118:	460c      	mov	r4, r1
 800511a:	b125      	cbz	r5, 8005126 <__swsetup_r+0x16>
 800511c:	69ab      	ldr	r3, [r5, #24]
 800511e:	b913      	cbnz	r3, 8005126 <__swsetup_r+0x16>
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f985 	bl	8005430 <__sinit>
 8005126:	4b2e      	ldr	r3, [pc, #184]	; (80051e0 <__swsetup_r+0xd0>)
 8005128:	429c      	cmp	r4, r3
 800512a:	d10f      	bne.n	800514c <__swsetup_r+0x3c>
 800512c:	686c      	ldr	r4, [r5, #4]
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005134:	0719      	lsls	r1, r3, #28
 8005136:	d42c      	bmi.n	8005192 <__swsetup_r+0x82>
 8005138:	06dd      	lsls	r5, r3, #27
 800513a:	d411      	bmi.n	8005160 <__swsetup_r+0x50>
 800513c:	2309      	movs	r3, #9
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005144:	81a3      	strh	r3, [r4, #12]
 8005146:	f04f 30ff 	mov.w	r0, #4294967295
 800514a:	e03e      	b.n	80051ca <__swsetup_r+0xba>
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <__swsetup_r+0xd4>)
 800514e:	429c      	cmp	r4, r3
 8005150:	d101      	bne.n	8005156 <__swsetup_r+0x46>
 8005152:	68ac      	ldr	r4, [r5, #8]
 8005154:	e7eb      	b.n	800512e <__swsetup_r+0x1e>
 8005156:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <__swsetup_r+0xd8>)
 8005158:	429c      	cmp	r4, r3
 800515a:	bf08      	it	eq
 800515c:	68ec      	ldreq	r4, [r5, #12]
 800515e:	e7e6      	b.n	800512e <__swsetup_r+0x1e>
 8005160:	0758      	lsls	r0, r3, #29
 8005162:	d512      	bpl.n	800518a <__swsetup_r+0x7a>
 8005164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005166:	b141      	cbz	r1, 800517a <__swsetup_r+0x6a>
 8005168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800516c:	4299      	cmp	r1, r3
 800516e:	d002      	beq.n	8005176 <__swsetup_r+0x66>
 8005170:	4630      	mov	r0, r6
 8005172:	f7ff fa77 	bl	8004664 <_free_r>
 8005176:	2300      	movs	r3, #0
 8005178:	6363      	str	r3, [r4, #52]	; 0x34
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	2300      	movs	r3, #0
 8005184:	6063      	str	r3, [r4, #4]
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f043 0308 	orr.w	r3, r3, #8
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	b94b      	cbnz	r3, 80051aa <__swsetup_r+0x9a>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800519c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a0:	d003      	beq.n	80051aa <__swsetup_r+0x9a>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 fa07 	bl	80055b8 <__smakebuf_r>
 80051aa:	89a0      	ldrh	r0, [r4, #12]
 80051ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051b0:	f010 0301 	ands.w	r3, r0, #1
 80051b4:	d00a      	beq.n	80051cc <__swsetup_r+0xbc>
 80051b6:	2300      	movs	r3, #0
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	6963      	ldr	r3, [r4, #20]
 80051bc:	425b      	negs	r3, r3
 80051be:	61a3      	str	r3, [r4, #24]
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	b943      	cbnz	r3, 80051d6 <__swsetup_r+0xc6>
 80051c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051c8:	d1ba      	bne.n	8005140 <__swsetup_r+0x30>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	0781      	lsls	r1, r0, #30
 80051ce:	bf58      	it	pl
 80051d0:	6963      	ldrpl	r3, [r4, #20]
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	e7f4      	b.n	80051c0 <__swsetup_r+0xb0>
 80051d6:	2000      	movs	r0, #0
 80051d8:	e7f7      	b.n	80051ca <__swsetup_r+0xba>
 80051da:	bf00      	nop
 80051dc:	2000003c 	.word	0x2000003c
 80051e0:	08005df4 	.word	0x08005df4
 80051e4:	08005e14 	.word	0x08005e14
 80051e8:	08005dd4 	.word	0x08005dd4

080051ec <abort>:
 80051ec:	b508      	push	{r3, lr}
 80051ee:	2006      	movs	r0, #6
 80051f0:	f000 faa4 	bl	800573c <raise>
 80051f4:	2001      	movs	r0, #1
 80051f6:	f7fc f803 	bl	8001200 <_exit>
	...

080051fc <__sflush_r>:
 80051fc:	898a      	ldrh	r2, [r1, #12]
 80051fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005202:	4605      	mov	r5, r0
 8005204:	0710      	lsls	r0, r2, #28
 8005206:	460c      	mov	r4, r1
 8005208:	d458      	bmi.n	80052bc <__sflush_r+0xc0>
 800520a:	684b      	ldr	r3, [r1, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc05      	bgt.n	800521c <__sflush_r+0x20>
 8005210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	dc02      	bgt.n	800521c <__sflush_r+0x20>
 8005216:	2000      	movs	r0, #0
 8005218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800521c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800521e:	2e00      	cmp	r6, #0
 8005220:	d0f9      	beq.n	8005216 <__sflush_r+0x1a>
 8005222:	2300      	movs	r3, #0
 8005224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005228:	682f      	ldr	r7, [r5, #0]
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	d032      	beq.n	8005294 <__sflush_r+0x98>
 800522e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	075a      	lsls	r2, r3, #29
 8005234:	d505      	bpl.n	8005242 <__sflush_r+0x46>
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	1ac0      	subs	r0, r0, r3
 800523a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800523c:	b10b      	cbz	r3, 8005242 <__sflush_r+0x46>
 800523e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005240:	1ac0      	subs	r0, r0, r3
 8005242:	2300      	movs	r3, #0
 8005244:	4602      	mov	r2, r0
 8005246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005248:	6a21      	ldr	r1, [r4, #32]
 800524a:	4628      	mov	r0, r5
 800524c:	47b0      	blx	r6
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	d106      	bne.n	8005262 <__sflush_r+0x66>
 8005254:	6829      	ldr	r1, [r5, #0]
 8005256:	291d      	cmp	r1, #29
 8005258:	d82c      	bhi.n	80052b4 <__sflush_r+0xb8>
 800525a:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <__sflush_r+0x108>)
 800525c:	40ca      	lsrs	r2, r1
 800525e:	07d6      	lsls	r6, r2, #31
 8005260:	d528      	bpl.n	80052b4 <__sflush_r+0xb8>
 8005262:	2200      	movs	r2, #0
 8005264:	6062      	str	r2, [r4, #4]
 8005266:	04d9      	lsls	r1, r3, #19
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	6022      	str	r2, [r4, #0]
 800526c:	d504      	bpl.n	8005278 <__sflush_r+0x7c>
 800526e:	1c42      	adds	r2, r0, #1
 8005270:	d101      	bne.n	8005276 <__sflush_r+0x7a>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	b903      	cbnz	r3, 8005278 <__sflush_r+0x7c>
 8005276:	6560      	str	r0, [r4, #84]	; 0x54
 8005278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800527a:	602f      	str	r7, [r5, #0]
 800527c:	2900      	cmp	r1, #0
 800527e:	d0ca      	beq.n	8005216 <__sflush_r+0x1a>
 8005280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005284:	4299      	cmp	r1, r3
 8005286:	d002      	beq.n	800528e <__sflush_r+0x92>
 8005288:	4628      	mov	r0, r5
 800528a:	f7ff f9eb 	bl	8004664 <_free_r>
 800528e:	2000      	movs	r0, #0
 8005290:	6360      	str	r0, [r4, #52]	; 0x34
 8005292:	e7c1      	b.n	8005218 <__sflush_r+0x1c>
 8005294:	6a21      	ldr	r1, [r4, #32]
 8005296:	2301      	movs	r3, #1
 8005298:	4628      	mov	r0, r5
 800529a:	47b0      	blx	r6
 800529c:	1c41      	adds	r1, r0, #1
 800529e:	d1c7      	bne.n	8005230 <__sflush_r+0x34>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0c4      	beq.n	8005230 <__sflush_r+0x34>
 80052a6:	2b1d      	cmp	r3, #29
 80052a8:	d001      	beq.n	80052ae <__sflush_r+0xb2>
 80052aa:	2b16      	cmp	r3, #22
 80052ac:	d101      	bne.n	80052b2 <__sflush_r+0xb6>
 80052ae:	602f      	str	r7, [r5, #0]
 80052b0:	e7b1      	b.n	8005216 <__sflush_r+0x1a>
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b8:	81a3      	strh	r3, [r4, #12]
 80052ba:	e7ad      	b.n	8005218 <__sflush_r+0x1c>
 80052bc:	690f      	ldr	r7, [r1, #16]
 80052be:	2f00      	cmp	r7, #0
 80052c0:	d0a9      	beq.n	8005216 <__sflush_r+0x1a>
 80052c2:	0793      	lsls	r3, r2, #30
 80052c4:	680e      	ldr	r6, [r1, #0]
 80052c6:	bf08      	it	eq
 80052c8:	694b      	ldreq	r3, [r1, #20]
 80052ca:	600f      	str	r7, [r1, #0]
 80052cc:	bf18      	it	ne
 80052ce:	2300      	movne	r3, #0
 80052d0:	eba6 0807 	sub.w	r8, r6, r7
 80052d4:	608b      	str	r3, [r1, #8]
 80052d6:	f1b8 0f00 	cmp.w	r8, #0
 80052da:	dd9c      	ble.n	8005216 <__sflush_r+0x1a>
 80052dc:	6a21      	ldr	r1, [r4, #32]
 80052de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052e0:	4643      	mov	r3, r8
 80052e2:	463a      	mov	r2, r7
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b0      	blx	r6
 80052e8:	2800      	cmp	r0, #0
 80052ea:	dc06      	bgt.n	80052fa <__sflush_r+0xfe>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	e78e      	b.n	8005218 <__sflush_r+0x1c>
 80052fa:	4407      	add	r7, r0
 80052fc:	eba8 0800 	sub.w	r8, r8, r0
 8005300:	e7e9      	b.n	80052d6 <__sflush_r+0xda>
 8005302:	bf00      	nop
 8005304:	20400001 	.word	0x20400001

08005308 <_fflush_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	690b      	ldr	r3, [r1, #16]
 800530c:	4605      	mov	r5, r0
 800530e:	460c      	mov	r4, r1
 8005310:	b913      	cbnz	r3, 8005318 <_fflush_r+0x10>
 8005312:	2500      	movs	r5, #0
 8005314:	4628      	mov	r0, r5
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	b118      	cbz	r0, 8005322 <_fflush_r+0x1a>
 800531a:	6983      	ldr	r3, [r0, #24]
 800531c:	b90b      	cbnz	r3, 8005322 <_fflush_r+0x1a>
 800531e:	f000 f887 	bl	8005430 <__sinit>
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <_fflush_r+0x6c>)
 8005324:	429c      	cmp	r4, r3
 8005326:	d11b      	bne.n	8005360 <_fflush_r+0x58>
 8005328:	686c      	ldr	r4, [r5, #4]
 800532a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0ef      	beq.n	8005312 <_fflush_r+0xa>
 8005332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005334:	07d0      	lsls	r0, r2, #31
 8005336:	d404      	bmi.n	8005342 <_fflush_r+0x3a>
 8005338:	0599      	lsls	r1, r3, #22
 800533a:	d402      	bmi.n	8005342 <_fflush_r+0x3a>
 800533c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800533e:	f000 f915 	bl	800556c <__retarget_lock_acquire_recursive>
 8005342:	4628      	mov	r0, r5
 8005344:	4621      	mov	r1, r4
 8005346:	f7ff ff59 	bl	80051fc <__sflush_r>
 800534a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800534c:	07da      	lsls	r2, r3, #31
 800534e:	4605      	mov	r5, r0
 8005350:	d4e0      	bmi.n	8005314 <_fflush_r+0xc>
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	059b      	lsls	r3, r3, #22
 8005356:	d4dd      	bmi.n	8005314 <_fflush_r+0xc>
 8005358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800535a:	f000 f908 	bl	800556e <__retarget_lock_release_recursive>
 800535e:	e7d9      	b.n	8005314 <_fflush_r+0xc>
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <_fflush_r+0x70>)
 8005362:	429c      	cmp	r4, r3
 8005364:	d101      	bne.n	800536a <_fflush_r+0x62>
 8005366:	68ac      	ldr	r4, [r5, #8]
 8005368:	e7df      	b.n	800532a <_fflush_r+0x22>
 800536a:	4b04      	ldr	r3, [pc, #16]	; (800537c <_fflush_r+0x74>)
 800536c:	429c      	cmp	r4, r3
 800536e:	bf08      	it	eq
 8005370:	68ec      	ldreq	r4, [r5, #12]
 8005372:	e7da      	b.n	800532a <_fflush_r+0x22>
 8005374:	08005df4 	.word	0x08005df4
 8005378:	08005e14 	.word	0x08005e14
 800537c:	08005dd4 	.word	0x08005dd4

08005380 <std>:
 8005380:	2300      	movs	r3, #0
 8005382:	b510      	push	{r4, lr}
 8005384:	4604      	mov	r4, r0
 8005386:	e9c0 3300 	strd	r3, r3, [r0]
 800538a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800538e:	6083      	str	r3, [r0, #8]
 8005390:	8181      	strh	r1, [r0, #12]
 8005392:	6643      	str	r3, [r0, #100]	; 0x64
 8005394:	81c2      	strh	r2, [r0, #14]
 8005396:	6183      	str	r3, [r0, #24]
 8005398:	4619      	mov	r1, r3
 800539a:	2208      	movs	r2, #8
 800539c:	305c      	adds	r0, #92	; 0x5c
 800539e:	f7ff f8c1 	bl	8004524 <memset>
 80053a2:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <std+0x38>)
 80053a4:	6263      	str	r3, [r4, #36]	; 0x24
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <std+0x3c>)
 80053a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <std+0x40>)
 80053ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <std+0x44>)
 80053b0:	6224      	str	r4, [r4, #32]
 80053b2:	6323      	str	r3, [r4, #48]	; 0x30
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	bf00      	nop
 80053b8:	08005775 	.word	0x08005775
 80053bc:	08005797 	.word	0x08005797
 80053c0:	080057cf 	.word	0x080057cf
 80053c4:	080057f3 	.word	0x080057f3

080053c8 <_cleanup_r>:
 80053c8:	4901      	ldr	r1, [pc, #4]	; (80053d0 <_cleanup_r+0x8>)
 80053ca:	f000 b8af 	b.w	800552c <_fwalk_reent>
 80053ce:	bf00      	nop
 80053d0:	08005309 	.word	0x08005309

080053d4 <__sfmoreglue>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	1e4a      	subs	r2, r1, #1
 80053d8:	2568      	movs	r5, #104	; 0x68
 80053da:	4355      	muls	r5, r2
 80053dc:	460e      	mov	r6, r1
 80053de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053e2:	f7ff f98f 	bl	8004704 <_malloc_r>
 80053e6:	4604      	mov	r4, r0
 80053e8:	b140      	cbz	r0, 80053fc <__sfmoreglue+0x28>
 80053ea:	2100      	movs	r1, #0
 80053ec:	e9c0 1600 	strd	r1, r6, [r0]
 80053f0:	300c      	adds	r0, #12
 80053f2:	60a0      	str	r0, [r4, #8]
 80053f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053f8:	f7ff f894 	bl	8004524 <memset>
 80053fc:	4620      	mov	r0, r4
 80053fe:	bd70      	pop	{r4, r5, r6, pc}

08005400 <__sfp_lock_acquire>:
 8005400:	4801      	ldr	r0, [pc, #4]	; (8005408 <__sfp_lock_acquire+0x8>)
 8005402:	f000 b8b3 	b.w	800556c <__retarget_lock_acquire_recursive>
 8005406:	bf00      	nop
 8005408:	20000288 	.word	0x20000288

0800540c <__sfp_lock_release>:
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <__sfp_lock_release+0x8>)
 800540e:	f000 b8ae 	b.w	800556e <__retarget_lock_release_recursive>
 8005412:	bf00      	nop
 8005414:	20000288 	.word	0x20000288

08005418 <__sinit_lock_acquire>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__sinit_lock_acquire+0x8>)
 800541a:	f000 b8a7 	b.w	800556c <__retarget_lock_acquire_recursive>
 800541e:	bf00      	nop
 8005420:	20000283 	.word	0x20000283

08005424 <__sinit_lock_release>:
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <__sinit_lock_release+0x8>)
 8005426:	f000 b8a2 	b.w	800556e <__retarget_lock_release_recursive>
 800542a:	bf00      	nop
 800542c:	20000283 	.word	0x20000283

08005430 <__sinit>:
 8005430:	b510      	push	{r4, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	f7ff fff0 	bl	8005418 <__sinit_lock_acquire>
 8005438:	69a3      	ldr	r3, [r4, #24]
 800543a:	b11b      	cbz	r3, 8005444 <__sinit+0x14>
 800543c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005440:	f7ff bff0 	b.w	8005424 <__sinit_lock_release>
 8005444:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005448:	6523      	str	r3, [r4, #80]	; 0x50
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <__sinit+0x68>)
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <__sinit+0x6c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	62a2      	str	r2, [r4, #40]	; 0x28
 8005452:	42a3      	cmp	r3, r4
 8005454:	bf04      	itt	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	61a3      	streq	r3, [r4, #24]
 800545a:	4620      	mov	r0, r4
 800545c:	f000 f820 	bl	80054a0 <__sfp>
 8005460:	6060      	str	r0, [r4, #4]
 8005462:	4620      	mov	r0, r4
 8005464:	f000 f81c 	bl	80054a0 <__sfp>
 8005468:	60a0      	str	r0, [r4, #8]
 800546a:	4620      	mov	r0, r4
 800546c:	f000 f818 	bl	80054a0 <__sfp>
 8005470:	2200      	movs	r2, #0
 8005472:	60e0      	str	r0, [r4, #12]
 8005474:	2104      	movs	r1, #4
 8005476:	6860      	ldr	r0, [r4, #4]
 8005478:	f7ff ff82 	bl	8005380 <std>
 800547c:	68a0      	ldr	r0, [r4, #8]
 800547e:	2201      	movs	r2, #1
 8005480:	2109      	movs	r1, #9
 8005482:	f7ff ff7d 	bl	8005380 <std>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	2202      	movs	r2, #2
 800548a:	2112      	movs	r1, #18
 800548c:	f7ff ff78 	bl	8005380 <std>
 8005490:	2301      	movs	r3, #1
 8005492:	61a3      	str	r3, [r4, #24]
 8005494:	e7d2      	b.n	800543c <__sinit+0xc>
 8005496:	bf00      	nop
 8005498:	08005ce8 	.word	0x08005ce8
 800549c:	080053c9 	.word	0x080053c9

080054a0 <__sfp>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	4607      	mov	r7, r0
 80054a4:	f7ff ffac 	bl	8005400 <__sfp_lock_acquire>
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <__sfp+0x84>)
 80054aa:	681e      	ldr	r6, [r3, #0]
 80054ac:	69b3      	ldr	r3, [r6, #24]
 80054ae:	b913      	cbnz	r3, 80054b6 <__sfp+0x16>
 80054b0:	4630      	mov	r0, r6
 80054b2:	f7ff ffbd 	bl	8005430 <__sinit>
 80054b6:	3648      	adds	r6, #72	; 0x48
 80054b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054bc:	3b01      	subs	r3, #1
 80054be:	d503      	bpl.n	80054c8 <__sfp+0x28>
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	b30b      	cbz	r3, 8005508 <__sfp+0x68>
 80054c4:	6836      	ldr	r6, [r6, #0]
 80054c6:	e7f7      	b.n	80054b8 <__sfp+0x18>
 80054c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054cc:	b9d5      	cbnz	r5, 8005504 <__sfp+0x64>
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <__sfp+0x88>)
 80054d0:	60e3      	str	r3, [r4, #12]
 80054d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054d6:	6665      	str	r5, [r4, #100]	; 0x64
 80054d8:	f000 f847 	bl	800556a <__retarget_lock_init_recursive>
 80054dc:	f7ff ff96 	bl	800540c <__sfp_lock_release>
 80054e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054e8:	6025      	str	r5, [r4, #0]
 80054ea:	61a5      	str	r5, [r4, #24]
 80054ec:	2208      	movs	r2, #8
 80054ee:	4629      	mov	r1, r5
 80054f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054f4:	f7ff f816 	bl	8004524 <memset>
 80054f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005500:	4620      	mov	r0, r4
 8005502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005504:	3468      	adds	r4, #104	; 0x68
 8005506:	e7d9      	b.n	80054bc <__sfp+0x1c>
 8005508:	2104      	movs	r1, #4
 800550a:	4638      	mov	r0, r7
 800550c:	f7ff ff62 	bl	80053d4 <__sfmoreglue>
 8005510:	4604      	mov	r4, r0
 8005512:	6030      	str	r0, [r6, #0]
 8005514:	2800      	cmp	r0, #0
 8005516:	d1d5      	bne.n	80054c4 <__sfp+0x24>
 8005518:	f7ff ff78 	bl	800540c <__sfp_lock_release>
 800551c:	230c      	movs	r3, #12
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	e7ee      	b.n	8005500 <__sfp+0x60>
 8005522:	bf00      	nop
 8005524:	08005ce8 	.word	0x08005ce8
 8005528:	ffff0001 	.word	0xffff0001

0800552c <_fwalk_reent>:
 800552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005530:	4606      	mov	r6, r0
 8005532:	4688      	mov	r8, r1
 8005534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005538:	2700      	movs	r7, #0
 800553a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800553e:	f1b9 0901 	subs.w	r9, r9, #1
 8005542:	d505      	bpl.n	8005550 <_fwalk_reent+0x24>
 8005544:	6824      	ldr	r4, [r4, #0]
 8005546:	2c00      	cmp	r4, #0
 8005548:	d1f7      	bne.n	800553a <_fwalk_reent+0xe>
 800554a:	4638      	mov	r0, r7
 800554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005550:	89ab      	ldrh	r3, [r5, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d907      	bls.n	8005566 <_fwalk_reent+0x3a>
 8005556:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800555a:	3301      	adds	r3, #1
 800555c:	d003      	beq.n	8005566 <_fwalk_reent+0x3a>
 800555e:	4629      	mov	r1, r5
 8005560:	4630      	mov	r0, r6
 8005562:	47c0      	blx	r8
 8005564:	4307      	orrs	r7, r0
 8005566:	3568      	adds	r5, #104	; 0x68
 8005568:	e7e9      	b.n	800553e <_fwalk_reent+0x12>

0800556a <__retarget_lock_init_recursive>:
 800556a:	4770      	bx	lr

0800556c <__retarget_lock_acquire_recursive>:
 800556c:	4770      	bx	lr

0800556e <__retarget_lock_release_recursive>:
 800556e:	4770      	bx	lr

08005570 <__swhatbuf_r>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	460e      	mov	r6, r1
 8005574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005578:	2900      	cmp	r1, #0
 800557a:	b096      	sub	sp, #88	; 0x58
 800557c:	4614      	mov	r4, r2
 800557e:	461d      	mov	r5, r3
 8005580:	da07      	bge.n	8005592 <__swhatbuf_r+0x22>
 8005582:	2300      	movs	r3, #0
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	89b3      	ldrh	r3, [r6, #12]
 8005588:	061a      	lsls	r2, r3, #24
 800558a:	d410      	bmi.n	80055ae <__swhatbuf_r+0x3e>
 800558c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005590:	e00e      	b.n	80055b0 <__swhatbuf_r+0x40>
 8005592:	466a      	mov	r2, sp
 8005594:	f000 f954 	bl	8005840 <_fstat_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	dbf2      	blt.n	8005582 <__swhatbuf_r+0x12>
 800559c:	9a01      	ldr	r2, [sp, #4]
 800559e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055a6:	425a      	negs	r2, r3
 80055a8:	415a      	adcs	r2, r3
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	e7ee      	b.n	800558c <__swhatbuf_r+0x1c>
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	2000      	movs	r0, #0
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	b016      	add	sp, #88	; 0x58
 80055b6:	bd70      	pop	{r4, r5, r6, pc}

080055b8 <__smakebuf_r>:
 80055b8:	898b      	ldrh	r3, [r1, #12]
 80055ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055bc:	079d      	lsls	r5, r3, #30
 80055be:	4606      	mov	r6, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	d507      	bpl.n	80055d4 <__smakebuf_r+0x1c>
 80055c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	2301      	movs	r3, #1
 80055ce:	6163      	str	r3, [r4, #20]
 80055d0:	b002      	add	sp, #8
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	ab01      	add	r3, sp, #4
 80055d6:	466a      	mov	r2, sp
 80055d8:	f7ff ffca 	bl	8005570 <__swhatbuf_r>
 80055dc:	9900      	ldr	r1, [sp, #0]
 80055de:	4605      	mov	r5, r0
 80055e0:	4630      	mov	r0, r6
 80055e2:	f7ff f88f 	bl	8004704 <_malloc_r>
 80055e6:	b948      	cbnz	r0, 80055fc <__smakebuf_r+0x44>
 80055e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ec:	059a      	lsls	r2, r3, #22
 80055ee:	d4ef      	bmi.n	80055d0 <__smakebuf_r+0x18>
 80055f0:	f023 0303 	bic.w	r3, r3, #3
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	e7e3      	b.n	80055c4 <__smakebuf_r+0xc>
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <__smakebuf_r+0x7c>)
 80055fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	6020      	str	r0, [r4, #0]
 8005604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005608:	81a3      	strh	r3, [r4, #12]
 800560a:	9b00      	ldr	r3, [sp, #0]
 800560c:	6163      	str	r3, [r4, #20]
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	6120      	str	r0, [r4, #16]
 8005612:	b15b      	cbz	r3, 800562c <__smakebuf_r+0x74>
 8005614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f923 	bl	8005864 <_isatty_r>
 800561e:	b128      	cbz	r0, 800562c <__smakebuf_r+0x74>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	89a0      	ldrh	r0, [r4, #12]
 800562e:	4305      	orrs	r5, r0
 8005630:	81a5      	strh	r5, [r4, #12]
 8005632:	e7cd      	b.n	80055d0 <__smakebuf_r+0x18>
 8005634:	080053c9 	.word	0x080053c9

08005638 <memcpy>:
 8005638:	440a      	add	r2, r1
 800563a:	4291      	cmp	r1, r2
 800563c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005640:	d100      	bne.n	8005644 <memcpy+0xc>
 8005642:	4770      	bx	lr
 8005644:	b510      	push	{r4, lr}
 8005646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800564a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564e:	4291      	cmp	r1, r2
 8005650:	d1f9      	bne.n	8005646 <memcpy+0xe>
 8005652:	bd10      	pop	{r4, pc}

08005654 <memmove>:
 8005654:	4288      	cmp	r0, r1
 8005656:	b510      	push	{r4, lr}
 8005658:	eb01 0402 	add.w	r4, r1, r2
 800565c:	d902      	bls.n	8005664 <memmove+0x10>
 800565e:	4284      	cmp	r4, r0
 8005660:	4623      	mov	r3, r4
 8005662:	d807      	bhi.n	8005674 <memmove+0x20>
 8005664:	1e43      	subs	r3, r0, #1
 8005666:	42a1      	cmp	r1, r4
 8005668:	d008      	beq.n	800567c <memmove+0x28>
 800566a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800566e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005672:	e7f8      	b.n	8005666 <memmove+0x12>
 8005674:	4402      	add	r2, r0
 8005676:	4601      	mov	r1, r0
 8005678:	428a      	cmp	r2, r1
 800567a:	d100      	bne.n	800567e <memmove+0x2a>
 800567c:	bd10      	pop	{r4, pc}
 800567e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005686:	e7f7      	b.n	8005678 <memmove+0x24>

08005688 <__malloc_lock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_lock+0x8>)
 800568a:	f7ff bf6f 	b.w	800556c <__retarget_lock_acquire_recursive>
 800568e:	bf00      	nop
 8005690:	20000284 	.word	0x20000284

08005694 <__malloc_unlock>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__malloc_unlock+0x8>)
 8005696:	f7ff bf6a 	b.w	800556e <__retarget_lock_release_recursive>
 800569a:	bf00      	nop
 800569c:	20000284 	.word	0x20000284

080056a0 <_realloc_r>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	4607      	mov	r7, r0
 80056a4:	4614      	mov	r4, r2
 80056a6:	460e      	mov	r6, r1
 80056a8:	b921      	cbnz	r1, 80056b4 <_realloc_r+0x14>
 80056aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ae:	4611      	mov	r1, r2
 80056b0:	f7ff b828 	b.w	8004704 <_malloc_r>
 80056b4:	b922      	cbnz	r2, 80056c0 <_realloc_r+0x20>
 80056b6:	f7fe ffd5 	bl	8004664 <_free_r>
 80056ba:	4625      	mov	r5, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	f000 f8f2 	bl	80058a8 <_malloc_usable_size_r>
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	d20f      	bcs.n	80056e8 <_realloc_r+0x48>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4638      	mov	r0, r7
 80056cc:	f7ff f81a 	bl	8004704 <_malloc_r>
 80056d0:	4605      	mov	r5, r0
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d0f2      	beq.n	80056bc <_realloc_r+0x1c>
 80056d6:	4631      	mov	r1, r6
 80056d8:	4622      	mov	r2, r4
 80056da:	f7ff ffad 	bl	8005638 <memcpy>
 80056de:	4631      	mov	r1, r6
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7fe ffbf 	bl	8004664 <_free_r>
 80056e6:	e7e9      	b.n	80056bc <_realloc_r+0x1c>
 80056e8:	4635      	mov	r5, r6
 80056ea:	e7e7      	b.n	80056bc <_realloc_r+0x1c>

080056ec <_raise_r>:
 80056ec:	291f      	cmp	r1, #31
 80056ee:	b538      	push	{r3, r4, r5, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	460d      	mov	r5, r1
 80056f4:	d904      	bls.n	8005700 <_raise_r+0x14>
 80056f6:	2316      	movs	r3, #22
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005702:	b112      	cbz	r2, 800570a <_raise_r+0x1e>
 8005704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005708:	b94b      	cbnz	r3, 800571e <_raise_r+0x32>
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f830 	bl	8005770 <_getpid_r>
 8005710:	462a      	mov	r2, r5
 8005712:	4601      	mov	r1, r0
 8005714:	4620      	mov	r0, r4
 8005716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571a:	f000 b817 	b.w	800574c <_kill_r>
 800571e:	2b01      	cmp	r3, #1
 8005720:	d00a      	beq.n	8005738 <_raise_r+0x4c>
 8005722:	1c59      	adds	r1, r3, #1
 8005724:	d103      	bne.n	800572e <_raise_r+0x42>
 8005726:	2316      	movs	r3, #22
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	2001      	movs	r0, #1
 800572c:	e7e7      	b.n	80056fe <_raise_r+0x12>
 800572e:	2400      	movs	r4, #0
 8005730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005734:	4628      	mov	r0, r5
 8005736:	4798      	blx	r3
 8005738:	2000      	movs	r0, #0
 800573a:	e7e0      	b.n	80056fe <_raise_r+0x12>

0800573c <raise>:
 800573c:	4b02      	ldr	r3, [pc, #8]	; (8005748 <raise+0xc>)
 800573e:	4601      	mov	r1, r0
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f7ff bfd3 	b.w	80056ec <_raise_r>
 8005746:	bf00      	nop
 8005748:	2000003c 	.word	0x2000003c

0800574c <_kill_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d07      	ldr	r5, [pc, #28]	; (800576c <_kill_r+0x20>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	f7fb fd41 	bl	80011e0 <_kill>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d102      	bne.n	8005768 <_kill_r+0x1c>
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	b103      	cbz	r3, 8005768 <_kill_r+0x1c>
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	2000028c 	.word	0x2000028c

08005770 <_getpid_r>:
 8005770:	f7fb bd2e 	b.w	80011d0 <_getpid>

08005774 <__sread>:
 8005774:	b510      	push	{r4, lr}
 8005776:	460c      	mov	r4, r1
 8005778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577c:	f000 f89c 	bl	80058b8 <_read_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	bfab      	itete	ge
 8005784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005786:	89a3      	ldrhlt	r3, [r4, #12]
 8005788:	181b      	addge	r3, r3, r0
 800578a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800578e:	bfac      	ite	ge
 8005790:	6563      	strge	r3, [r4, #84]	; 0x54
 8005792:	81a3      	strhlt	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__swrite>:
 8005796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579a:	461f      	mov	r7, r3
 800579c:	898b      	ldrh	r3, [r1, #12]
 800579e:	05db      	lsls	r3, r3, #23
 80057a0:	4605      	mov	r5, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4616      	mov	r6, r2
 80057a6:	d505      	bpl.n	80057b4 <__swrite+0x1e>
 80057a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ac:	2302      	movs	r3, #2
 80057ae:	2200      	movs	r2, #0
 80057b0:	f000 f868 	bl	8005884 <_lseek_r>
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	f000 b817 	b.w	80057fc <_write_r>

080057ce <__sseek>:
 80057ce:	b510      	push	{r4, lr}
 80057d0:	460c      	mov	r4, r1
 80057d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d6:	f000 f855 	bl	8005884 <_lseek_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	bf15      	itete	ne
 80057e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ea:	81a3      	strheq	r3, [r4, #12]
 80057ec:	bf18      	it	ne
 80057ee:	81a3      	strhne	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__sclose>:
 80057f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f6:	f000 b813 	b.w	8005820 <_close_r>
	...

080057fc <_write_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	; (800581c <_write_r+0x20>)
 8005800:	4604      	mov	r4, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fb fd1f 	bl	800124e <_write>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_write_r+0x1e>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_write_r+0x1e>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	2000028c 	.word	0x2000028c

08005820 <_close_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	; (800583c <_close_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb fd2b 	bl	8001286 <_close>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_close_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_close_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	2000028c 	.word	0x2000028c

08005840 <_fstat_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	; (8005860 <_fstat_r+0x20>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	f7fb fd26 	bl	800129e <_fstat>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d102      	bne.n	800585c <_fstat_r+0x1c>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	b103      	cbz	r3, 800585c <_fstat_r+0x1c>
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	bd38      	pop	{r3, r4, r5, pc}
 800585e:	bf00      	nop
 8005860:	2000028c 	.word	0x2000028c

08005864 <_isatty_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_isatty_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb fd25 	bl	80012be <_isatty>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_isatty_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_isatty_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	2000028c 	.word	0x2000028c

08005884 <_lseek_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	; (80058a4 <_lseek_r+0x20>)
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fb fd1e 	bl	80012d4 <_lseek>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_lseek_r+0x1e>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_lseek_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	2000028c 	.word	0x2000028c

080058a8 <_malloc_usable_size_r>:
 80058a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ac:	1f18      	subs	r0, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfbc      	itt	lt
 80058b2:	580b      	ldrlt	r3, [r1, r0]
 80058b4:	18c0      	addlt	r0, r0, r3
 80058b6:	4770      	bx	lr

080058b8 <_read_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d07      	ldr	r5, [pc, #28]	; (80058d8 <_read_r+0x20>)
 80058bc:	4604      	mov	r4, r0
 80058be:	4608      	mov	r0, r1
 80058c0:	4611      	mov	r1, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	602a      	str	r2, [r5, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fb fca4 	bl	8001214 <_read>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_read_r+0x1e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_read_r+0x1e>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	2000028c 	.word	0x2000028c

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
