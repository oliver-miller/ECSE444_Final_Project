
ecse444_final_proj_player_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a820  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800a9b0  0800a9b0  0001a9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec4  0800aec4  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aecc  0800aecc  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aed0  0800aed0  0001aed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800aed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001730  20000224  0800b0f8  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001954  0800b0f8  00021954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213cc  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f44  00000000  00000000  00041620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00045568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  00047080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028eee  00000000  00000000  00048a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6c9  00000000  00000000  000718ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103074  00000000  00000000  0008dfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019102b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008398  00000000  00000000  00191080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a998 	.word	0x0800a998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800a998 	.word	0x0800a998

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000eae:	2110      	movs	r1, #16
 8000eb0:	20d4      	movs	r0, #212	; 0xd4
 8000eb2:	f000 fe61 	bl	8001b78 <SENSOR_IO_Read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000ec6:	7bba      	ldrb	r2, [r7, #14]
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	20d4      	movs	r0, #212	; 0xd4
 8000ed6:	f000 fe35 	bl	8001b44 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000eda:	2112      	movs	r1, #18
 8000edc:	20d4      	movs	r0, #212	; 0xd4
 8000ede:	f000 fe4b 	bl	8001b78 <SENSOR_IO_Read>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000ef4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000ef6:	7bba      	ldrb	r2, [r7, #14]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	461a      	mov	r2, r3
 8000f02:	2112      	movs	r1, #18
 8000f04:	20d4      	movs	r0, #212	; 0xd4
 8000f06:	f000 fe1d 	bl	8001b44 <SENSOR_IO_Write>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	20d4      	movs	r0, #212	; 0xd4
 8000f20:	f000 fe2a 	bl	8001b78 <SENSOR_IO_Read>
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	461a      	mov	r2, r3
 8000f34:	2110      	movs	r1, #16
 8000f36:	20d4      	movs	r0, #212	; 0xd4
 8000f38:	f000 fe04 	bl	8001b44 <SENSOR_IO_Write>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000f48:	f000 fdf2 	bl	8001b30 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	20d4      	movs	r0, #212	; 0xd4
 8000f50:	f000 fe12 	bl	8001b78 <SENSOR_IO_Read>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000f68:	2115      	movs	r1, #21
 8000f6a:	20d4      	movs	r0, #212	; 0xd4
 8000f6c:	f000 fe04 	bl	8001b78 <SENSOR_IO_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f023 0310 	bic.w	r3, r3, #16
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2115      	movs	r1, #21
 8000f90:	20d4      	movs	r0, #212	; 0xd4
 8000f92:	f000 fdd7 	bl	8001b44 <SENSOR_IO_Write>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	20d4      	movs	r0, #212	; 0xd4
 8000fba:	f000 fddd 	bl	8001b78 <SENSOR_IO_Read>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	2128      	movs	r1, #40	; 0x28
 8000fca:	20d4      	movs	r0, #212	; 0xd4
 8000fcc:	f000 fdf2 	bl	8001bb4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	77fb      	strb	r3, [r7, #31]
 8000fd4:	e01f      	b.n	8001016 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000fd6:	7ffb      	ldrb	r3, [r7, #31]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	3301      	adds	r3, #1
 8000fdc:	f107 0220 	add.w	r2, r7, #32
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	7ffb      	ldrb	r3, [r7, #31]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	f107 0120 	add.w	r1, r7, #32
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	b212      	sxth	r2, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	f107 0120 	add.w	r1, r7, #32
 800100a:	440b      	add	r3, r1
 800100c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001010:	7ffb      	ldrb	r3, [r7, #31]
 8001012:	3301      	adds	r3, #1
 8001014:	77fb      	strb	r3, [r7, #31]
 8001016:	7ffb      	ldrb	r3, [r7, #31]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d9dc      	bls.n	8000fd6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	2b0c      	cmp	r3, #12
 8001024:	d828      	bhi.n	8001078 <LSM6DSL_AccReadXYZ+0xd8>
 8001026:	a201      	add	r2, pc, #4	; (adr r2, 800102c <LSM6DSL_AccReadXYZ+0x8c>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001061 	.word	0x08001061
 8001030:	08001079 	.word	0x08001079
 8001034:	08001079 	.word	0x08001079
 8001038:	08001079 	.word	0x08001079
 800103c:	08001073 	.word	0x08001073
 8001040:	08001079 	.word	0x08001079
 8001044:	08001079 	.word	0x08001079
 8001048:	08001079 	.word	0x08001079
 800104c:	08001067 	.word	0x08001067
 8001050:	08001079 	.word	0x08001079
 8001054:	08001079 	.word	0x08001079
 8001058:	08001079 	.word	0x08001079
 800105c:	0800106d 	.word	0x0800106d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <LSM6DSL_AccReadXYZ+0x128>)
 8001062:	61bb      	str	r3, [r7, #24]
    break;
 8001064:	e008      	b.n	8001078 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <LSM6DSL_AccReadXYZ+0x12c>)
 8001068:	61bb      	str	r3, [r7, #24]
    break;
 800106a:	e005      	b.n	8001078 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <LSM6DSL_AccReadXYZ+0x130>)
 800106e:	61bb      	str	r3, [r7, #24]
    break;
 8001070:	e002      	b.n	8001078 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <LSM6DSL_AccReadXYZ+0x134>)
 8001074:	61bb      	str	r3, [r7, #24]
    break;    
 8001076:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
 800107c:	e01b      	b.n	80010b6 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	f107 0220 	add.w	r2, r7, #32
 8001086:	4413      	add	r3, r2
 8001088:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001094:	edd7 7a06 	vldr	s15, [r7, #24]
 8001098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	b212      	sxth	r2, r2
 80010ae:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	3301      	adds	r3, #1
 80010b4:	77fb      	strb	r3, [r7, #31]
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d9e0      	bls.n	800107e <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	3d79db23 	.word	0x3d79db23
 80010cc:	3df9db23 	.word	0x3df9db23
 80010d0:	3e79db23 	.word	0x3e79db23
 80010d4:	3ef9db23 	.word	0x3ef9db23

080010d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <vApplicationGetIdleTaskMemory+0x2c>)
 80010e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <vApplicationGetIdleTaskMemory+0x30>)
 80010ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000240 	.word	0x20000240
 8001108:	20000294 	.word	0x20000294

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b09c      	sub	sp, #112	; 0x70
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f001 f970 	bl	80023f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f869 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f000 fa3d 	bl	8001598 <MX_GPIO_Init>
  MX_I2C2_Init();
 800111e:	f000 f97d 	bl	800141c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001122:	f000 fa09 	bl	8001538 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001126:	f000 f9b9 	bl	800149c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 800112a:	f000 f8b1 	bl	8001290 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 800112e:	f000 fd5f 	bl	8001bf0 <BSP_ACCELERO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <main+0xc0>)
 8001134:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001146:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fb2d 	bl	80067ac <osThreadCreate>
 8001152:	4603      	mov	r3, r0
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <main+0xc4>)
 8001156:	6013      	str	r3, [r2, #0]

  /* definition and creation of accelerometer */
  osThreadDef(accelerometer, start_accelero, osPriorityNormal, 0, 128);
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <main+0xc8>)
 800115a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800115e:	461d      	mov	r5, r3
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  accelerometerHandle = osThreadCreate(osThread(accelerometer), NULL);
 800116c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fb1a 	bl	80067ac <osThreadCreate>
 8001178:	4603      	mov	r3, r0
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <main+0xcc>)
 800117c:	6013      	str	r3, [r2, #0]

  /* definition and creation of button */
  osThreadDef(button, start_button, osPriorityNormal, 0, 128);
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <main+0xd0>)
 8001180:	f107 041c 	add.w	r4, r7, #28
 8001184:	461d      	mov	r5, r3
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fb07 	bl	80067ac <osThreadCreate>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <main+0xd4>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of microphone */
  osThreadDef(microphone, start_mic, osPriorityNormal, 0, 128);
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <main+0xd8>)
 80011a6:	463c      	mov	r4, r7
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  microphoneHandle = osThreadCreate(osThread(microphone), NULL);
 80011b6:	463b      	mov	r3, r7
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 faf6 	bl	80067ac <osThreadCreate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <main+0xdc>)
 80011c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011c6:	f005 faea 	bl	800679e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <main+0xbe>
 80011cc:	0800a9e0 	.word	0x0800a9e0
 80011d0:	20001228 	.word	0x20001228
 80011d4:	0800a9fc 	.word	0x0800a9fc
 80011d8:	200012d0 	.word	0x200012d0
 80011dc:	0800aa18 	.word	0x0800aa18
 80011e0:	20001794 	.word	0x20001794
 80011e4:	0800aa34 	.word	0x0800aa34
 80011e8:	200012cc 	.word	0x200012cc

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2244      	movs	r2, #68	; 0x44
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f006 fd3e 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001212:	f002 fdf9 	bl	8003e08 <HAL_PWREx_ControlVoltageScaling>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800121c:	f000 fb92 	bl	8001944 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001220:	2310      	movs	r3, #16
 8001222:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001234:	2301      	movs	r3, #1
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800123c:	2328      	movs	r3, #40	; 0x28
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001240:	2307      	movs	r3, #7
 8001242:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001244:	2302      	movs	r3, #2
 8001246:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fe2f 	bl	8003eb4 <HAL_RCC_OscConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800125c:	f000 fb72 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2303      	movs	r3, #3
 8001266:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2104      	movs	r1, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fa01 	bl	8004680 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001284:	f000 fb5e 	bl	8001944 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3758      	adds	r7, #88	; 0x58
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 8001296:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <MX_DFSDM1_Init+0x168>)
 8001298:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800129a:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80012a0:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 80012ac:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 80012b2:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80012b4:	22c8      	movs	r2, #200	; 0xc8
 80012b6:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80012b8:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80012be:	484d      	ldr	r0, [pc, #308]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80012c0:	f001 fa98 	bl	80027f4 <HAL_DFSDM_FilterInit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 80012ca:	f000 fb3b 	bl	8001944 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <MX_DFSDM1_Init+0x170>)
 80012d2:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80012d4:	4b49      	ldr	r3, [pc, #292]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 80012e0:	4b46      	ldr	r3, [pc, #280]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 200;
 80012ec:	4b43      	ldr	r3, [pc, #268]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012ee:	22c8      	movs	r2, #200	; 0xc8
 80012f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80012f8:	4840      	ldr	r0, [pc, #256]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80012fa:	f001 fa7b 	bl	80027f4 <HAL_DFSDM_FilterInit>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_DFSDM1_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fb1e 	bl	8001944 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001308:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <MX_DFSDM1_Init+0x174>)
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <MX_DFSDM1_Init+0x178>)
 800130c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001310:	2201      	movs	r2, #1
 8001312:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 25;
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <MX_DFSDM1_Init+0x174>)
 800131c:	2219      	movs	r2, #25
 800131e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <MX_DFSDM1_Init+0x174>)
 800132e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001332:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <MX_DFSDM1_Init+0x174>)
 800133c:	2204      	movs	r2, #4
 800133e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001348:	2201      	movs	r2, #1
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_DFSDM1_Init+0x174>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_DFSDM1_Init+0x174>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001358:	482a      	ldr	r0, [pc, #168]	; (8001404 <MX_DFSDM1_Init+0x174>)
 800135a:	f001 f98b 	bl	8002674 <HAL_DFSDM_ChannelInit>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_DFSDM1_Init+0xd8>
  {
    Error_Handler();
 8001364:	f000 faee 	bl	8001944 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_DFSDM1_Init+0x17c>)
 800136a:	4a29      	ldr	r2, [pc, #164]	; (8001410 <MX_DFSDM1_Init+0x180>)
 800136c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <MX_DFSDM1_Init+0x17c>)
 8001370:	2201      	movs	r2, #1
 8001372:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_DFSDM1_Init+0x17c>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 25;
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_DFSDM1_Init+0x17c>)
 800137c:	2219      	movs	r2, #25
 800137e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_DFSDM1_Init+0x17c>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_DFSDM1_Init+0x17c>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_DFSDM1_Init+0x17c>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_DFSDM1_Init+0x17c>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_DFSDM1_Init+0x17c>)
 800139a:	2204      	movs	r2, #4
 800139c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_DFSDM1_Init+0x17c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_DFSDM1_Init+0x17c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_DFSDM1_Init+0x17c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_DFSDM1_Init+0x17c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80013b6:	4815      	ldr	r0, [pc, #84]	; (800140c <MX_DFSDM1_Init+0x17c>)
 80013b8:	f001 f95c 	bl	8002674 <HAL_DFSDM_ChannelInit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_DFSDM1_Init+0x136>
  {
    Error_Handler();
 80013c2:	f000 fabf 	bl	8001944 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80013c6:	2201      	movs	r2, #1
 80013c8:	4912      	ldr	r1, [pc, #72]	; (8001414 <MX_DFSDM1_Init+0x184>)
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <MX_DFSDM1_Init+0x164>)
 80013cc:	f001 faec 	bl	80029a8 <HAL_DFSDM_FilterConfigRegChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_DFSDM1_Init+0x14a>
  {
    Error_Handler();
 80013d6:	f000 fab5 	bl	8001944 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80013da:	2201      	movs	r2, #1
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <MX_DFSDM1_Init+0x188>)
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_DFSDM1_Init+0x16c>)
 80013e0:	f001 fae2 	bl	80029a8 <HAL_DFSDM_FilterConfigRegChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_DFSDM1_Init+0x15e>
  {
    Error_Handler();
 80013ea:	f000 faab 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20001278 	.word	0x20001278
 80013f8:	40016100 	.word	0x40016100
 80013fc:	20001740 	.word	0x20001740
 8001400:	40016180 	.word	0x40016180
 8001404:	200011f0 	.word	0x200011f0
 8001408:	40016020 	.word	0x40016020
 800140c:	200017e8 	.word	0x200017e8
 8001410:	40016040 	.word	0x40016040
 8001414:	00010002 	.word	0x00010002
 8001418:	00020004 	.word	0x00020004

0800141c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_I2C2_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <MX_I2C2_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_I2C2_Init+0x74>)
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <MX_I2C2_Init+0x7c>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_I2C2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_I2C2_Init+0x74>)
 8001434:	2201      	movs	r2, #1
 8001436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_I2C2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_I2C2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_I2C2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_I2C2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_I2C2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <MX_I2C2_Init+0x74>)
 8001458:	f001 ff28 	bl	80032ac <HAL_I2C_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001462:	f000 fa6f 	bl	8001944 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <MX_I2C2_Init+0x74>)
 800146a:	f002 fc27 	bl	8003cbc <HAL_I2CEx_ConfigAnalogFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 fa66 	bl	8001944 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001478:	2100      	movs	r1, #0
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_I2C2_Init+0x74>)
 800147c:	f002 fc69 	bl	8003d52 <HAL_I2CEx_ConfigDigitalFilter>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 fa5d 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000122c 	.word	0x2000122c
 8001494:	40005800 	.word	0x40005800
 8001498:	10909cec 	.word	0x10909cec

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_TIM2_Init+0x98>)
 80014bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_TIM2_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_TIM2_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_TIM2_Init+0x98>)
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_TIM2_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_TIM2_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <MX_TIM2_Init+0x98>)
 80014e4:	f003 ffc0 	bl	8005468 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ee:	f000 fa29 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_TIM2_Init+0x98>)
 8001500:	f004 f999 	bl	8005836 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800150a:	f000 fa1b 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_TIM2_Init+0x98>)
 800151c:	f004 fbae 	bl	8005c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001526:	f000 fa0d 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000179c 	.word	0x2000179c

08001538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_USART1_UART_Init+0x58>)
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <MX_USART1_UART_Init+0x5c>)
 8001540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_USART1_UART_Init+0x58>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_USART1_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USART1_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART1_UART_Init+0x58>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USART1_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART1_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_USART1_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART1_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_USART1_UART_Init+0x58>)
 800157c:	f004 fc24 	bl	8005dc8 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001586:	f000 f9dd 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200016bc 	.word	0x200016bc
 8001594:	40013800 	.word	0x40013800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b43      	ldr	r3, [pc, #268]	; (80016bc <MX_GPIO_Init+0x124>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a42      	ldr	r2, [pc, #264]	; (80016bc <MX_GPIO_Init+0x124>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b40      	ldr	r3, [pc, #256]	; (80016bc <MX_GPIO_Init+0x124>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <MX_GPIO_Init+0x124>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a3c      	ldr	r2, [pc, #240]	; (80016bc <MX_GPIO_Init+0x124>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <MX_GPIO_Init+0x124>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <MX_GPIO_Init+0x124>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a36      	ldr	r2, [pc, #216]	; (80016bc <MX_GPIO_Init+0x124>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <MX_GPIO_Init+0x124>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <MX_GPIO_Init+0x124>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a30      	ldr	r2, [pc, #192]	; (80016bc <MX_GPIO_Init+0x124>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <MX_GPIO_Init+0x124>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON_OUT_Pin|MIC_OUT_Pin|ACC_OUT_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2138      	movs	r1, #56	; 0x38
 8001612:	482b      	ldr	r0, [pc, #172]	; (80016c0 <MX_GPIO_Init+0x128>)
 8001614:	f001 fe00 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161e:	4829      	ldr	r0, [pc, #164]	; (80016c4 <MX_GPIO_Init+0x12c>)
 8001620:	f001 fdfa 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <MX_GPIO_Init+0x130>)
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4821      	ldr	r0, [pc, #132]	; (80016c0 <MX_GPIO_Init+0x128>)
 800163a:	f001 fb37 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_OUT_Pin MIC_OUT_Pin ACC_OUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_OUT_Pin|MIC_OUT_Pin|ACC_OUT_Pin;
 800163e:	2338      	movs	r3, #56	; 0x38
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	481a      	ldr	r0, [pc, #104]	; (80016c0 <MX_GPIO_Init+0x128>)
 8001656:	f001 fb29 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800165a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <MX_GPIO_Init+0x12c>)
 8001674:	f001 fb1a 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_PLAYER_Pin */
  GPIO_InitStruct.Pin = RESET_PLAYER_Pin;
 8001678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_GPIO_Init+0x134>)
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_PLAYER_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <MX_GPIO_Init+0x12c>)
 800168e:	f001 fb0d 	bl	8002cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	2017      	movs	r0, #23
 8001698:	f000 ffc2 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800169c:	2017      	movs	r0, #23
 800169e:	f000 ffdb 	bl	8002658 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2028      	movs	r0, #40	; 0x28
 80016a8:	f000 ffba 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ac:	2028      	movs	r0, #40	; 0x28
 80016ae:	f000 ffd3 	bl	8002658 <HAL_NVIC_EnableIRQ>

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000400 	.word	0x48000400
 80016c8:	10110000 	.word	0x10110000
 80016cc:	10310000 	.word	0x10310000

080016d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RESET_PLAYER_Pin)
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e0:	d105      	bne.n	80016ee <HAL_GPIO_EXTI_Callback+0x1e>
	{
		number_of_turns = 0;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_GPIO_EXTI_Callback+0x2c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
		count = 0;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_GPIO_EXTI_Callback+0x30>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
	}
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200004a0 	.word	0x200004a0
 8001700:	200004a4 	.word	0x200004a4

08001704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af02      	add	r7, sp, #8
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f005 f899 	bl	8006844 <osDelay>
    if(sensor_number == 0){
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <StartDefaultTask+0x6c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d111      	bne.n	800173e <StartDefaultTask+0x3a>
			sprintf((char*)uart_buffer, "Accelerometer = %.2d, %.2d, %.2d\r\n", accelero_XYZ[0], accelero_XYZ[1], accelero_XYZ[2]);
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <StartDefaultTask+0x70>)
 800171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001720:	461a      	mov	r2, r3
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <StartDefaultTask+0x70>)
 8001724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001728:	4619      	mov	r1, r3
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <StartDefaultTask+0x70>)
 800172c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	460b      	mov	r3, r1
 8001734:	4910      	ldr	r1, [pc, #64]	; (8001778 <StartDefaultTask+0x74>)
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <StartDefaultTask+0x78>)
 8001738:	f006 ff12 	bl	8008560 <siprintf>
 800173c:	e00a      	b.n	8001754 <StartDefaultTask+0x50>
	}
    else if(sensor_number == 1){
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <StartDefaultTask+0x6c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d112      	bne.n	800176c <StartDefaultTask+0x68>
		sprintf((char*)uart_buffer, "Number of Turns = %.2d\r\n", number_of_turns);
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <StartDefaultTask+0x7c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	490d      	ldr	r1, [pc, #52]	; (8001784 <StartDefaultTask+0x80>)
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <StartDefaultTask+0x78>)
 8001750:	f006 ff06 	bl	8008560 <siprintf>
	else
	{
		continue;
	}

    HAL_UART_Transmit(&huart1, uart_buffer, strlen((char const *) uart_buffer), 1000);
 8001754:	4809      	ldr	r0, [pc, #36]	; (800177c <StartDefaultTask+0x78>)
 8001756:	f7fe fd3b 	bl	80001d0 <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	4906      	ldr	r1, [pc, #24]	; (800177c <StartDefaultTask+0x78>)
 8001764:	4808      	ldr	r0, [pc, #32]	; (8001788 <StartDefaultTask+0x84>)
 8001766:	f004 fb7d 	bl	8005e64 <HAL_UART_Transmit>
 800176a:	e7cf      	b.n	800170c <StartDefaultTask+0x8>
		continue;
 800176c:	bf00      	nop
    osDelay(100);
 800176e:	e7cd      	b.n	800170c <StartDefaultTask+0x8>
 8001770:	20000034 	.word	0x20000034
 8001774:	20000494 	.word	0x20000494
 8001778:	0800aa50 	.word	0x0800aa50
 800177c:	200012d4 	.word	0x200012d4
 8001780:	200004a0 	.word	0x200004a0
 8001784:	0800aa74 	.word	0x0800aa74
 8001788:	200016bc 	.word	0x200016bc

0800178c <start_accelero>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_accelero */
void start_accelero(void const * argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_accelero */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8001794:	2032      	movs	r0, #50	; 0x32
 8001796:	f005 f855 	bl	8006844 <osDelay>

    prev_accel = accelero_XYZ[2];
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <start_accelero+0x60>)
 800179c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <start_accelero+0x64>)
 80017a4:	601a      	str	r2, [r3, #0]
    BSP_ACCELERO_AccGetXYZ(accelero_XYZ);
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <start_accelero+0x60>)
 80017a8:	f000 fa60 	bl	8001c6c <BSP_ACCELERO_AccGetXYZ>
	if(accelero_XYZ[2]*prev_accel < 0){
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <start_accelero+0x60>)
 80017ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <start_accelero+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fb03 f302 	mul.w	r3, r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da04      	bge.n	80017ca <start_accelero+0x3e>
		number_of_turns++;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <start_accelero+0x68>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <start_accelero+0x68>)
 80017c8:	6013      	str	r3, [r2, #0]
	}

    if(number_of_turns >= 16){
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <start_accelero+0x68>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	d9e0      	bls.n	8001794 <start_accelero+0x8>
		number_of_turns = 0;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <start_accelero+0x68>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(ACC_OUT_GPIO_Port, ACC_OUT_Pin);
 80017d8:	2120      	movs	r1, #32
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <start_accelero+0x6c>)
 80017dc:	f001 fd34 	bl	8003248 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80017e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <start_accelero+0x70>)
 80017e6:	f001 fd2f 	bl	8003248 <HAL_GPIO_TogglePin>
    osDelay(50);
 80017ea:	e7d3      	b.n	8001794 <start_accelero+0x8>
 80017ec:	20000494 	.word	0x20000494
 80017f0:	2000049c 	.word	0x2000049c
 80017f4:	200004a0 	.word	0x200004a0
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000400 	.word	0x48000400

08001800 <start_button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_button */
void start_button(void const * argument)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_button */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8001808:	20c8      	movs	r0, #200	; 0xc8
 800180a:	f005 f81b 	bl	8006844 <osDelay>
    if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET){
 800180e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <start_button+0x34>)
 8001814:	f001 fce8 	bl	80031e8 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f4      	bne.n	8001808 <start_button+0x8>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800181e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <start_button+0x38>)
 8001824:	f001 fd10 	bl	8003248 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(BUTTON_OUT_GPIO_Port, BUTTON_OUT_Pin);
 8001828:	2108      	movs	r1, #8
 800182a:	4802      	ldr	r0, [pc, #8]	; (8001834 <start_button+0x34>)
 800182c:	f001 fd0c 	bl	8003248 <HAL_GPIO_TogglePin>
    osDelay(200);
 8001830:	e7ea      	b.n	8001808 <start_button+0x8>
 8001832:	bf00      	nop
 8001834:	48000800 	.word	0x48000800
 8001838:	48000400 	.word	0x48000400

0800183c <start_mic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mic */
void start_mic(void const * argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mic */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8001844:	200a      	movs	r0, #10
 8001846:	f004 fffd 	bl	8006844 <osDelay>

    HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0);
 800184a:	482b      	ldr	r0, [pc, #172]	; (80018f8 <start_mic+0xbc>)
 800184c:	f001 f8f1 	bl	8002a32 <HAL_DFSDM_FilterRegularStart>
    HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1);
 8001850:	482a      	ldr	r0, [pc, #168]	; (80018fc <start_mic+0xc0>)
 8001852:	f001 f8ee 	bl	8002a32 <HAL_DFSDM_FilterRegularStart>

    count = 0;
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <start_mic+0xc4>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
    HAL_Delay(440);
 800185c:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8001860:	f000 fe02 	bl	8002468 <HAL_Delay>
	while (count < 255){
 8001864:	e038      	b.n	80018d8 <start_mic+0x9c>
		// check if ready
		if(HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0, 1000) == HAL_OK){
 8001866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800186a:	4823      	ldr	r0, [pc, #140]	; (80018f8 <start_mic+0xbc>)
 800186c:	f001 f8fc 	bl	8002a68 <HAL_DFSDM_FilterPollForRegConversion>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d130      	bne.n	80018d8 <start_mic+0x9c>
			// get value and shift them by 8 to the right
			value1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel_1) >> 8;
 8001876:	4923      	ldr	r1, [pc, #140]	; (8001904 <start_mic+0xc8>)
 8001878:	481f      	ldr	r0, [pc, #124]	; (80018f8 <start_mic+0xbc>)
 800187a:	f001 f94b 	bl	8002b14 <HAL_DFSDM_FilterGetRegularValue>
 800187e:	4603      	mov	r3, r0
 8001880:	121b      	asrs	r3, r3, #8
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <start_mic+0xcc>)
 8001884:	6013      	str	r3, [r2, #0]
			value2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel_2) >> 8;
 8001886:	4921      	ldr	r1, [pc, #132]	; (800190c <start_mic+0xd0>)
 8001888:	481c      	ldr	r0, [pc, #112]	; (80018fc <start_mic+0xc0>)
 800188a:	f001 f943 	bl	8002b14 <HAL_DFSDM_FilterGetRegularValue>
 800188e:	4603      	mov	r3, r0
 8001890:	121b      	asrs	r3, r3, #8
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <start_mic+0xd4>)
 8001894:	6013      	str	r3, [r2, #0]
			if (value1 > threshold || value2 > threshold || value1 < -threshold || value2 < -threshold){
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <start_mic+0xcc>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <start_mic+0xd8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dc13      	bgt.n	80018ca <start_mic+0x8e>
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <start_mic+0xd4>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <start_mic+0xd8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dc0d      	bgt.n	80018ca <start_mic+0x8e>
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <start_mic+0xd8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	425a      	negs	r2, r3
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <start_mic+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dc06      	bgt.n	80018ca <start_mic+0x8e>
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <start_mic+0xd8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	425a      	negs	r2, r3
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <start_mic+0xd4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dd06      	ble.n	80018d8 <start_mic+0x9c>
				count++;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <start_mic+0xc4>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <start_mic+0xc4>)
 80018d6:	701a      	strb	r2, [r3, #0]
	while (count < 255){
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <start_mic+0xc4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2bff      	cmp	r3, #255	; 0xff
 80018e0:	d1c1      	bne.n	8001866 <start_mic+0x2a>
			}
		}
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <start_mic+0xdc>)
 80018e8:	f001 fcae 	bl	8003248 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(MIC_OUT_GPIO_Port, MIC_OUT_Pin);
 80018ec:	2110      	movs	r1, #16
 80018ee:	480b      	ldr	r0, [pc, #44]	; (800191c <start_mic+0xe0>)
 80018f0:	f001 fcaa 	bl	8003248 <HAL_GPIO_TogglePin>
    osDelay(10);
 80018f4:	e7a6      	b.n	8001844 <start_mic+0x8>
 80018f6:	bf00      	nop
 80018f8:	20001278 	.word	0x20001278
 80018fc:	20001740 	.word	0x20001740
 8001900:	200004a4 	.word	0x200004a4
 8001904:	20000038 	.word	0x20000038
 8001908:	20001820 	.word	0x20001820
 800190c:	2000003c 	.word	0x2000003c
 8001910:	20001798 	.word	0x20001798
 8001914:	20000040 	.word	0x20000040
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800

08001920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001932:	f000 fd79 	bl	8002428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40014800 	.word	0x40014800

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <I2Cx_MspInit+0xa8>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <I2Cx_MspInit+0xa8>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <I2Cx_MspInit+0xa8>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001970:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001974:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001976:	2312      	movs	r3, #18
 8001978:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001982:	2304      	movs	r3, #4
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <I2Cx_MspInit+0xac>)
 800198e:	f001 f98d 	bl	8002cac <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <I2Cx_MspInit+0xac>)
 800199a:	f001 f987 	bl	8002cac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a8:	6593      	str	r3, [r2, #88]	; 0x58
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <I2Cx_MspInit+0xa8>)
 80019c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	210f      	movs	r1, #15
 80019d2:	2021      	movs	r0, #33	; 0x21
 80019d4:	f000 fe24 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80019d8:	2021      	movs	r0, #33	; 0x21
 80019da:	f000 fe3d 	bl	8002658 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	210f      	movs	r1, #15
 80019e2:	2022      	movs	r0, #34	; 0x22
 80019e4:	f000 fe1c 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019e8:	2022      	movs	r0, #34	; 0x22
 80019ea:	f000 fe35 	bl	8002658 <HAL_NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400

08001a00 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <I2Cx_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <I2Cx_Init+0x58>)
 8001a12:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff89 	bl	8001950 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f001 fc34 	bl	80032ac <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001a44:	2100      	movs	r1, #0
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f002 f938 	bl	8003cbc <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40005800 	.word	0x40005800
 8001a58:	00702681 	.word	0x00702681

08001a5c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	72fb      	strb	r3, [r7, #11]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	813b      	strh	r3, [r7, #8]
 8001a72:	4613      	mov	r3, r2
 8001a74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	88f8      	ldrh	r0, [r7, #6]
 8001a80:	893a      	ldrh	r2, [r7, #8]
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4603      	mov	r3, r0
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f001 fddc 	bl	8003650 <HAL_I2C_Mem_Read>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001aa2:	7afb      	ldrb	r3, [r7, #11]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f832 	bl	8001b10 <I2Cx_Error>
  }
  return status;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	; 0x28
 8001aba:	af04      	add	r7, sp, #16
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	4608      	mov	r0, r1
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	72fb      	strb	r3, [r7, #11]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	813b      	strh	r3, [r7, #8]
 8001acc:	4613      	mov	r3, r2
 8001ace:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	88f8      	ldrh	r0, [r7, #6]
 8001ada:	893a      	ldrh	r2, [r7, #8]
 8001adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f001 fc9b 	bl	8003428 <HAL_I2C_Mem_Write>
 8001af2:	4603      	mov	r3, r0
 8001af4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	4619      	mov	r1, r3
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f805 	bl	8001b10 <I2Cx_Error>
  }
  return status;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f001 fc54 	bl	80033ca <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff6c 	bl	8001a00 <I2Cx_Init>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <SENSOR_IO_Init+0x10>)
 8001b36:	f7ff ff63 	bl	8001a00 <I2Cx_Init>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200018a8 	.word	0x200018a8

08001b44 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	71bb      	strb	r3, [r7, #6]
 8001b52:	4613      	mov	r3, r2
 8001b54:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	79f9      	ldrb	r1, [r7, #7]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	1d7b      	adds	r3, r7, #5
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <SENSOR_IO_Write+0x30>)
 8001b68:	f7ff ffa5 	bl	8001ab6 <I2Cx_WriteMultiple>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200018a8 	.word	0x200018a8

08001b78 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	79f9      	ldrb	r1, [r7, #7]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030f 	add.w	r3, r7, #15
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <SENSOR_IO_Read+0x38>)
 8001ba0:	f7ff ff5c 	bl	8001a5c <I2Cx_ReadMultiple>

  return read_value;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200018a8 	.word	0x200018a8

08001bb4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	603a      	str	r2, [r7, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	71bb      	strb	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	79f9      	ldrb	r1, [r7, #7]
 8001bd0:	88bb      	ldrh	r3, [r7, #4]
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <SENSOR_IO_ReadMultiple+0x38>)
 8001bdc:	f7ff ff3e 	bl	8001a5c <I2Cx_ReadMultiple>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29b      	uxth	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200018a8 	.word	0x200018a8

08001bf0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <BSP_ACCELERO_Init+0x74>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	4798      	blx	r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b6a      	cmp	r3, #106	; 0x6a
 8001c08:	d002      	beq.n	8001c10 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e024      	b.n	8001c5a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <BSP_ACCELERO_Init+0x78>)
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <BSP_ACCELERO_Init+0x74>)
 8001c14:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001c16:	2330      	movs	r3, #48	; 0x30
 8001c18:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001c2e:	797a      	ldrb	r2, [r7, #5]
 8001c30:	7abb      	ldrb	r3, [r7, #10]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001c38:	7a3b      	ldrb	r3, [r7, #8]
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <BSP_ACCELERO_Init+0x78>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	89ba      	ldrh	r2, [r7, #12]
 8001c56:	4610      	mov	r0, r2
 8001c58:	4798      	blx	r3
  }  

  return ret;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	200004a8 	.word	0x200004a8

08001c6c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200004a8 	.word	0x200004a8

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	f06f 0001 	mvn.w	r0, #1
 8001cda:	f000 fca1 	bl	8002620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0ac      	sub	sp, #176	; 0xb0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2288      	movs	r2, #136	; 0x88
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f005 ffb5 	bl	8007c7c <memset>
  if(DFSDM1_Init == 0)
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_DFSDM_FilterMspInit+0xd0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d14b      	bne.n	8001db2 <HAL_DFSDM_FilterMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fee0 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001d36:	f7ff fe05 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_DFSDM_FilterMspInit+0xd4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_DFSDM_FilterMspInit+0xd4>)
 8001d42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_DFSDM_FilterMspInit+0xd4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10b      	bne.n	8001d64 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6613      	str	r3, [r2, #96]	; 0x60
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001d7c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d96:	2306      	movs	r3, #6
 8001d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <HAL_DFSDM_FilterMspInit+0xdc>)
 8001da4:	f000 ff82 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_DFSDM_FilterMspInit+0xd0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_DFSDM_FilterMspInit+0xd0>)
 8001db0:	6013      	str	r3, [r2, #0]
  }

}
 8001db2:	bf00      	nop
 8001db4:	37b0      	adds	r7, #176	; 0xb0
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200004b0 	.word	0x200004b0
 8001dc0:	200004ac 	.word	0x200004ac
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	48001000 	.word	0x48001000

08001dcc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0ac      	sub	sp, #176	; 0xb0
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2288      	movs	r2, #136	; 0x88
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 ff45 	bl	8007c7c <memset>
  if(DFSDM1_Init == 0)
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d14b      	bne.n	8001e92 <HAL_DFSDM_ChannelMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fe70 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e16:	f7ff fd95 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001e22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10b      	bne.n	8001e44 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6613      	str	r3, [r2, #96]	; 0x60
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001e5c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e76:	2306      	movs	r3, #6
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001e84:	f000 ff12 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001e90:	6013      	str	r3, [r2, #0]
  }

}
 8001e92:	bf00      	nop
 8001e94:	37b0      	adds	r7, #176	; 0xb0
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200004b0 	.word	0x200004b0
 8001ea0:	200004ac 	.word	0x200004ac
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	48001000 	.word	0x48001000

08001eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0ac      	sub	sp, #176	; 0xb0
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2288      	movs	r2, #136	; 0x88
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 fed5 	bl	8007c7c <memset>
  if(hi2c->Instance==I2C2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_I2C_MspInit+0xb0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d13b      	bne.n	8001f54 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fe01 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ef4:	f7ff fd26 	bl	8001944 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_I2C_MspInit+0xb4>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_I2C_MspInit+0xb4>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_I2C_MspInit+0xb4>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f18:	2312      	movs	r3, #18
 8001f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f34:	4619      	mov	r1, r3
 8001f36:	480b      	ldr	r0, [pc, #44]	; (8001f64 <HAL_I2C_MspInit+0xb8>)
 8001f38:	f000 feb8 	bl	8002cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_I2C_MspInit+0xb4>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_I2C_MspInit+0xb4>)
 8001f42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_I2C_MspInit+0xb4>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	37b0      	adds	r7, #176	; 0xb0
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40005800 	.word	0x40005800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	48000400 	.word	0x48000400

08001f68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_I2C_MspDeInit+0x3c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10f      	bne.n	8001f9a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_I2C_MspDeInit+0x40>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_I2C_MspDeInit+0x40>)
 8001f80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8a:	4808      	ldr	r0, [pc, #32]	; (8001fac <HAL_I2C_MspDeInit+0x44>)
 8001f8c:	f001 f838 	bl	8003000 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_I2C_MspDeInit+0x44>)
 8001f96:	f001 f833 	bl	8003000 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40005800 	.word	0x40005800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	48000400 	.word	0x48000400

08001fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d10b      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_TIM_Base_MspInit+0x38>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_TIM_Base_MspInit+0x38>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_TIM_Base_MspInit+0x38>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0ac      	sub	sp, #176	; 0xb0
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2288      	movs	r2, #136	; 0x88
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f005 fe35 	bl	8007c7c <memset>
  if(huart->Instance==USART1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_UART_MspInit+0xb0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d13a      	bne.n	8002092 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800201c:	2301      	movs	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002020:	2300      	movs	r3, #0
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4618      	mov	r0, r3
 800202a:	f002 fd61 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002034:	f7ff fc86 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_UART_MspInit+0xb4>)
 800203a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_UART_MspInit+0xb4>)
 800203e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002042:	6613      	str	r3, [r2, #96]	; 0x60
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_UART_MspInit+0xb4>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_UART_MspInit+0xb4>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_UART_MspInit+0xb4>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_UART_MspInit+0xb4>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002068:	23c0      	movs	r3, #192	; 0xc0
 800206a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002080:	2307      	movs	r3, #7
 8002082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <HAL_UART_MspInit+0xb8>)
 800208e:	f000 fe0d 	bl	8002cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	37b0      	adds	r7, #176	; 0xb0
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40013800 	.word	0x40013800
 80020a0:	40021000 	.word	0x40021000
 80020a4:	48000400 	.word	0x48000400

080020a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	201a      	movs	r0, #26
 80020be:	f000 faaf 	bl	8002620 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80020c2:	201a      	movs	r0, #26
 80020c4:	f000 fac8 	bl	8002658 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_InitTick+0x9c>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_InitTick+0x9c>)
 80020ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d2:	6613      	str	r3, [r2, #96]	; 0x60
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_InitTick+0x9c>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e0:	f107 0210 	add.w	r2, r7, #16
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fc6e 	bl	80049cc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020f0:	f002 fc56 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 80020f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_InitTick+0xa0>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	3b01      	subs	r3, #1
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_InitTick+0xa4>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_InitTick+0xa8>)
 8002108:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_InitTick+0xa4>)
 800210c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002110:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_InitTick+0xa4>)
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_InitTick+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_InitTick+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_InitTick+0xa4>)
 8002126:	f003 f99f 	bl	8005468 <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002130:	4806      	ldr	r0, [pc, #24]	; (800214c <HAL_InitTick+0xa4>)
 8002132:	f003 f9f1 	bl	8005518 <HAL_TIM_Base_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	431bde83 	.word	0x431bde83
 800214c:	200018f4 	.word	0x200018f4
 8002150:	40014800 	.word	0x40014800

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler+0x4>

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <UsageFault_Handler+0x4>

08002172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002184:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002188:	f001 f878 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002196:	f003 fa2f 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200018f4 	.word	0x200018f4

080021a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021ac:	f001 f866 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_kill>:

int _kill(int pid, int sig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ce:	f005 fd1d 	bl	8007c0c <__errno>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2216      	movs	r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
	return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_exit>:

void _exit (int status)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ffe7 	bl	80021c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021f6:	e7fe      	b.n	80021f6 <_exit+0x12>

080021f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00a      	b.n	8002220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800220a:	f3af 8000 	nop.w
 800220e:	4601      	mov	r1, r0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	b2ca      	uxtb	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbf0      	blt.n	800220a <_read+0x12>
	}

return len;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e009      	b.n	8002258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf1      	blt.n	8002244 <_write+0x12>
	}
	return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_close>:

int _close(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002292:	605a      	str	r2, [r3, #4]
	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_isatty>:

int _isatty(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	return 1;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f005 fc82 	bl	8007c0c <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20018000 	.word	0x20018000
 8002334:	00000400 	.word	0x00000400
 8002338:	200004b4 	.word	0x200004b4
 800233c:	20001958 	.word	0x20001958

08002340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <SystemInit+0x5c>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a14      	ldr	r2, [pc, #80]	; (800239c <SystemInit+0x5c>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <SystemInit+0x60>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <SystemInit+0x60>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <SystemInit+0x60>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <SystemInit+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <SystemInit+0x60>)
 800236c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002370:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <SystemInit+0x60>)
 8002378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <SystemInit+0x60>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <SystemInit+0x60>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SystemInit+0x60>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00
 80023a0:	40021000 	.word	0x40021000

080023a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a8:	f7ff ffca 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023b8:	480a      	ldr	r0, [pc, #40]	; (80023e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
	ldr	r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <LoopForever+0x16>)
	cmp	r2, r3
 80023ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d2:	f005 fc21 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023d6:	f7fe fe99 	bl	800110c <main>

080023da <LoopForever>:

LoopForever:
    b LoopForever
 80023da:	e7fe      	b.n	80023da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023e0:	0800aed4 	.word	0x0800aed4
	ldr	r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023e8:	20000224 	.word	0x20000224
	ldr	r2, =_sbss
 80023ec:	20000224 	.word	0x20000224
	ldr	r3, = _ebss
 80023f0:	20001954 	.word	0x20001954

080023f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>

080023f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 f902 	bl	800260a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002406:	200f      	movs	r0, #15
 8002408:	f7ff fe4e 	bl	80020a8 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	e001      	b.n	800241c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002418:	f7ff fc40 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800241c:	79fb      	ldrb	r3, [r7, #7]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000004c 	.word	0x2000004c
 800244c:	20001940 	.word	0x20001940

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20001940 	.word	0x20001940

08002468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff ffee 	bl	8002450 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d005      	beq.n	800248e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_Delay+0x44>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800248e:	bf00      	nop
 8002490:	f7ff ffde 	bl	8002450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f7      	bhi.n	8002490 <HAL_Delay+0x28>
  {
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000004c 	.word	0x2000004c

080024b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <__NVIC_GetPriorityGrouping+0x18>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 0307 	and.w	r3, r3, #7
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	; (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff4c 	bl	80024b0 <__NVIC_SetPriorityGrouping>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002632:	f7ff ff61 	bl	80024f8 <__NVIC_GetPriorityGrouping>
 8002636:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	6978      	ldr	r0, [r7, #20]
 800263e:	f7ff ffb1 	bl	80025a4 <NVIC_EncodePriority>
 8002642:	4602      	mov	r2, r0
 8002644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff80 	bl	8002550 <__NVIC_SetPriority>
}
 8002650:	bf00      	nop
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff54 	bl	8002514 <__NVIC_EnableIRQ>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0ac      	b.n	80027e0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fa6c 	bl	8002b68 <DFSDM_GetChannelFromInstance>
 8002690:	4603      	mov	r3, r0
 8002692:	4a55      	ldr	r2, [pc, #340]	; (80027e8 <HAL_DFSDM_ChannelInit+0x174>)
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e09f      	b.n	80027e0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fb93 	bl	8001dcc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_DFSDM_ChannelInit+0x178>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_DFSDM_ChannelInit+0x178>)
 80026ae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80026b0:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_DFSDM_ChannelInit+0x178>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d125      	bne.n	8002704 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026b8:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026c2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026c4:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4948      	ldr	r1, [pc, #288]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a46      	ldr	r2, [pc, #280]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026d8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80026dc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	791b      	ldrb	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026e6:	4b42      	ldr	r3, [pc, #264]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	493f      	ldr	r1, [pc, #252]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002702:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002712:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002722:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002728:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 020f 	bic.w	r2, r2, #15
 8002740:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002768:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f002 0207 	and.w	r2, r2, #7
 8002794:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027c0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f9ca 	bl	8002b68 <DFSDM_GetChannelFromInstance>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4904      	ldr	r1, [pc, #16]	; (80027e8 <HAL_DFSDM_ChannelInit+0x174>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200004bc 	.word	0x200004bc
 80027ec:	200004b8 	.word	0x200004b8
 80027f0:	40016000 	.word	0x40016000

080027f4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0ca      	b.n	800299c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <HAL_DFSDM_FilterInit+0x1b0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d109      	bne.n	8002824 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002814:	2b01      	cmp	r3, #1
 8002816:	d003      	beq.n	8002820 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0bb      	b.n	800299c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fa55 	bl	8001cec <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002850:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7a1b      	ldrb	r3, [r3, #8]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d108      	bne.n	800286c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e007      	b.n	800287c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800287a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a5b      	ldrb	r3, [r3, #9]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d108      	bne.n	8002896 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e007      	b.n	80028a6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80028b4:	f023 0308 	bic.w	r3, r3, #8
 80028b8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d108      	bne.n	80028d4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7c1b      	ldrb	r3, [r3, #16]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d108      	bne.n	80028ee <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0210 	orr.w	r2, r2, #16
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e007      	b.n	80028fe <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0210 	bic.w	r2, r2, #16
 80028fc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7c5b      	ldrb	r3, [r3, #17]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0220 	orr.w	r2, r2, #32
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e007      	b.n	8002928 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0220 	bic.w	r2, r2, #32
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002936:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800293a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800294e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002956:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7c1a      	ldrb	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40016100 	.word	0x40016100

080029a8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02e      	beq.n	8002a20 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029c8:	2bff      	cmp	r3, #255	; 0xff
 80029ca:	d029      	beq.n	8002a20 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10d      	bne.n	8002a02 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e00a      	b.n	8002a18 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1e:	e001      	b.n	8002a24 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d004      	beq.n	8002a52 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d103      	bne.n	8002a5a <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8d4 	bl	8002c00 <DFSDM_RegConvStart>
 8002a58:	e001      	b.n	8002a5e <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DFSDM_FilterPollForRegConversion>:
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterPollForRegConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                       uint32_t                    Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d006      	beq.n	8002a8a <HAL_DFSDM_FilterPollForRegConversion+0x22>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d001      	beq.n	8002a8a <HAL_DFSDM_FilterPollForRegConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e040      	b.n	8002b0c <HAL_DFSDM_FilterPollForRegConversion+0xa4>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a8a:	f7ff fce1 	bl	8002450 <HAL_GetTick>
 8002a8e:	60f8      	str	r0, [r7, #12]

    /* Wait end of regular conversion */
    while ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002a90:	e010      	b.n	8002ab4 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    {
      /* Check the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d00c      	beq.n	8002ab4 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7ff fcd9 	bl	8002450 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <HAL_DFSDM_FilterPollForRegConversion+0x48>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e02b      	b.n	8002b0c <HAL_DFSDM_FilterPollForRegConversion+0xa4>
    while ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d1e7      	bne.n	8002a92 <HAL_DFSDM_FilterPollForRegConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d109      	bne.n	8002ae4 <HAL_DFSDM_FilterPollForRegConversion+0x7c>
    {
      /* Update error code and call error callback */
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
      hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f83b 	bl	8002b52 <HAL_DFSDM_FilterErrorCallback>
#endif

      /* Clear regular overrun flag */
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	60da      	str	r2, [r3, #12]
    }
    /* Update DFSDM filter state only if not continuous conversion and SW trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10e      	bne.n	8002b0a <HAL_DFSDM_FilterPollForRegConversion+0xa2>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_DFSDM_FilterPollForRegConversion+0xa2>
    {
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d101      	bne.n	8002b02 <HAL_DFSDM_FilterPollForRegConversion+0x9a>
 8002afe:	2201      	movs	r2, #1
 8002b00:	e000      	b.n	8002b04 <HAL_DFSDM_FilterPollForRegConversion+0x9c>
 8002b02:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    /* Return function status */
    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0207 	and.w	r2, r3, #7
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b36:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da00      	bge.n	8002b40 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 8002b3e:	33ff      	adds	r3, #255	; 0xff
 8002b40:	121b      	asrs	r3, r3, #8
 8002b42:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8002b44:	68bb      	ldr	r3, [r7, #8]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e02b      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <DFSDM_GetChannelFromInstance+0x80>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d102      	bne.n	8002b8c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e024      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <DFSDM_GetChannelFromInstance+0x84>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d102      	bne.n	8002b9a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002b94:	2302      	movs	r3, #2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e01d      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <DFSDM_GetChannelFromInstance+0x88>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d102      	bne.n	8002ba8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e016      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002bb0:	2305      	movs	r3, #5
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e00f      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <DFSDM_GetChannelFromInstance+0x90>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d102      	bne.n	8002bc4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e008      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <DFSDM_GetChannelFromInstance+0x94>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e001      	b.n	8002bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40016000 	.word	0x40016000
 8002be8:	40016020 	.word	0x40016020
 8002bec:	40016040 	.word	0x40016040
 8002bf0:	40016080 	.word	0x40016080
 8002bf4:	400160a0 	.word	0x400160a0
 8002bf8:	400160c0 	.word	0x400160c0
 8002bfc:	400160e0 	.word	0x400160e0

08002c00 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e033      	b.n	8002c8a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002c40:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d116      	bne.n	8002c8a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0202 	orr.w	r2, r2, #2
 8002c72:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <DFSDM_RegConvStart+0x84>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	e000      	b.n	8002c86 <DFSDM_RegConvStart+0x86>
 8002c84:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <DFSDM_RegConvStart+0x98>
 8002c94:	2202      	movs	r2, #2
 8002c96:	e000      	b.n	8002c9a <DFSDM_RegConvStart+0x9a>
 8002c98:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	e17f      	b.n	8002fbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8171 	beq.w	8002fb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d00b      	beq.n	8002cf4 <HAL_GPIO_Init+0x48>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d007      	beq.n	8002cf4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce8:	2b11      	cmp	r3, #17
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b12      	cmp	r3, #18
 8002cf2:	d130      	bne.n	8002d56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 0201 	and.w	r2, r3, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d118      	bne.n	8002d94 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	f003 0201 	and.w	r2, r3, #1
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x128>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b12      	cmp	r3, #18
 8002dd2:	d123      	bne.n	8002e1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	08da      	lsrs	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3208      	adds	r2, #8
 8002e16:	6939      	ldr	r1, [r7, #16]
 8002e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0203 	and.w	r2, r3, #3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80ac 	beq.w	8002fb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	; (8002fdc <HAL_GPIO_Init+0x330>)
 8002e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e62:	4a5e      	ldr	r2, [pc, #376]	; (8002fdc <HAL_GPIO_Init+0x330>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6613      	str	r3, [r2, #96]	; 0x60
 8002e6a:	4b5c      	ldr	r3, [pc, #368]	; (8002fdc <HAL_GPIO_Init+0x330>)
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e76:	4a5a      	ldr	r2, [pc, #360]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x242>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4f      	ldr	r2, [pc, #316]	; (8002fe4 <HAL_GPIO_Init+0x338>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x23e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4e      	ldr	r2, [pc, #312]	; (8002fe8 <HAL_GPIO_Init+0x33c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x23a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4d      	ldr	r2, [pc, #308]	; (8002fec <HAL_GPIO_Init+0x340>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x236>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4c      	ldr	r2, [pc, #304]	; (8002ff0 <HAL_GPIO_Init+0x344>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x232>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <HAL_GPIO_Init+0x348>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x22e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4a      	ldr	r2, [pc, #296]	; (8002ff8 <HAL_GPIO_Init+0x34c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x22a>
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x244>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f32:	4a32      	ldr	r2, [pc, #200]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fb0:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_GPIO_Init+0x350>)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f47f ae78 	bne.w	8002cbc <HAL_GPIO_Init+0x10>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	48000c00 	.word	0x48000c00
 8002ff0:	48001000 	.word	0x48001000
 8002ff4:	48001400 	.word	0x48001400
 8002ff8:	48001800 	.word	0x48001800
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800300e:	e0cd      	b.n	80031ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003010:	2201      	movs	r2, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80c0 	beq.w	80031a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003026:	4a68      	ldr	r2, [pc, #416]	; (80031c8 <HAL_GPIO_DeInit+0x1c8>)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003032:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	220f      	movs	r2, #15
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800304e:	d025      	beq.n	800309c <HAL_GPIO_DeInit+0x9c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <HAL_GPIO_DeInit+0x1cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d01f      	beq.n	8003098 <HAL_GPIO_DeInit+0x98>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <HAL_GPIO_DeInit+0x1d0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d019      	beq.n	8003094 <HAL_GPIO_DeInit+0x94>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_GPIO_DeInit+0x1d4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_GPIO_DeInit+0x90>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_GPIO_DeInit+0x1d8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00d      	beq.n	800308c <HAL_GPIO_DeInit+0x8c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a5a      	ldr	r2, [pc, #360]	; (80031dc <HAL_GPIO_DeInit+0x1dc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_DeInit+0x88>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a59      	ldr	r2, [pc, #356]	; (80031e0 <HAL_GPIO_DeInit+0x1e0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_GPIO_DeInit+0x84>
 8003080:	2306      	movs	r3, #6
 8003082:	e00c      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 8003084:	2307      	movs	r3, #7
 8003086:	e00a      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 8003088:	2305      	movs	r3, #5
 800308a:	e008      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 800308c:	2304      	movs	r3, #4
 800308e:	e006      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 8003090:	2303      	movs	r3, #3
 8003092:	e004      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 8003094:	2302      	movs	r3, #2
 8003096:	e002      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_GPIO_DeInit+0x9e>
 800309c:	2300      	movs	r3, #0
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	f002 0203 	and.w	r2, r2, #3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4093      	lsls	r3, r2
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d132      	bne.n	8003114 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80030ae:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	494b      	ldr	r1, [pc, #300]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4947      	ldr	r1, [pc, #284]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80030ca:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	4944      	ldr	r1, [pc, #272]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80030d8:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4940      	ldr	r1, [pc, #256]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <HAL_GPIO_DeInit+0x1c8>)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43da      	mvns	r2, r3
 8003106:	4830      	ldr	r0, [pc, #192]	; (80031c8 <HAL_GPIO_DeInit+0x1c8>)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	400a      	ands	r2, r1
 800310e:	3302      	adds	r3, #2
 8003110:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2103      	movs	r1, #3
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	08d2      	lsrs	r2, r2, #3
 8003148:	4019      	ands	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2103      	movs	r1, #3
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	2101      	movs	r1, #1
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2103      	movs	r1, #3
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003196:	2101      	movs	r1, #1
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f af2b 	bne.w	8003010 <HAL_GPIO_DeInit+0x10>
  }
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40010000 	.word	0x40010000
 80031cc:	48000400 	.word	0x48000400
 80031d0:	48000800 	.word	0x48000800
 80031d4:	48000c00 	.word	0x48000c00
 80031d8:	48001000 	.word	0x48001000
 80031dc:	48001400 	.word	0x48001400
 80031e0:	48001800 	.word	0x48001800
 80031e4:	40010400 	.word	0x40010400

080031e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	e001      	b.n	800320a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003234:	e002      	b.n	800323c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4013      	ands	r3, r2
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43d9      	mvns	r1, r3
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	400b      	ands	r3, r1
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d006      	beq.n	80032a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fa18 	bl	80016d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e081      	b.n	80033c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe fdea 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	e006      	b.n	8003334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d104      	bne.n	8003346 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003358:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003368:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	ea42 0103 	orr.w	r1, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	021a      	lsls	r2, r3, #8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69d9      	ldr	r1, [r3, #28]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e021      	b.n	8003420 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe fdb7 	bl	8001f68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4603      	mov	r3, r0
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	460b      	mov	r3, r1
 800343c:	813b      	strh	r3, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 80f9 	bne.w	8003642 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_I2C_Mem_Write+0x34>
 8003456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0ed      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Mem_Write+0x4e>
 8003472:	2302      	movs	r3, #2
 8003474:	e0e6      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800347e:	f7fe ffe7 	bl	8002450 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2319      	movs	r3, #25
 800348a:	2201      	movs	r2, #1
 800348c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fac3 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0d1      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2221      	movs	r2, #33	; 0x21
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	; 0x40
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c8:	88f8      	ldrh	r0, [r7, #6]
 80034ca:	893a      	ldrh	r2, [r7, #8]
 80034cc:	8979      	ldrh	r1, [r7, #10]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4603      	mov	r3, r0
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f9d3 	bl	8003884 <I2C_RequestMemoryWrite>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0a9      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2bff      	cmp	r3, #255	; 0xff
 80034f8:	d90e      	bls.n	8003518 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	b2da      	uxtb	r2, r3
 8003506:	8979      	ldrh	r1, [r7, #10]
 8003508:	2300      	movs	r3, #0
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fba5 	bl	8003c60 <I2C_TransferConfig>
 8003516:	e00f      	b.n	8003538 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	b2da      	uxtb	r2, r3
 8003528:	8979      	ldrh	r1, [r7, #10]
 800352a:	2300      	movs	r3, #0
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fb94 	bl	8003c60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 faad 	bl	8003a9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e07b      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d034      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x1c8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d130      	bne.n	80035f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa3f 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e04d      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2bff      	cmp	r3, #255	; 0xff
 80035b0:	d90e      	bls.n	80035d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fb49 	bl	8003c60 <I2C_TransferConfig>
 80035ce:	e00f      	b.n	80035f0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	8979      	ldrh	r1, [r7, #10]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fb38 	bl	8003c60 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d19e      	bne.n	8003538 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa8c 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01a      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2220      	movs	r2, #32
 8003614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_I2C_Mem_Write+0x224>)
 8003622:	400b      	ands	r3, r1
 8003624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fe00e800 	.word	0xfe00e800

08003650 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4603      	mov	r3, r0
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	460b      	mov	r3, r1
 8003664:	813b      	strh	r3, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	f040 80fd 	bne.w	8003872 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_I2C_Mem_Read+0x34>
 800367e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f1      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_I2C_Mem_Read+0x4e>
 800369a:	2302      	movs	r3, #2
 800369c:	e0ea      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036a6:	f7fe fed3 	bl	8002450 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f9af 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0d5      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2222      	movs	r2, #34	; 0x22
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f0:	88f8      	ldrh	r0, [r7, #6]
 80036f2:	893a      	ldrh	r2, [r7, #8]
 80036f4:	8979      	ldrh	r1, [r7, #10]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	4603      	mov	r3, r0
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f913 	bl	800392c <I2C_RequestMemoryRead>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0ad      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2bff      	cmp	r3, #255	; 0xff
 8003720:	d90e      	bls.n	8003740 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	22ff      	movs	r2, #255	; 0xff
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b52      	ldr	r3, [pc, #328]	; (800387c <HAL_I2C_Mem_Read+0x22c>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fa91 	bl	8003c60 <I2C_TransferConfig>
 800373e:	e00f      	b.n	8003760 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	b2da      	uxtb	r2, r3
 8003750:	8979      	ldrh	r1, [r7, #10]
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_I2C_Mem_Read+0x22c>)
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fa80 	bl	8003c60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	2200      	movs	r2, #0
 8003768:	2104      	movs	r1, #4
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f956 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07c      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d034      	beq.n	8003820 <HAL_I2C_Mem_Read+0x1d0>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d130      	bne.n	8003820 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	2200      	movs	r2, #0
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f927 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e04d      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2bff      	cmp	r3, #255	; 0xff
 80037e0:	d90e      	bls.n	8003800 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	2300      	movs	r3, #0
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fa31 	bl	8003c60 <I2C_TransferConfig>
 80037fe:	e00f      	b.n	8003820 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	b2da      	uxtb	r2, r3
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fa20 	bl	8003c60 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d19a      	bne.n	8003760 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f974 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e01a      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2220      	movs	r2, #32
 8003844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_I2C_Mem_Read+0x230>)
 8003852:	400b      	ands	r3, r1
 8003854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	80002400 	.word	0x80002400
 8003880:	fe00e800 	.word	0xfe00e800

08003884 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	4608      	mov	r0, r1
 800388e:	4611      	mov	r1, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4603      	mov	r3, r0
 8003894:	817b      	strh	r3, [r7, #10]
 8003896:	460b      	mov	r3, r1
 8003898:	813b      	strh	r3, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <I2C_RequestMemoryWrite+0xa4>)
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f9d7 	bl	8003c60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	69b9      	ldr	r1, [r7, #24]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8f0 	bl	8003a9c <I2C_WaitOnTXISFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e02c      	b.n	8003920 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
 80038d6:	e015      	b.n	8003904 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038d8:	893b      	ldrh	r3, [r7, #8]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	69b9      	ldr	r1, [r7, #24]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f8d6 	bl	8003a9c <I2C_WaitOnTXISFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e012      	b.n	8003920 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038fa:	893b      	ldrh	r3, [r7, #8]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f884 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	80002000 	.word	0x80002000

0800392c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	8979      	ldrh	r1, [r7, #10]
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <I2C_RequestMemoryRead+0xa4>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f984 	bl	8003c60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f89d 	bl	8003a9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e02c      	b.n	80039c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003972:	893b      	ldrh	r3, [r7, #8]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
 800397c:	e015      	b.n	80039aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800397e:	893b      	ldrh	r3, [r7, #8]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	b29b      	uxth	r3, r3
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	69b9      	ldr	r1, [r7, #24]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f883 	bl	8003a9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e012      	b.n	80039c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039a0:	893b      	ldrh	r3, [r7, #8]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f831 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	80002000 	.word	0x80002000

080039d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	619a      	str	r2, [r3, #24]
  }
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2c:	e022      	b.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d01e      	beq.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a36:	f7fe fd0b 	bl	8002450 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e00f      	b.n	8003a94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d0cd      	beq.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aa8:	e02c      	b.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f870 	bl	8003b94 <I2C_IsAcknowledgeFailed>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e02a      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d01e      	beq.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac6:	f7fe fcc3 	bl	8002450 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d113      	bne.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d1cb      	bne.n	8003aaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b28:	e028      	b.n	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f830 	bl	8003b94 <I2C_IsAcknowledgeFailed>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e026      	b.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fc87 	bl	8002450 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d1cf      	bne.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d151      	bne.n	8003c52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bae:	e022      	b.n	8003bf6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d01e      	beq.n	8003bf6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7fe fc4a 	bl	8002450 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <I2C_IsAcknowledgeFailed+0x3a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e02e      	b.n	8003c54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d1d5      	bne.n	8003bb0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2210      	movs	r2, #16
 8003c0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2220      	movs	r2, #32
 8003c12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff fedd 	bl	80039d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <I2C_IsAcknowledgeFailed+0xc8>)
 8003c26:	400b      	ands	r3, r1
 8003c28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	0d5b      	lsrs	r3, r3, #21
 8003c7c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <I2C_TransferConfig+0x58>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	43db      	mvns	r3, r3
 8003c86:	ea02 0103 	and.w	r1, r2, r3
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c90:	7a7b      	ldrb	r3, [r7, #9]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	03ff63ff 	.word	0x03ff63ff

08003cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d138      	bne.n	8003d44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e032      	b.n	8003d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d139      	bne.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e033      	b.n	8003dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2224      	movs	r2, #36	; 0x24
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003da4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40007000 	.word	0x40007000

08003e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e16:	d130      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d038      	beq.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2232      	movs	r2, #50	; 0x32
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0c9b      	lsrs	r3, r3, #18
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4c:	e002      	b.n	8003e54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d102      	bne.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f2      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d110      	bne.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d007      	beq.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e90:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	20000044 	.word	0x20000044
 8003eb0:	431bde83 	.word	0x431bde83

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e3d4      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec6:	4ba1      	ldr	r3, [pc, #644]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed0:	4b9e      	ldr	r3, [pc, #632]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80e4 	beq.w	80040b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_RCC_OscConfig+0x4a>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	f040 808b 	bne.w	800400c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 8087 	bne.w	800400c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003efe:	4b93      	ldr	r3, [pc, #588]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x62>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e3ac      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1a      	ldr	r2, [r3, #32]
 8003f1a:	4b8c      	ldr	r3, [pc, #560]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <HAL_RCC_OscConfig+0x7c>
 8003f26:	4b89      	ldr	r3, [pc, #548]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2e:	e005      	b.n	8003f3c <HAL_RCC_OscConfig+0x88>
 8003f30:	4b86      	ldr	r3, [pc, #536]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d223      	bcs.n	8003f88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fd73 	bl	8004a30 <RCC_SetFlashLatencyFromMSIRange>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e38d      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f54:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b7a      	ldr	r3, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4977      	ldr	r1, [pc, #476]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	4972      	ldr	r1, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
 8003f86:	e025      	b.n	8003fd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f88:	4b70      	ldr	r3, [pc, #448]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6f      	ldr	r2, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f8e:	f043 0308 	orr.w	r3, r3, #8
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	496a      	ldr	r1, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa6:	4b69      	ldr	r3, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	4965      	ldr	r1, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fd33 	bl	8004a30 <RCC_SetFlashLatencyFromMSIRange>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e34d      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd4:	f000 fc36 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	495a      	ldr	r1, [pc, #360]	; (8004150 <HAL_RCC_OscConfig+0x29c>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff0:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_RCC_OscConfig+0x2a0>)
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ff4:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_OscConfig+0x2a4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe f855 	bl	80020a8 <HAL_InitTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d052      	beq.n	80040ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	e331      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d032      	beq.n	800407a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004020:	f7fe fa16 	bl	8002450 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004028:	f7fe fa12 	bl	8002450 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e31a      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800403a:	4b44      	ldr	r3, [pc, #272]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004046:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a40      	ldr	r2, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	493b      	ldr	r1, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	4936      	ldr	r1, [pc, #216]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
 8004078:	e01a      	b.n	80040b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a33      	ldr	r2, [pc, #204]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004086:	f7fe f9e3 	bl	8002450 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800408e:	f7fe f9df 	bl	8002450 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e2e7      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <HAL_RCC_OscConfig+0x1da>
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d074      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d005      	beq.n	80040ce <HAL_RCC_OscConfig+0x21a>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d10e      	bne.n	80040e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d064      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d160      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e2c4      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x24a>
 80040f0:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e01d      	b.n	800413a <HAL_RCC_OscConfig+0x286>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004106:	d10c      	bne.n	8004122 <HAL_RCC_OscConfig+0x26e>
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800410e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0c      	ldr	r2, [pc, #48]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00b      	b.n	800413a <HAL_RCC_OscConfig+0x286>
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a06      	ldr	r2, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01c      	beq.n	800417c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe f985 	bl	8002450 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004148:	e011      	b.n	800416e <HAL_RCC_OscConfig+0x2ba>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	0800aa98 	.word	0x0800aa98
 8004154:	20000044 	.word	0x20000044
 8004158:	20000048 	.word	0x20000048
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fe f978 	bl	8002450 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e280      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416e:	4baf      	ldr	r3, [pc, #700]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x2a8>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe f968 	bl	8002450 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe f964 	bl	8002450 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e26c      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	4ba5      	ldr	r3, [pc, #660]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x2d0>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d060      	beq.n	8004274 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x310>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d119      	bne.n	80041f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d116      	bne.n	80041f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c4:	4b99      	ldr	r3, [pc, #612]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_OscConfig+0x328>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e249      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b93      	ldr	r3, [pc, #588]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	4990      	ldr	r1, [pc, #576]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f0:	e040      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d023      	beq.n	8004242 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041fa:	4b8c      	ldr	r3, [pc, #560]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a8b      	ldr	r2, [pc, #556]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fe f923 	bl	8002450 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420e:	f7fe f91f 	bl	8002450 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e227      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	4b82      	ldr	r3, [pc, #520]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b7f      	ldr	r3, [pc, #508]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	497c      	ldr	r1, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	e018      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b7a      	ldr	r3, [pc, #488]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a79      	ldr	r2, [pc, #484]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe f8ff 	bl	8002450 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004256:	f7fe f8fb 	bl	8002450 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e203      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004268:	4b70      	ldr	r3, [pc, #448]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03c      	beq.n	80042fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004288:	4b68      	ldr	r3, [pc, #416]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	4a67      	ldr	r2, [pc, #412]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fe f8da 	bl	8002450 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fe f8d6 	bl	8002450 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1de      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b2:	4b5e      	ldr	r3, [pc, #376]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <HAL_RCC_OscConfig+0x3ec>
 80042c0:	e01b      	b.n	80042fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c2:	4b5a      	ldr	r3, [pc, #360]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fe f8bd 	bl	8002450 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7fe f8b9 	bl	8002450 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1c1      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	4b4f      	ldr	r3, [pc, #316]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ef      	bne.n	80042da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80a6 	beq.w	8004454 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800430c:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a43      	ldr	r2, [pc, #268]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004330:	2301      	movs	r3, #1
 8004332:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d118      	bne.n	8004372 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004340:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434c:	f7fe f880 	bl	8002450 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004354:	f7fe f87c 	bl	8002450 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e184      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004366:	4b32      	ldr	r3, [pc, #200]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x4d8>
 800437a:	4b2c      	ldr	r3, [pc, #176]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	4a2a      	ldr	r2, [pc, #168]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438a:	e024      	b.n	80043d6 <HAL_RCC_OscConfig+0x522>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d110      	bne.n	80043b6 <HAL_RCC_OscConfig+0x502>
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a20      	ldr	r2, [pc, #128]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	e00f      	b.n	80043d6 <HAL_RCC_OscConfig+0x522>
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043ce:	f023 0304 	bic.w	r3, r3, #4
 80043d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fe f837 	bl	8002450 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe f833 	bl	8002450 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e139      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ed      	beq.n	80043e6 <HAL_RCC_OscConfig+0x532>
 800440a:	e01a      	b.n	8004442 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fe f820 	bl	8002450 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fe f81c 	bl	8002450 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d906      	bls.n	8004434 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e122      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	4b90      	ldr	r3, [pc, #576]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e8      	bne.n	8004414 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4a8a      	ldr	r2, [pc, #552]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8108 	beq.w	800466e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	2b02      	cmp	r3, #2
 8004464:	f040 80d0 	bne.w	8004608 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004468:	4b83      	ldr	r3, [pc, #524]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f003 0203 	and.w	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	429a      	cmp	r2, r3
 800447a:	d130      	bne.n	80044de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	3b01      	subs	r3, #1
 8004488:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d127      	bne.n	80044de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d11f      	bne.n	80044de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a8:	2a07      	cmp	r2, #7
 80044aa:	bf14      	ite	ne
 80044ac:	2201      	movne	r2, #1
 80044ae:	2200      	moveq	r2, #0
 80044b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d113      	bne.n	80044de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	3b01      	subs	r3, #1
 80044c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d109      	bne.n	80044de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	3b01      	subs	r3, #1
 80044d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d06e      	beq.n	80045bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	d069      	beq.n	80045b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044e4:	4b64      	ldr	r3, [pc, #400]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044f0:	4b61      	ldr	r3, [pc, #388]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b7      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004500:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5c      	ldr	r2, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800450c:	f7fd ffa0 	bl	8002450 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd ff9c 	bl	8002450 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0a4      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004526:	4b54      	ldr	r3, [pc, #336]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004532:	4b51      	ldr	r3, [pc, #324]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	4b51      	ldr	r3, [pc, #324]	; (800467c <HAL_RCC_OscConfig+0x7c8>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004542:	3a01      	subs	r2, #1
 8004544:	0112      	lsls	r2, r2, #4
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454c:	0212      	lsls	r2, r2, #8
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004554:	0852      	lsrs	r2, r2, #1
 8004556:	3a01      	subs	r2, #1
 8004558:	0552      	lsls	r2, r2, #21
 800455a:	4311      	orrs	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004560:	0852      	lsrs	r2, r2, #1
 8004562:	3a01      	subs	r2, #1
 8004564:	0652      	lsls	r2, r2, #25
 8004566:	4311      	orrs	r1, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800456c:	0912      	lsrs	r2, r2, #4
 800456e:	0452      	lsls	r2, r2, #17
 8004570:	430a      	orrs	r2, r1
 8004572:	4941      	ldr	r1, [pc, #260]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004578:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3e      	ldr	r2, [pc, #248]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004582:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004584:	4b3c      	ldr	r3, [pc, #240]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a3b      	ldr	r2, [pc, #236]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004590:	f7fd ff5e 	bl	8002450 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fd ff5a 	bl	8002450 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e062      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045aa:	4b33      	ldr	r3, [pc, #204]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045b6:	e05a      	b.n	800466e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e059      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045bc:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d152      	bne.n	800466e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d4:	4b28      	ldr	r3, [pc, #160]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4a27      	ldr	r2, [pc, #156]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e0:	f7fd ff36 	bl	8002450 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e8:	f7fd ff32 	bl	8002450 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e03a      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x734>
 8004606:	e032      	b.n	800466e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d02d      	beq.n	800466a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004618:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4a13      	ldr	r2, [pc, #76]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800462c:	f023 0303 	bic.w	r3, r3, #3
 8004630:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 8004638:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd ff05 	bl	8002450 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd ff01 	bl	8002450 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e009      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCC_OscConfig+0x7c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x796>
 8004668:	e001      	b.n	800466e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	f99d808c 	.word	0xf99d808c

08004680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0c8      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d910      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b63      	ldr	r3, [pc, #396]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	4961      	ldr	r1, [pc, #388]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b5f      	ldr	r3, [pc, #380]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b0      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d04c      	beq.n	800476a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d8:	4b56      	ldr	r3, [pc, #344]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d121      	bne.n	8004728 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e09e      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f0:	4b50      	ldr	r3, [pc, #320]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d115      	bne.n	8004728 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e092      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004708:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e086      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004718:	4b46      	ldr	r3, [pc, #280]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e07e      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 0203 	bic.w	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	493f      	ldr	r1, [pc, #252]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473a:	f7fd fe89 	bl	8002450 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004740:	e00a      	b.n	8004758 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004742:	f7fd fe85 	bl	8002450 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e066      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 020c 	and.w	r2, r3, #12
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	429a      	cmp	r2, r3
 8004768:	d1eb      	bne.n	8004742 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	492c      	ldr	r1, [pc, #176]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d210      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b26      	ldr	r3, [pc, #152]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 0207 	bic.w	r2, r3, #7
 800479e:	4924      	ldr	r1, [pc, #144]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_RCC_ClockConfig+0x1b0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e036      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4918      	ldr	r1, [pc, #96]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4910      	ldr	r1, [pc, #64]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047f6:	f000 f825 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 80047fa:	4602      	mov	r2, r0
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_RCC_ClockConfig+0x1b4>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	490c      	ldr	r1, [pc, #48]	; (8004838 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	5ccb      	ldrb	r3, [r1, r3]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_RCC_ClockConfig+0x1c0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fc44 	bl	80020a8 <HAL_InitTick>
 8004820:	4603      	mov	r3, r0
 8004822:	72fb      	strb	r3, [r7, #11]

  return status;
 8004824:	7afb      	ldrb	r3, [r7, #11]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40022000 	.word	0x40022000
 8004834:	40021000 	.word	0x40021000
 8004838:	0800aa98 	.word	0x0800aa98
 800483c:	20000044 	.word	0x20000044
 8004840:	20000048 	.word	0x20000048

08004844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004852:	4b3e      	ldr	r3, [pc, #248]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800485c:	4b3b      	ldr	r3, [pc, #236]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x34>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b0c      	cmp	r3, #12
 8004870:	d121      	bne.n	80048b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d11e      	bne.n	80048b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004884:	4b31      	ldr	r3, [pc, #196]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 8004886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e005      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004894:	4b2d      	ldr	r3, [pc, #180]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048a0:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_GetSysClockFreq+0x110>)
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e004      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048c8:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCC_GetSysClockFreq+0x114>)
 80048ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d134      	bne.n	800493c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0xa6>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d003      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0xac>
 80048e8:	e005      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCC_GetSysClockFreq+0x110>)
 80048ec:	617b      	str	r3, [r7, #20]
      break;
 80048ee:	e005      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_RCC_GetSysClockFreq+0x114>)
 80048f2:	617b      	str	r3, [r7, #20]
      break;
 80048f4:	e002      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	617b      	str	r3, [r7, #20]
      break;
 80048fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	3301      	adds	r3, #1
 8004908:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	fb02 f203 	mul.w	r2, r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <HAL_RCC_GetSysClockFreq+0x108>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	0e5b      	lsrs	r3, r3, #25
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	3301      	adds	r3, #1
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800493c:	69bb      	ldr	r3, [r7, #24]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	; 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000
 8004950:	0800aab0 	.word	0x0800aab0
 8004954:	00f42400 	.word	0x00f42400
 8004958:	007a1200 	.word	0x007a1200

0800495c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCC_GetHCLKFreq+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000044 	.word	0x20000044

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004978:	f7ff fff0 	bl	800495c <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4904      	ldr	r1, [pc, #16]	; (800499c <HAL_RCC_GetPCLK1Freq+0x28>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	0800aaa8 	.word	0x0800aaa8

080049a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049a4:	f7ff ffda 	bl	800495c <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0adb      	lsrs	r3, r3, #11
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4904      	ldr	r1, [pc, #16]	; (80049c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	0800aaa8 	.word	0x0800aaa8

080049cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	220f      	movs	r2, #15
 80049da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCC_GetClockConfig+0x60>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0207 	and.w	r2, r3, #7
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40022000 	.word	0x40022000

08004a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a48:	f7ff f9d0 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004a4c:	6178      	str	r0, [r7, #20]
 8004a4e:	e014      	b.n	8004a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a68:	f7ff f9c0 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a80:	d10b      	bne.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d919      	bls.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a8c:	d902      	bls.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a8e:	2302      	movs	r3, #2
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e013      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a94:	2301      	movs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e010      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d902      	bls.n	8004aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	e00a      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d102      	bne.n	8004ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aac:	2302      	movs	r3, #2
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e004      	b.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b70      	cmp	r3, #112	; 0x70
 8004ab6:	d101      	bne.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ab8:	2301      	movs	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0207 	bic.w	r2, r3, #7
 8004ac4:	4909      	ldr	r1, [pc, #36]	; (8004aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d001      	beq.n	8004ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40022000 	.word	0x40022000

08004af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004af8:	2300      	movs	r3, #0
 8004afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004afc:	2300      	movs	r3, #0
 8004afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d041      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b14:	d02a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b1a:	d824      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b20:	d008      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b26:	d81e      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b30:	d010      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b32:	e018      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b34:	4b86      	ldr	r3, [pc, #536]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a85      	ldr	r2, [pc, #532]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b40:	e015      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fabb 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b52:	e00c      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3320      	adds	r3, #32
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fba6 	bl	80052ac <RCCEx_PLLSAI2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	74fb      	strb	r3, [r7, #19]
      break;
 8004b6a:	e000      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b74:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b82:	4973      	ldr	r1, [pc, #460]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b8a:	e001      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d041      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ba4:	d02a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004baa:	d824      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb6:	d81e      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc0:	d010      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bc2:	e018      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bc4:	4b62      	ldr	r3, [pc, #392]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a61      	ldr	r2, [pc, #388]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd0:	e015      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fa73 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004be2:	e00c      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3320      	adds	r3, #32
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fb5e 	bl	80052ac <RCCEx_PLLSAI2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c04:	4b52      	ldr	r3, [pc, #328]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c12:	494f      	ldr	r1, [pc, #316]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80a0 	beq.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c52:	6593      	str	r3, [r2, #88]	; 0x58
 8004c54:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c60:	2301      	movs	r3, #1
 8004c62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3a      	ldr	r2, [pc, #232]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c70:	f7fd fbee 	bl	8002450 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c76:	e009      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fd fbea 	bl	8002450 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	74fb      	strb	r3, [r7, #19]
        break;
 8004c8a:	e005      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ef      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d15c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01f      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d019      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fba9 	bl	8002450 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d00:	e00b      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fd fba5 	bl	8002450 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d902      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	74fb      	strb	r3, [r7, #19]
            break;
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ec      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3e:	4904      	ldr	r1, [pc, #16]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d46:	e009      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5c:	7c7b      	ldrb	r3, [r7, #17]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d105      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d62:	4b9e      	ldr	r3, [pc, #632]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	4a9d      	ldr	r2, [pc, #628]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d7a:	4b98      	ldr	r3, [pc, #608]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 0203 	bic.w	r2, r3, #3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	4994      	ldr	r1, [pc, #592]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d9c:	4b8f      	ldr	r3, [pc, #572]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 020c 	bic.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	498c      	ldr	r1, [pc, #560]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dbe:	4b87      	ldr	r3, [pc, #540]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	4983      	ldr	r1, [pc, #524]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004de0:	4b7e      	ldr	r3, [pc, #504]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	497b      	ldr	r1, [pc, #492]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e02:	4b76      	ldr	r3, [pc, #472]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e10:	4972      	ldr	r1, [pc, #456]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e24:	4b6d      	ldr	r3, [pc, #436]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	496a      	ldr	r1, [pc, #424]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e46:	4b65      	ldr	r3, [pc, #404]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	4961      	ldr	r1, [pc, #388]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e68:	4b5c      	ldr	r3, [pc, #368]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	4959      	ldr	r1, [pc, #356]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8a:	4b54      	ldr	r3, [pc, #336]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	4950      	ldr	r1, [pc, #320]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eac:	4b4b      	ldr	r3, [pc, #300]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	4948      	ldr	r1, [pc, #288]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ece:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	493f      	ldr	r1, [pc, #252]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d028      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef0:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efe:	4937      	ldr	r1, [pc, #220]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f10:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a31      	ldr	r2, [pc, #196]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1a:	60d3      	str	r3, [r2, #12]
 8004f1c:	e011      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8c8 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f4e:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	491f      	ldr	r1, [pc, #124]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f6c:	d106      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4a1a      	ldr	r2, [pc, #104]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f78:	60d3      	str	r3, [r2, #12]
 8004f7a:	e011      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f899 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fba:	4908      	ldr	r1, [pc, #32]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fca:	d109      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a02      	ldr	r2, [pc, #8]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
 8004fd8:	e014      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f867 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02f      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800501e:	4928      	ldr	r1, [pc, #160]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800502a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502e:	d10d      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f844 	bl	80050c4 <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d014      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
 800504a:	e011      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005054:	d10c      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3320      	adds	r3, #32
 800505a:	2102      	movs	r1, #2
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f925 	bl	80052ac <RCCEx_PLLSAI2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005066:	7cfb      	ldrb	r3, [r7, #19]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508a:	490d      	ldr	r1, [pc, #52]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ae:	4904      	ldr	r1, [pc, #16]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000

080050c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050d2:	4b75      	ldr	r3, [pc, #468]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050de:	4b72      	ldr	r3, [pc, #456]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d10d      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
       ||
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050f6:	4b6c      	ldr	r3, [pc, #432]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
       ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d047      	beq.n	800519a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e044      	b.n	800519a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d018      	beq.n	800514a <RCCEx_PLLSAI1_Config+0x86>
 8005118:	2b03      	cmp	r3, #3
 800511a:	d825      	bhi.n	8005168 <RCCEx_PLLSAI1_Config+0xa4>
 800511c:	2b01      	cmp	r3, #1
 800511e:	d002      	beq.n	8005126 <RCCEx_PLLSAI1_Config+0x62>
 8005120:	2b02      	cmp	r3, #2
 8005122:	d009      	beq.n	8005138 <RCCEx_PLLSAI1_Config+0x74>
 8005124:	e020      	b.n	8005168 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005126:	4b60      	ldr	r3, [pc, #384]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d11d      	bne.n	800516e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005136:	e01a      	b.n	800516e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005138:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d116      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005148:	e013      	b.n	8005172 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800514a:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005156:	4b54      	ldr	r3, [pc, #336]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005166:	e006      	b.n	8005176 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e004      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005176:	bf00      	nop
    }

    if(status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10d      	bne.n	800519a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800517e:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	430b      	orrs	r3, r1
 8005194:	4944      	ldr	r1, [pc, #272]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d17d      	bne.n	800529c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051a0:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fd f950 	bl	8002450 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051b2:	e009      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b4:	f7fd f94c 	bl	8002450 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
        break;
 80051c6:	e005      	b.n	80051d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051c8:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ef      	bne.n	80051b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d160      	bne.n	800529c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d111      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e0:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6892      	ldr	r2, [r2, #8]
 80051f0:	0211      	lsls	r1, r2, #8
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	0912      	lsrs	r2, r2, #4
 80051f8:	0452      	lsls	r2, r2, #17
 80051fa:	430a      	orrs	r2, r1
 80051fc:	492a      	ldr	r1, [pc, #168]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
 8005202:	e027      	b.n	8005254 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d112      	bne.n	8005230 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520a:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6892      	ldr	r2, [r2, #8]
 800521a:	0211      	lsls	r1, r2, #8
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6912      	ldr	r2, [r2, #16]
 8005220:	0852      	lsrs	r2, r2, #1
 8005222:	3a01      	subs	r2, #1
 8005224:	0552      	lsls	r2, r2, #21
 8005226:	430a      	orrs	r2, r1
 8005228:	491f      	ldr	r1, [pc, #124]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	610b      	str	r3, [r1, #16]
 800522e:	e011      	b.n	8005254 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6892      	ldr	r2, [r2, #8]
 8005240:	0211      	lsls	r1, r2, #8
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6952      	ldr	r2, [r2, #20]
 8005246:	0852      	lsrs	r2, r2, #1
 8005248:	3a01      	subs	r2, #1
 800524a:	0652      	lsls	r2, r2, #25
 800524c:	430a      	orrs	r2, r1
 800524e:	4916      	ldr	r1, [pc, #88]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005250:	4313      	orrs	r3, r2
 8005252:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005254:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800525e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fd f8f6 	bl	8002450 <HAL_GetTick>
 8005264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005266:	e009      	b.n	800527c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005268:	f7fd f8f2 	bl	8002450 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d902      	bls.n	800527c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	73fb      	strb	r3, [r7, #15]
          break;
 800527a:	e005      	b.n	8005288 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ef      	beq.n	8005268 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	4904      	ldr	r1, [pc, #16]	; (80052a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000

080052ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052c6:	4b67      	ldr	r3, [pc, #412]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0203 	and.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d10d      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
       ||
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052de:	4b61      	ldr	r3, [pc, #388]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
       ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d047      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
 80052f6:	e044      	b.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d018      	beq.n	8005332 <RCCEx_PLLSAI2_Config+0x86>
 8005300:	2b03      	cmp	r3, #3
 8005302:	d825      	bhi.n	8005350 <RCCEx_PLLSAI2_Config+0xa4>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d002      	beq.n	800530e <RCCEx_PLLSAI2_Config+0x62>
 8005308:	2b02      	cmp	r3, #2
 800530a:	d009      	beq.n	8005320 <RCCEx_PLLSAI2_Config+0x74>
 800530c:	e020      	b.n	8005350 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800530e:	4b55      	ldr	r3, [pc, #340]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d11d      	bne.n	8005356 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800531e:	e01a      	b.n	8005356 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005320:	4b50      	ldr	r3, [pc, #320]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005330:	e013      	b.n	800535a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005332:	4b4c      	ldr	r3, [pc, #304]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800533e:	4b49      	ldr	r3, [pc, #292]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800534e:	e006      	b.n	800535e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e004      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800535e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6819      	ldr	r1, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	430b      	orrs	r3, r1
 800537c:	4939      	ldr	r1, [pc, #228]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d167      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005388:	4b36      	ldr	r3, [pc, #216]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a35      	ldr	r2, [pc, #212]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fd f85c 	bl	8002450 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800539c:	f7fd f858 	bl	8002450 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
        break;
 80053ae:	e005      	b.n	80053bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ef      	bne.n	800539c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14a      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d111      	bne.n	80053ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053c8:	4b26      	ldr	r3, [pc, #152]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6892      	ldr	r2, [r2, #8]
 80053d8:	0211      	lsls	r1, r2, #8
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68d2      	ldr	r2, [r2, #12]
 80053de:	0912      	lsrs	r2, r2, #4
 80053e0:	0452      	lsls	r2, r2, #17
 80053e2:	430a      	orrs	r2, r1
 80053e4:	491f      	ldr	r1, [pc, #124]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	614b      	str	r3, [r1, #20]
 80053ea:	e011      	b.n	8005410 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6892      	ldr	r2, [r2, #8]
 80053fc:	0211      	lsls	r1, r2, #8
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6912      	ldr	r2, [r2, #16]
 8005402:	0852      	lsrs	r2, r2, #1
 8005404:	3a01      	subs	r2, #1
 8005406:	0652      	lsls	r2, r2, #25
 8005408:	430a      	orrs	r2, r1
 800540a:	4916      	ldr	r1, [pc, #88]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540c:	4313      	orrs	r3, r2
 800540e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005410:	4b14      	ldr	r3, [pc, #80]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541c:	f7fd f818 	bl	8002450 <HAL_GetTick>
 8005420:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005422:	e009      	b.n	8005438 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005424:	f7fd f814 	bl	8002450 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d902      	bls.n	8005438 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	73fb      	strb	r3, [r7, #15]
          break;
 8005436:	e005      	b.n	8005444 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ef      	beq.n	8005424 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4904      	ldr	r1, [pc, #16]	; (8005464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e049      	b.n	800550e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc fd8e 	bl	8001fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f000 fab4 	bl	8005a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d001      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e04f      	b.n	80055d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a23      	ldr	r2, [pc, #140]	; (80055dc <HAL_TIM_Base_Start_IT+0xc4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x76>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d018      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x76>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x76>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x76>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x76>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x76>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d115      	bne.n	80055ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b06      	cmp	r3, #6
 800559e:	d015      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0xb4>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a6:	d011      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	e008      	b.n	80055cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e000      	b.n	80055ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40013400 	.word	0x40013400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	00010007 	.word	0x00010007

080055f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0202 	mvn.w	r2, #2
 8005624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9cb 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9bd 	bl	80059c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9ce 	bl	80059ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0204 	mvn.w	r2, #4
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9a1 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f993 	bl	80059c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9a4 	bl	80059ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0208 	mvn.w	r2, #8
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2204      	movs	r2, #4
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f977 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f969 	bl	80059c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f97a 	bl	80059ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0210 	mvn.w	r2, #16
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2208      	movs	r2, #8
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f94d 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f93f 	bl	80059c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f950 	bl	80059ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0201 	mvn.w	r2, #1
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc f8d2 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fafc 	bl	8005da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d10e      	bne.n	80057d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d107      	bne.n	80057d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 faef 	bl	8005db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d10e      	bne.n	8005802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d107      	bne.n	8005802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f8fe 	bl	80059fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b20      	cmp	r3, #32
 800580e:	d10e      	bne.n	800582e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b20      	cmp	r3, #32
 800581c:	d107      	bne.n	800582e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0220 	mvn.w	r2, #32
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 faaf 	bl	8005d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_TIM_ConfigClockSource+0x18>
 800584a:	2302      	movs	r3, #2
 800584c:	e0b5      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x184>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005870:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005878:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588a:	d03e      	beq.n	800590a <HAL_TIM_ConfigClockSource+0xd4>
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005890:	f200 8087 	bhi.w	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005898:	f000 8085 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x170>
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a0:	d87f      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058a2:	2b70      	cmp	r3, #112	; 0x70
 80058a4:	d01a      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xa6>
 80058a6:	2b70      	cmp	r3, #112	; 0x70
 80058a8:	d87b      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058aa:	2b60      	cmp	r3, #96	; 0x60
 80058ac:	d050      	beq.n	8005950 <HAL_TIM_ConfigClockSource+0x11a>
 80058ae:	2b60      	cmp	r3, #96	; 0x60
 80058b0:	d877      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058b2:	2b50      	cmp	r3, #80	; 0x50
 80058b4:	d03c      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0xfa>
 80058b6:	2b50      	cmp	r3, #80	; 0x50
 80058b8:	d873      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	d058      	beq.n	8005970 <HAL_TIM_ConfigClockSource+0x13a>
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d86f      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058c2:	2b30      	cmp	r3, #48	; 0x30
 80058c4:	d064      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x15a>
 80058c6:	2b30      	cmp	r3, #48	; 0x30
 80058c8:	d86b      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d060      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x15a>
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d867      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d05c      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x15a>
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d05a      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058da:	e062      	b.n	80059a2 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6899      	ldr	r1, [r3, #8]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f000 f9a6 	bl	8005c3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	609a      	str	r2, [r3, #8]
      break;
 8005908:	e04e      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6899      	ldr	r1, [r3, #8]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f000 f98f 	bl	8005c3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800592c:	609a      	str	r2, [r3, #8]
      break;
 800592e:	e03b      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	461a      	mov	r2, r3
 800593e:	f000 f903 	bl	8005b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2150      	movs	r1, #80	; 0x50
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f95c 	bl	8005c06 <TIM_ITRx_SetConfig>
      break;
 800594e:	e02b      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6859      	ldr	r1, [r3, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	461a      	mov	r2, r3
 800595e:	f000 f922 	bl	8005ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2160      	movs	r1, #96	; 0x60
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f94c 	bl	8005c06 <TIM_ITRx_SetConfig>
      break;
 800596e:	e01b      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6859      	ldr	r1, [r3, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	461a      	mov	r2, r3
 800597e:	f000 f8e3 	bl	8005b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2140      	movs	r1, #64	; 0x40
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f93c 	bl	8005c06 <TIM_ITRx_SetConfig>
      break;
 800598e:	e00b      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 f933 	bl	8005c06 <TIM_ITRx_SetConfig>
        break;
 80059a0:	e002      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80059a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a40      	ldr	r2, [pc, #256]	; (8005b28 <TIM_Base_SetConfig+0x114>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d00f      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a3d      	ldr	r2, [pc, #244]	; (8005b2c <TIM_Base_SetConfig+0x118>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00b      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a3c      	ldr	r2, [pc, #240]	; (8005b30 <TIM_Base_SetConfig+0x11c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d007      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3b      	ldr	r2, [pc, #236]	; (8005b34 <TIM_Base_SetConfig+0x120>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a3a      	ldr	r2, [pc, #232]	; (8005b38 <TIM_Base_SetConfig+0x124>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d108      	bne.n	8005a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a2f      	ldr	r2, [pc, #188]	; (8005b28 <TIM_Base_SetConfig+0x114>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01f      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d01b      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2c      	ldr	r2, [pc, #176]	; (8005b2c <TIM_Base_SetConfig+0x118>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d017      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2b      	ldr	r2, [pc, #172]	; (8005b30 <TIM_Base_SetConfig+0x11c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <TIM_Base_SetConfig+0x120>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <TIM_Base_SetConfig+0x124>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <TIM_Base_SetConfig+0x128>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a27      	ldr	r2, [pc, #156]	; (8005b40 <TIM_Base_SetConfig+0x12c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <TIM_Base_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a26      	ldr	r2, [pc, #152]	; (8005b44 <TIM_Base_SetConfig+0x130>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d108      	bne.n	8005ac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <TIM_Base_SetConfig+0x114>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00f      	beq.n	8005b0c <TIM_Base_SetConfig+0xf8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a12      	ldr	r2, [pc, #72]	; (8005b38 <TIM_Base_SetConfig+0x124>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_Base_SetConfig+0xf8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <TIM_Base_SetConfig+0x128>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_Base_SetConfig+0xf8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a10      	ldr	r2, [pc, #64]	; (8005b40 <TIM_Base_SetConfig+0x12c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_Base_SetConfig+0xf8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <TIM_Base_SetConfig+0x130>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d103      	bne.n	8005b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40013400 	.word	0x40013400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800

08005b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 030a 	bic.w	r3, r3, #10
 8005b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0210 	bic.w	r2, r3, #16
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	031b      	lsls	r3, r3, #12
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f043 0307 	orr.w	r3, r3, #7
 8005c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	609a      	str	r2, [r3, #8]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	021a      	lsls	r2, r3, #8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e068      	b.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2e      	ldr	r2, [pc, #184]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a2d      	ldr	r2, [pc, #180]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01d      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d018      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1a      	ldr	r2, [pc, #104]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10c      	bne.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40014000 	.word	0x40014000

08005d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e040      	b.n	8005e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fc f8fe 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f8c0 	bl	8005f8c <UART_SetConfig>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e022      	b.n	8005e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb3e 	bl	80064a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fbc5 	bl	80065e4 <UART_CheckIdleState>
 8005e5a:	4603      	mov	r3, r0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	; 0x28
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	f040 8082 	bne.w	8005f82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_UART_Transmit+0x26>
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e07a      	b.n	8005f84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Transmit+0x38>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e073      	b.n	8005f84 <HAL_UART_Transmit+0x120>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2221      	movs	r2, #33	; 0x21
 8005eb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eb2:	f7fc facd 	bl	8002450 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_UART_Transmit+0x80>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ef4:	e02d      	b.n	8005f52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fbb8 	bl	8006676 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e039      	b.n	8005f84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f22:	b292      	uxth	r2, r2
 8005f24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	3302      	adds	r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e008      	b.n	8005f40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	b292      	uxth	r2, r2
 8005f38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1cb      	bne.n	8005ef6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fb84 	bl	8006676 <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e005      	b.n	8005f84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e000      	b.n	8005f84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	b5b0      	push	{r4, r5, r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4bad      	ldr	r3, [pc, #692]	; (800626c <UART_SetConfig+0x2e0>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	69f9      	ldr	r1, [r7, #28]
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4aa2      	ldr	r2, [pc, #648]	; (8006270 <UART_SetConfig+0x2e4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	430a      	orrs	r2, r1
 8006006:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a99      	ldr	r2, [pc, #612]	; (8006274 <UART_SetConfig+0x2e8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d121      	bne.n	8006056 <UART_SetConfig+0xca>
 8006012:	4b99      	ldr	r3, [pc, #612]	; (8006278 <UART_SetConfig+0x2ec>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b03      	cmp	r3, #3
 800601e:	d817      	bhi.n	8006050 <UART_SetConfig+0xc4>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x9c>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	08006039 	.word	0x08006039
 800602c:	08006045 	.word	0x08006045
 8006030:	0800603f 	.word	0x0800603f
 8006034:	0800604b 	.word	0x0800604b
 8006038:	2301      	movs	r3, #1
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	e0e7      	b.n	800620e <UART_SetConfig+0x282>
 800603e:	2302      	movs	r3, #2
 8006040:	76fb      	strb	r3, [r7, #27]
 8006042:	e0e4      	b.n	800620e <UART_SetConfig+0x282>
 8006044:	2304      	movs	r3, #4
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e0e1      	b.n	800620e <UART_SetConfig+0x282>
 800604a:	2308      	movs	r3, #8
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e0de      	b.n	800620e <UART_SetConfig+0x282>
 8006050:	2310      	movs	r3, #16
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e0db      	b.n	800620e <UART_SetConfig+0x282>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a88      	ldr	r2, [pc, #544]	; (800627c <UART_SetConfig+0x2f0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d132      	bne.n	80060c6 <UART_SetConfig+0x13a>
 8006060:	4b85      	ldr	r3, [pc, #532]	; (8006278 <UART_SetConfig+0x2ec>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	2b0c      	cmp	r3, #12
 800606c:	d828      	bhi.n	80060c0 <UART_SetConfig+0x134>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0xe8>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060b5 	.word	0x080060b5
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060c1 	.word	0x080060c1
 8006094:	080060af 	.word	0x080060af
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c1 	.word	0x080060c1
 80060a4:	080060bb 	.word	0x080060bb
 80060a8:	2300      	movs	r3, #0
 80060aa:	76fb      	strb	r3, [r7, #27]
 80060ac:	e0af      	b.n	800620e <UART_SetConfig+0x282>
 80060ae:	2302      	movs	r3, #2
 80060b0:	76fb      	strb	r3, [r7, #27]
 80060b2:	e0ac      	b.n	800620e <UART_SetConfig+0x282>
 80060b4:	2304      	movs	r3, #4
 80060b6:	76fb      	strb	r3, [r7, #27]
 80060b8:	e0a9      	b.n	800620e <UART_SetConfig+0x282>
 80060ba:	2308      	movs	r3, #8
 80060bc:	76fb      	strb	r3, [r7, #27]
 80060be:	e0a6      	b.n	800620e <UART_SetConfig+0x282>
 80060c0:	2310      	movs	r3, #16
 80060c2:	76fb      	strb	r3, [r7, #27]
 80060c4:	e0a3      	b.n	800620e <UART_SetConfig+0x282>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6d      	ldr	r2, [pc, #436]	; (8006280 <UART_SetConfig+0x2f4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d120      	bne.n	8006112 <UART_SetConfig+0x186>
 80060d0:	4b69      	ldr	r3, [pc, #420]	; (8006278 <UART_SetConfig+0x2ec>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060da:	2b30      	cmp	r3, #48	; 0x30
 80060dc:	d013      	beq.n	8006106 <UART_SetConfig+0x17a>
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d814      	bhi.n	800610c <UART_SetConfig+0x180>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d009      	beq.n	80060fa <UART_SetConfig+0x16e>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d810      	bhi.n	800610c <UART_SetConfig+0x180>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <UART_SetConfig+0x168>
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d006      	beq.n	8006100 <UART_SetConfig+0x174>
 80060f2:	e00b      	b.n	800610c <UART_SetConfig+0x180>
 80060f4:	2300      	movs	r3, #0
 80060f6:	76fb      	strb	r3, [r7, #27]
 80060f8:	e089      	b.n	800620e <UART_SetConfig+0x282>
 80060fa:	2302      	movs	r3, #2
 80060fc:	76fb      	strb	r3, [r7, #27]
 80060fe:	e086      	b.n	800620e <UART_SetConfig+0x282>
 8006100:	2304      	movs	r3, #4
 8006102:	76fb      	strb	r3, [r7, #27]
 8006104:	e083      	b.n	800620e <UART_SetConfig+0x282>
 8006106:	2308      	movs	r3, #8
 8006108:	76fb      	strb	r3, [r7, #27]
 800610a:	e080      	b.n	800620e <UART_SetConfig+0x282>
 800610c:	2310      	movs	r3, #16
 800610e:	76fb      	strb	r3, [r7, #27]
 8006110:	e07d      	b.n	800620e <UART_SetConfig+0x282>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5b      	ldr	r2, [pc, #364]	; (8006284 <UART_SetConfig+0x2f8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d120      	bne.n	800615e <UART_SetConfig+0x1d2>
 800611c:	4b56      	ldr	r3, [pc, #344]	; (8006278 <UART_SetConfig+0x2ec>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006126:	2bc0      	cmp	r3, #192	; 0xc0
 8006128:	d013      	beq.n	8006152 <UART_SetConfig+0x1c6>
 800612a:	2bc0      	cmp	r3, #192	; 0xc0
 800612c:	d814      	bhi.n	8006158 <UART_SetConfig+0x1cc>
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d009      	beq.n	8006146 <UART_SetConfig+0x1ba>
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d810      	bhi.n	8006158 <UART_SetConfig+0x1cc>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <UART_SetConfig+0x1b4>
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d006      	beq.n	800614c <UART_SetConfig+0x1c0>
 800613e:	e00b      	b.n	8006158 <UART_SetConfig+0x1cc>
 8006140:	2300      	movs	r3, #0
 8006142:	76fb      	strb	r3, [r7, #27]
 8006144:	e063      	b.n	800620e <UART_SetConfig+0x282>
 8006146:	2302      	movs	r3, #2
 8006148:	76fb      	strb	r3, [r7, #27]
 800614a:	e060      	b.n	800620e <UART_SetConfig+0x282>
 800614c:	2304      	movs	r3, #4
 800614e:	76fb      	strb	r3, [r7, #27]
 8006150:	e05d      	b.n	800620e <UART_SetConfig+0x282>
 8006152:	2308      	movs	r3, #8
 8006154:	76fb      	strb	r3, [r7, #27]
 8006156:	e05a      	b.n	800620e <UART_SetConfig+0x282>
 8006158:	2310      	movs	r3, #16
 800615a:	76fb      	strb	r3, [r7, #27]
 800615c:	e057      	b.n	800620e <UART_SetConfig+0x282>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a49      	ldr	r2, [pc, #292]	; (8006288 <UART_SetConfig+0x2fc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d125      	bne.n	80061b4 <UART_SetConfig+0x228>
 8006168:	4b43      	ldr	r3, [pc, #268]	; (8006278 <UART_SetConfig+0x2ec>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006176:	d017      	beq.n	80061a8 <UART_SetConfig+0x21c>
 8006178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617c:	d817      	bhi.n	80061ae <UART_SetConfig+0x222>
 800617e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006182:	d00b      	beq.n	800619c <UART_SetConfig+0x210>
 8006184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006188:	d811      	bhi.n	80061ae <UART_SetConfig+0x222>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <UART_SetConfig+0x20a>
 800618e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006192:	d006      	beq.n	80061a2 <UART_SetConfig+0x216>
 8006194:	e00b      	b.n	80061ae <UART_SetConfig+0x222>
 8006196:	2300      	movs	r3, #0
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e038      	b.n	800620e <UART_SetConfig+0x282>
 800619c:	2302      	movs	r3, #2
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e035      	b.n	800620e <UART_SetConfig+0x282>
 80061a2:	2304      	movs	r3, #4
 80061a4:	76fb      	strb	r3, [r7, #27]
 80061a6:	e032      	b.n	800620e <UART_SetConfig+0x282>
 80061a8:	2308      	movs	r3, #8
 80061aa:	76fb      	strb	r3, [r7, #27]
 80061ac:	e02f      	b.n	800620e <UART_SetConfig+0x282>
 80061ae:	2310      	movs	r3, #16
 80061b0:	76fb      	strb	r3, [r7, #27]
 80061b2:	e02c      	b.n	800620e <UART_SetConfig+0x282>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <UART_SetConfig+0x2e4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d125      	bne.n	800620a <UART_SetConfig+0x27e>
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <UART_SetConfig+0x2ec>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061cc:	d017      	beq.n	80061fe <UART_SetConfig+0x272>
 80061ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d2:	d817      	bhi.n	8006204 <UART_SetConfig+0x278>
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d00b      	beq.n	80061f2 <UART_SetConfig+0x266>
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061de:	d811      	bhi.n	8006204 <UART_SetConfig+0x278>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <UART_SetConfig+0x260>
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d006      	beq.n	80061f8 <UART_SetConfig+0x26c>
 80061ea:	e00b      	b.n	8006204 <UART_SetConfig+0x278>
 80061ec:	2300      	movs	r3, #0
 80061ee:	76fb      	strb	r3, [r7, #27]
 80061f0:	e00d      	b.n	800620e <UART_SetConfig+0x282>
 80061f2:	2302      	movs	r3, #2
 80061f4:	76fb      	strb	r3, [r7, #27]
 80061f6:	e00a      	b.n	800620e <UART_SetConfig+0x282>
 80061f8:	2304      	movs	r3, #4
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e007      	b.n	800620e <UART_SetConfig+0x282>
 80061fe:	2308      	movs	r3, #8
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e004      	b.n	800620e <UART_SetConfig+0x282>
 8006204:	2310      	movs	r3, #16
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e001      	b.n	800620e <UART_SetConfig+0x282>
 800620a:	2310      	movs	r3, #16
 800620c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a17      	ldr	r2, [pc, #92]	; (8006270 <UART_SetConfig+0x2e4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	f040 8087 	bne.w	8006328 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800621a:	7efb      	ldrb	r3, [r7, #27]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d837      	bhi.n	8006290 <UART_SetConfig+0x304>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x29c>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006291 	.word	0x08006291
 8006230:	08006255 	.word	0x08006255
 8006234:	08006291 	.word	0x08006291
 8006238:	0800625b 	.word	0x0800625b
 800623c:	08006291 	.word	0x08006291
 8006240:	08006291 	.word	0x08006291
 8006244:	08006291 	.word	0x08006291
 8006248:	08006263 	.word	0x08006263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fe fb92 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8006250:	6178      	str	r0, [r7, #20]
        break;
 8006252:	e022      	b.n	800629a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <UART_SetConfig+0x300>)
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e01f      	b.n	800629a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fe faf3 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 800625e:	6178      	str	r0, [r7, #20]
        break;
 8006260:	e01b      	b.n	800629a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	617b      	str	r3, [r7, #20]
        break;
 8006268:	e017      	b.n	800629a <UART_SetConfig+0x30e>
 800626a:	bf00      	nop
 800626c:	efff69f3 	.word	0xefff69f3
 8006270:	40008000 	.word	0x40008000
 8006274:	40013800 	.word	0x40013800
 8006278:	40021000 	.word	0x40021000
 800627c:	40004400 	.word	0x40004400
 8006280:	40004800 	.word	0x40004800
 8006284:	40004c00 	.word	0x40004c00
 8006288:	40005000 	.word	0x40005000
 800628c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	76bb      	strb	r3, [r7, #26]
        break;
 8006298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80f1 	beq.w	8006484 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d305      	bcc.n	80062be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d902      	bls.n	80062c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	76bb      	strb	r3, [r7, #26]
 80062c2:	e0df      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	020b      	lsls	r3, r1, #8
 80062d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062da:	0202      	lsls	r2, r0, #8
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	6849      	ldr	r1, [r1, #4]
 80062e0:	0849      	lsrs	r1, r1, #1
 80062e2:	4608      	mov	r0, r1
 80062e4:	f04f 0100 	mov.w	r1, #0
 80062e8:	1814      	adds	r4, r2, r0
 80062ea:	eb43 0501 	adc.w	r5, r3, r1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	4620      	mov	r0, r4
 80062fa:	4629      	mov	r1, r5
 80062fc:	f7fa fc54 	bl	8000ba8 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4613      	mov	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630e:	d308      	bcc.n	8006322 <UART_SetConfig+0x396>
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006316:	d204      	bcs.n	8006322 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	60da      	str	r2, [r3, #12]
 8006320:	e0b0      	b.n	8006484 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	76bb      	strb	r3, [r7, #26]
 8006326:	e0ad      	b.n	8006484 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	d15c      	bne.n	80063ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006332:	7efb      	ldrb	r3, [r7, #27]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d828      	bhi.n	800638a <UART_SetConfig+0x3fe>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x3b4>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fe fb06 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8006368:	6178      	str	r0, [r7, #20]
        break;
 800636a:	e013      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fe fb18 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 8006370:	6178      	str	r0, [r7, #20]
        break;
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b49      	ldr	r3, [pc, #292]	; (800649c <UART_SetConfig+0x510>)
 8006376:	617b      	str	r3, [r7, #20]
        break;
 8006378:	e00c      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fe fa63 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 800637e:	6178      	str	r0, [r7, #20]
        break;
 8006380:	e008      	b.n	8006394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006386:	617b      	str	r3, [r7, #20]
        break;
 8006388:	e004      	b.n	8006394 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	76bb      	strb	r3, [r7, #26]
        break;
 8006392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d074      	beq.n	8006484 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d916      	bls.n	80063e6 <UART_SetConfig+0x45a>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d212      	bcs.n	80063e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	89fb      	ldrh	r3, [r7, #14]
 80063d8:	4313      	orrs	r3, r2
 80063da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	89fa      	ldrh	r2, [r7, #14]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e04e      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	76bb      	strb	r3, [r7, #26]
 80063ea:	e04b      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ec:	7efb      	ldrb	r3, [r7, #27]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d827      	bhi.n	8006442 <UART_SetConfig+0x4b6>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x46c>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fe faaa 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fe fabc 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 8006428:	6178      	str	r0, [r7, #20]
        break;
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <UART_SetConfig+0x510>)
 800642e:	617b      	str	r3, [r7, #20]
        break;
 8006430:	e00c      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fe fa07 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8006436:	6178      	str	r0, [r7, #20]
        break;
 8006438:	e008      	b.n	800644c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	617b      	str	r3, [r7, #20]
        break;
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	76bb      	strb	r3, [r7, #26]
        break;
 800644a:	bf00      	nop
    }

    if (pclk != 0U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085a      	lsrs	r2, r3, #1
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d908      	bls.n	8006480 <UART_SetConfig+0x4f4>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d204      	bcs.n	8006480 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e001      	b.n	8006484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006490:	7ebb      	ldrb	r3, [r7, #26]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bdb0      	pop	{r4, r5, r7, pc}
 800649a:	bf00      	nop
 800649c:	00f42400 	.word	0x00f42400

080064a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659e:	d10a      	bne.n	80065b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f4:	f7fb ff2c 	bl	8002450 <HAL_GetTick>
 80065f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b08      	cmp	r3, #8
 8006606:	d10e      	bne.n	8006626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f82d 	bl	8006676 <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e023      	b.n	800666e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d10e      	bne.n	8006652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f817 	bl	8006676 <UART_WaitOnFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e00d      	b.n	800666e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4613      	mov	r3, r2
 8006684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006686:	e05e      	b.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d05a      	beq.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006690:	f7fb fede 	bl	8002450 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d11b      	bne.n	80066de <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e043      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02c      	beq.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fa:	d124      	bne.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006704:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006714:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e00f      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4013      	ands	r3, r2
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	bf0c      	ite	eq
 8006756:	2301      	moveq	r3, #1
 8006758:	2300      	movne	r3, #0
 800675a:	b2db      	uxtb	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	429a      	cmp	r2, r3
 8006762:	d091      	beq.n	8006688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800677c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006780:	2b84      	cmp	r3, #132	; 0x84
 8006782:	d005      	beq.n	8006790 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006784:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	3303      	adds	r3, #3
 800678e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006790:	68fb      	ldr	r3, [r7, #12]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067a2:	f000 fadf 	bl	8006d64 <vTaskStartScheduler>
  
  return osOK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd80      	pop	{r7, pc}

080067ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af04      	add	r7, sp, #16
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d020      	beq.n	8006800 <osThreadCreate+0x54>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01c      	beq.n	8006800 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685c      	ldr	r4, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681d      	ldr	r5, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691e      	ldr	r6, [r3, #16]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff ffc8 	bl	800676e <makeFreeRtosPriority>
 80067de:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	9100      	str	r1, [sp, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	4632      	mov	r2, r6
 80067f2:	4629      	mov	r1, r5
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f8ed 	bl	80069d4 <xTaskCreateStatic>
 80067fa:	4603      	mov	r3, r0
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	e01c      	b.n	800683a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685c      	ldr	r4, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800680c:	b29e      	uxth	r6, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ffaa 	bl	800676e <makeFreeRtosPriority>
 800681a:	4602      	mov	r2, r0
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	9200      	str	r2, [sp, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	4632      	mov	r2, r6
 8006828:	4629      	mov	r1, r5
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f92f 	bl	8006a8e <xTaskCreate>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d001      	beq.n	800683a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	e000      	b.n	800683c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006844 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <osDelay+0x16>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	e000      	b.n	800685c <osDelay+0x18>
 800685a:	2301      	movs	r3, #1
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fa4d 	bl	8006cfc <vTaskDelay>
  
  return osOK;
 8006862:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f103 0208 	add.w	r2, r3, #8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f103 0208 	add.w	r2, r3, #8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f103 0208 	add.w	r2, r3, #8
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	601a      	str	r2, [r3, #0]
}
 8006902:	bf00      	nop
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d103      	bne.n	800692e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e00c      	b.n	8006948 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3308      	adds	r3, #8
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e002      	b.n	800693c <vListInsert+0x2e>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	429a      	cmp	r2, r3
 8006946:	d2f6      	bcs.n	8006936 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6892      	ldr	r2, [r2, #8]
 8006996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6852      	ldr	r2, [r2, #4]
 80069a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d103      	bne.n	80069b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	1e5a      	subs	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08e      	sub	sp, #56	; 0x38
 80069d8:	af04      	add	r7, sp, #16
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xTaskCreateStatic+0x46>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	61fb      	str	r3, [r7, #28]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a1a:	2354      	movs	r3, #84	; 0x54
 8006a1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b54      	cmp	r3, #84	; 0x54
 8006a22:	d00a      	beq.n	8006a3a <xTaskCreateStatic+0x66>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	61bb      	str	r3, [r7, #24]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01e      	beq.n	8006a80 <xTaskCreateStatic+0xac>
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	9302      	str	r3, [sp, #8]
 8006a62:	f107 0314 	add.w	r3, r7, #20
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f850 	bl	8006b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a7a:	f000 f8d5 	bl	8006c28 <prvAddNewTaskToReadyList>
 8006a7e:	e001      	b.n	8006a84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a84:	697b      	ldr	r3, [r7, #20]
	}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3728      	adds	r7, #40	; 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b08c      	sub	sp, #48	; 0x30
 8006a92:	af04      	add	r7, sp, #16
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fec8 	bl	8007838 <pvPortMalloc>
 8006aa8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ab0:	2054      	movs	r0, #84	; 0x54
 8006ab2:	f000 fec1 	bl	8007838 <pvPortMalloc>
 8006ab6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac4:	e005      	b.n	8006ad2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f000 ff82 	bl	80079d0 <vPortFree>
 8006acc:	e001      	b.n	8006ad2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d017      	beq.n	8006b08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9303      	str	r3, [sp, #12]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f80e 	bl	8006b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006afc:	69f8      	ldr	r0, [r7, #28]
 8006afe:	f000 f893 	bl	8006c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b02:	2301      	movs	r3, #1
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e002      	b.n	8006b0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b30:	3b01      	subs	r3, #1
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	617b      	str	r3, [r7, #20]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01f      	beq.n	8006ba6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b66:	2300      	movs	r3, #0
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	e012      	b.n	8006b92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	7819      	ldrb	r1, [r3, #0]
 8006b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3334      	adds	r3, #52	; 0x34
 8006b7c:	460a      	mov	r2, r1
 8006b7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b0f      	cmp	r3, #15
 8006b96:	d9e9      	bls.n	8006b6c <prvInitialiseNewTask+0x54>
 8006b98:	e000      	b.n	8006b9c <prvInitialiseNewTask+0x84>
			{
				break;
 8006b9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba4:	e003      	b.n	8006bae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	2b06      	cmp	r3, #6
 8006bb2:	d901      	bls.n	8006bb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bb4:	2306      	movs	r3, #6
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fe6c 	bl	80068ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fe67 	bl	80068ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f1c3 0207 	rsb	r2, r3, #7
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	69b8      	ldr	r0, [r7, #24]
 8006c08:	f000 fc06 	bl	8007418 <pxPortInitialiseStack>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c1e:	bf00      	nop
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c30:	f000 fd20 	bl	8007674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c34:	4b2a      	ldr	r3, [pc, #168]	; (8006ce0 <prvAddNewTaskToReadyList+0xb8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <prvAddNewTaskToReadyList+0xb8>)
 8006c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c3e:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c46:	4a27      	ldr	r2, [pc, #156]	; (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c4c:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <prvAddNewTaskToReadyList+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d110      	bne.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c54:	f000 fabc 	bl	80071d0 <prvInitialiseTaskLists>
 8006c58:	e00d      	b.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <prvAddNewTaskToReadyList+0xc0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c62:	4b20      	ldr	r3, [pc, #128]	; (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d802      	bhi.n	8006c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c70:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c76:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <prvAddNewTaskToReadyList+0xc4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <prvAddNewTaskToReadyList+0xc4>)
 8006c7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	2201      	movs	r2, #1
 8006c86:	409a      	lsls	r2, r3
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <prvAddNewTaskToReadyList+0xc8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <prvAddNewTaskToReadyList+0xc8>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <prvAddNewTaskToReadyList+0xcc>)
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7ff fe0c 	bl	80068c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cae:	f000 fd11 	bl	80076d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <prvAddNewTaskToReadyList+0xc0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <prvAddNewTaskToReadyList+0xbc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d207      	bcs.n	8006cd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <prvAddNewTaskToReadyList+0xd0>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	200005dc 	.word	0x200005dc
 8006ce4:	200004dc 	.word	0x200004dc
 8006ce8:	200005e8 	.word	0x200005e8
 8006cec:	200005f8 	.word	0x200005f8
 8006cf0:	200005e4 	.word	0x200005e4
 8006cf4:	200004e0 	.word	0x200004e0
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d017      	beq.n	8006d3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <vTaskDelay+0x60>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <vTaskDelay+0x30>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60bb      	str	r3, [r7, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d2c:	f000 f87a 	bl	8006e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d30:	2100      	movs	r1, #0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fb0a 	bl	800734c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d38:	f000 f882 	bl	8006e40 <xTaskResumeAll>
 8006d3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <vTaskDelay+0x64>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000604 	.word	0x20000604
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	; 0x28
 8006d68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d72:	463a      	mov	r2, r7
 8006d74:	1d39      	adds	r1, r7, #4
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fa f9ac 	bl	80010d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	9202      	str	r2, [sp, #8]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	460a      	mov	r2, r1
 8006d92:	491e      	ldr	r1, [pc, #120]	; (8006e0c <vTaskStartScheduler+0xa8>)
 8006d94:	481e      	ldr	r0, [pc, #120]	; (8006e10 <vTaskStartScheduler+0xac>)
 8006d96:	f7ff fe1d 	bl	80069d4 <xTaskCreateStatic>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <vTaskStartScheduler+0xb0>)
 8006d9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006da0:	4b1c      	ldr	r3, [pc, #112]	; (8006e14 <vTaskStartScheduler+0xb0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006da8:	2301      	movs	r3, #1
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e001      	b.n	8006db2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d116      	bne.n	8006de6 <vTaskStartScheduler+0x82>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	613b      	str	r3, [r7, #16]
}
 8006dca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dcc:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <vTaskStartScheduler+0xb4>)
 8006dce:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <vTaskStartScheduler+0xb8>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <vTaskStartScheduler+0xbc>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006de0:	f000 fba6 	bl	8007530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006de4:	e00e      	b.n	8006e04 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d10a      	bne.n	8006e04 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60fb      	str	r3, [r7, #12]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <vTaskStartScheduler+0x9e>
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	0800aa90 	.word	0x0800aa90
 8006e10:	080071a1 	.word	0x080071a1
 8006e14:	20000600 	.word	0x20000600
 8006e18:	200005fc 	.word	0x200005fc
 8006e1c:	200005e8 	.word	0x200005e8
 8006e20:	200005e0 	.word	0x200005e0

08006e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <vTaskSuspendAll+0x18>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	4a03      	ldr	r2, [pc, #12]	; (8006e3c <vTaskSuspendAll+0x18>)
 8006e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e32:	bf00      	nop
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000604 	.word	0x20000604

08006e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <xTaskResumeAll+0x114>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	603b      	str	r3, [r7, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e6c:	f000 fc02 	bl	8007674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e70:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <xTaskResumeAll+0x114>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	4a37      	ldr	r2, [pc, #220]	; (8006f54 <xTaskResumeAll+0x114>)
 8006e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e7a:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <xTaskResumeAll+0x114>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d161      	bne.n	8006f46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e82:	4b35      	ldr	r3, [pc, #212]	; (8006f58 <xTaskResumeAll+0x118>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d05d      	beq.n	8006f46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e8a:	e02e      	b.n	8006eea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8c:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <xTaskResumeAll+0x11c>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3318      	adds	r3, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff fd71 	bl	8006980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fd6c 	bl	8006980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	2201      	movs	r2, #1
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <xTaskResumeAll+0x120>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	4a2a      	ldr	r2, [pc, #168]	; (8006f60 <xTaskResumeAll+0x120>)
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4a27      	ldr	r2, [pc, #156]	; (8006f64 <xTaskResumeAll+0x124>)
 8006ec8:	441a      	add	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f7ff fcf8 	bl	80068c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	4b23      	ldr	r3, [pc, #140]	; (8006f68 <xTaskResumeAll+0x128>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ee4:	4b21      	ldr	r3, [pc, #132]	; (8006f6c <xTaskResumeAll+0x12c>)
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <xTaskResumeAll+0x11c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1cc      	bne.n	8006e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ef8:	f000 fa08 	bl	800730c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <xTaskResumeAll+0x130>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f08:	f000 f836 	bl	8006f78 <xTaskIncrementTick>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f12:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <xTaskResumeAll+0x12c>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f1      	bne.n	8006f08 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f24:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <xTaskResumeAll+0x130>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f2a:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <xTaskResumeAll+0x12c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f32:	2301      	movs	r3, #1
 8006f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <xTaskResumeAll+0x134>)
 8006f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f000 fbc5 	bl	80076d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000604 	.word	0x20000604
 8006f58:	200005dc 	.word	0x200005dc
 8006f5c:	2000059c 	.word	0x2000059c
 8006f60:	200005e4 	.word	0x200005e4
 8006f64:	200004e0 	.word	0x200004e0
 8006f68:	200004dc 	.word	0x200004dc
 8006f6c:	200005f0 	.word	0x200005f0
 8006f70:	200005ec 	.word	0x200005ec
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f82:	4b4e      	ldr	r3, [pc, #312]	; (80070bc <xTaskIncrementTick+0x144>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 808e 	bne.w	80070a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f8c:	4b4c      	ldr	r3, [pc, #304]	; (80070c0 <xTaskIncrementTick+0x148>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f94:	4a4a      	ldr	r2, [pc, #296]	; (80070c0 <xTaskIncrementTick+0x148>)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d120      	bne.n	8006fe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fa0:	4b48      	ldr	r3, [pc, #288]	; (80070c4 <xTaskIncrementTick+0x14c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	603b      	str	r3, [r7, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xTaskIncrementTick+0x46>
 8006fc0:	4b40      	ldr	r3, [pc, #256]	; (80070c4 <xTaskIncrementTick+0x14c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	4b40      	ldr	r3, [pc, #256]	; (80070c8 <xTaskIncrementTick+0x150>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3e      	ldr	r2, [pc, #248]	; (80070c4 <xTaskIncrementTick+0x14c>)
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4a3e      	ldr	r2, [pc, #248]	; (80070c8 <xTaskIncrementTick+0x150>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b3d      	ldr	r3, [pc, #244]	; (80070cc <xTaskIncrementTick+0x154>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	4a3c      	ldr	r2, [pc, #240]	; (80070cc <xTaskIncrementTick+0x154>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	f000 f995 	bl	800730c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fe2:	4b3b      	ldr	r3, [pc, #236]	; (80070d0 <xTaskIncrementTick+0x158>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d348      	bcc.n	800707e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <xTaskIncrementTick+0x14c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <xTaskIncrementTick+0x158>)
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	601a      	str	r2, [r3, #0]
					break;
 8006ffe:	e03e      	b.n	800707e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007000:	4b30      	ldr	r3, [pc, #192]	; (80070c4 <xTaskIncrementTick+0x14c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d203      	bcs.n	8007020 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007018:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <xTaskIncrementTick+0x158>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800701e:	e02e      	b.n	800707e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fcab 	bl	8006980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3318      	adds	r3, #24
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fca2 	bl	8006980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	2201      	movs	r2, #1
 8007042:	409a      	lsls	r2, r3
 8007044:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <xTaskIncrementTick+0x15c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4313      	orrs	r3, r2
 800704a:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <xTaskIncrementTick+0x15c>)
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <xTaskIncrementTick+0x160>)
 800705c:	441a      	add	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	3304      	adds	r3, #4
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f7ff fc2e 	bl	80068c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <xTaskIncrementTick+0x164>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	429a      	cmp	r2, r3
 8007076:	d3b9      	bcc.n	8006fec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707c:	e7b6      	b.n	8006fec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800707e:	4b17      	ldr	r3, [pc, #92]	; (80070dc <xTaskIncrementTick+0x164>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	4914      	ldr	r1, [pc, #80]	; (80070d8 <xTaskIncrementTick+0x160>)
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d901      	bls.n	800709a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007096:	2301      	movs	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800709a:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <xTaskIncrementTick+0x168>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	e004      	b.n	80070b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070a8:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <xTaskIncrementTick+0x16c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	4a0d      	ldr	r2, [pc, #52]	; (80070e4 <xTaskIncrementTick+0x16c>)
 80070b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070b2:	697b      	ldr	r3, [r7, #20]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000604 	.word	0x20000604
 80070c0:	200005e0 	.word	0x200005e0
 80070c4:	20000594 	.word	0x20000594
 80070c8:	20000598 	.word	0x20000598
 80070cc:	200005f4 	.word	0x200005f4
 80070d0:	200005fc 	.word	0x200005fc
 80070d4:	200005e4 	.word	0x200005e4
 80070d8:	200004e0 	.word	0x200004e0
 80070dc:	200004dc 	.word	0x200004dc
 80070e0:	200005f0 	.word	0x200005f0
 80070e4:	200005ec 	.word	0x200005ec

080070e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070ee:	4b27      	ldr	r3, [pc, #156]	; (800718c <vTaskSwitchContext+0xa4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070f6:	4b26      	ldr	r3, [pc, #152]	; (8007190 <vTaskSwitchContext+0xa8>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070fc:	e03f      	b.n	800717e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <vTaskSwitchContext+0xa8>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007104:	4b23      	ldr	r3, [pc, #140]	; (8007194 <vTaskSwitchContext+0xac>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	fab3 f383 	clz	r3, r3
 8007110:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	f1c3 031f 	rsb	r3, r3, #31
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	491f      	ldr	r1, [pc, #124]	; (8007198 <vTaskSwitchContext+0xb0>)
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <vTaskSwitchContext+0x5c>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vTaskSwitchContext+0x5a>
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4a12      	ldr	r2, [pc, #72]	; (8007198 <vTaskSwitchContext+0xb0>)
 8007150:	4413      	add	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3308      	adds	r3, #8
 8007166:	429a      	cmp	r2, r3
 8007168:	d104      	bne.n	8007174 <vTaskSwitchContext+0x8c>
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	4a08      	ldr	r2, [pc, #32]	; (800719c <vTaskSwitchContext+0xb4>)
 800717c:	6013      	str	r3, [r2, #0]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000604 	.word	0x20000604
 8007190:	200005f0 	.word	0x200005f0
 8007194:	200005e4 	.word	0x200005e4
 8007198:	200004e0 	.word	0x200004e0
 800719c:	200004dc 	.word	0x200004dc

080071a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071a8:	f000 f852 	bl	8007250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <prvIdleTask+0x28>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d9f9      	bls.n	80071a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <prvIdleTask+0x2c>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071c4:	e7f0      	b.n	80071a8 <prvIdleTask+0x8>
 80071c6:	bf00      	nop
 80071c8:	200004e0 	.word	0x200004e0
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	e00c      	b.n	80071f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a12      	ldr	r2, [pc, #72]	; (8007230 <prvInitialiseTaskLists+0x60>)
 80071e8:	4413      	add	r3, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fb3e 	bl	800686c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3301      	adds	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b06      	cmp	r3, #6
 80071fa:	d9ef      	bls.n	80071dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071fc:	480d      	ldr	r0, [pc, #52]	; (8007234 <prvInitialiseTaskLists+0x64>)
 80071fe:	f7ff fb35 	bl	800686c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007202:	480d      	ldr	r0, [pc, #52]	; (8007238 <prvInitialiseTaskLists+0x68>)
 8007204:	f7ff fb32 	bl	800686c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007208:	480c      	ldr	r0, [pc, #48]	; (800723c <prvInitialiseTaskLists+0x6c>)
 800720a:	f7ff fb2f 	bl	800686c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800720e:	480c      	ldr	r0, [pc, #48]	; (8007240 <prvInitialiseTaskLists+0x70>)
 8007210:	f7ff fb2c 	bl	800686c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007214:	480b      	ldr	r0, [pc, #44]	; (8007244 <prvInitialiseTaskLists+0x74>)
 8007216:	f7ff fb29 	bl	800686c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800721a:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <prvInitialiseTaskLists+0x78>)
 800721c:	4a05      	ldr	r2, [pc, #20]	; (8007234 <prvInitialiseTaskLists+0x64>)
 800721e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007220:	4b0a      	ldr	r3, [pc, #40]	; (800724c <prvInitialiseTaskLists+0x7c>)
 8007222:	4a05      	ldr	r2, [pc, #20]	; (8007238 <prvInitialiseTaskLists+0x68>)
 8007224:	601a      	str	r2, [r3, #0]
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200004e0 	.word	0x200004e0
 8007234:	2000056c 	.word	0x2000056c
 8007238:	20000580 	.word	0x20000580
 800723c:	2000059c 	.word	0x2000059c
 8007240:	200005b0 	.word	0x200005b0
 8007244:	200005c8 	.word	0x200005c8
 8007248:	20000594 	.word	0x20000594
 800724c:	20000598 	.word	0x20000598

08007250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007256:	e019      	b.n	800728c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007258:	f000 fa0c 	bl	8007674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <prvCheckTasksWaitingTermination+0x50>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fb89 	bl	8006980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3b01      	subs	r3, #1
 8007274:	4a0b      	ldr	r2, [pc, #44]	; (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a0a      	ldr	r2, [pc, #40]	; (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 8007280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007282:	f000 fa27 	bl	80076d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f810 	bl	80072ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e1      	bne.n	8007258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200005b0 	.word	0x200005b0
 80072a4:	200005dc 	.word	0x200005dc
 80072a8:	200005c4 	.word	0x200005c4

080072ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d108      	bne.n	80072d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fb84 	bl	80079d0 <vPortFree>
				vPortFree( pxTCB );
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb81 	bl	80079d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072ce:	e018      	b.n	8007302 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d103      	bne.n	80072e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fb78 	bl	80079d0 <vPortFree>
	}
 80072e0:	e00f      	b.n	8007302 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d00a      	beq.n	8007302 <prvDeleteTCB+0x56>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60fb      	str	r3, [r7, #12]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <prvDeleteTCB+0x54>
	}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <prvResetNextTaskUnblockTime+0x38>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <prvResetNextTaskUnblockTime+0x3c>)
 800731e:	f04f 32ff 	mov.w	r2, #4294967295
 8007322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007324:	e008      	b.n	8007338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <prvResetNextTaskUnblockTime+0x38>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	4a04      	ldr	r2, [pc, #16]	; (8007348 <prvResetNextTaskUnblockTime+0x3c>)
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	20000594 	.word	0x20000594
 8007348:	200005fc 	.word	0x200005fc

0800734c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007356:	4b29      	ldr	r3, [pc, #164]	; (80073fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800735c:	4b28      	ldr	r3, [pc, #160]	; (8007400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3304      	adds	r3, #4
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fb0c 	bl	8006980 <uxListRemove>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	2201      	movs	r2, #1
 8007376:	fa02 f303 	lsl.w	r3, r2, r3
 800737a:	43da      	mvns	r2, r3
 800737c:	4b21      	ldr	r3, [pc, #132]	; (8007404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4013      	ands	r3, r2
 8007382:	4a20      	ldr	r2, [pc, #128]	; (8007404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d10a      	bne.n	80073a4 <prvAddCurrentTaskToDelayedList+0x58>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007394:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	481a      	ldr	r0, [pc, #104]	; (8007408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800739e:	f7ff fa92 	bl	80068c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073a2:	e026      	b.n	80073f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d209      	bcs.n	80073d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073bc:	4b13      	ldr	r3, [pc, #76]	; (800740c <prvAddCurrentTaskToDelayedList+0xc0>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7ff faa0 	bl	800690e <vListInsert>
}
 80073ce:	e010      	b.n	80073f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d0:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7ff fa96 	bl	800690e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d202      	bcs.n	80073f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073ec:	4a09      	ldr	r2, [pc, #36]	; (8007414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6013      	str	r3, [r2, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200005e0 	.word	0x200005e0
 8007400:	200004dc 	.word	0x200004dc
 8007404:	200005e4 	.word	0x200005e4
 8007408:	200005c8 	.word	0x200005c8
 800740c:	20000598 	.word	0x20000598
 8007410:	20000594 	.word	0x20000594
 8007414:	200005fc 	.word	0x200005fc

08007418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b04      	subs	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 0201 	bic.w	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007448:	4a0c      	ldr	r2, [pc, #48]	; (800747c <pxPortInitialiseStack+0x64>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b14      	subs	r3, #20
 8007452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b04      	subs	r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f06f 0202 	mvn.w	r2, #2
 8007466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3b20      	subs	r3, #32
 800746c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	08007481 	.word	0x08007481

08007480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800748a:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <prvTaskExitError+0x54>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d00a      	beq.n	80074aa <prvTaskExitError+0x2a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	60fb      	str	r3, [r7, #12]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <prvTaskExitError+0x28>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	60bb      	str	r3, [r7, #8]
}
 80074bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074be:	bf00      	nop
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0fc      	beq.n	80074c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	20000050 	.word	0x20000050
	...

080074e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <pxCurrentTCBConst2>)
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	6808      	ldr	r0, [r1, #0]
 80074e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	f380 8809 	msr	PSP, r0
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8811 	msr	BASEPRI, r0
 80074fa:	4770      	bx	lr
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst2>:
 8007500:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007508:	4808      	ldr	r0, [pc, #32]	; (800752c <prvPortStartFirstTask+0x24>)
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f380 8808 	msr	MSP, r0
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8814 	msr	CONTROL, r0
 800751a:	b662      	cpsie	i
 800751c:	b661      	cpsie	f
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	df00      	svc	0
 8007528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800752a:	bf00      	nop
 800752c:	e000ed08 	.word	0xe000ed08

08007530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007536:	4b46      	ldr	r3, [pc, #280]	; (8007650 <xPortStartScheduler+0x120>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a46      	ldr	r2, [pc, #280]	; (8007654 <xPortStartScheduler+0x124>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10a      	bne.n	8007556 <xPortStartScheduler+0x26>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	613b      	str	r3, [r7, #16]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007556:	4b3e      	ldr	r3, [pc, #248]	; (8007650 <xPortStartScheduler+0x120>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a3f      	ldr	r2, [pc, #252]	; (8007658 <xPortStartScheduler+0x128>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d10a      	bne.n	8007576 <xPortStartScheduler+0x46>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007576:	4b39      	ldr	r3, [pc, #228]	; (800765c <xPortStartScheduler+0x12c>)
 8007578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007598:	b2da      	uxtb	r2, r3
 800759a:	4b31      	ldr	r3, [pc, #196]	; (8007660 <xPortStartScheduler+0x130>)
 800759c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <xPortStartScheduler+0x134>)
 80075a0:	2207      	movs	r2, #7
 80075a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075a4:	e009      	b.n	80075ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075a6:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <xPortStartScheduler+0x134>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <xPortStartScheduler+0x134>)
 80075ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b80      	cmp	r3, #128	; 0x80
 80075c4:	d0ef      	beq.n	80075a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075c6:	4b27      	ldr	r3, [pc, #156]	; (8007664 <xPortStartScheduler+0x134>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1c3 0307 	rsb	r3, r3, #7
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d00a      	beq.n	80075e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60bb      	str	r3, [r7, #8]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075e8:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <xPortStartScheduler+0x134>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <xPortStartScheduler+0x134>)
 80075f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <xPortStartScheduler+0x134>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075fa:	4a1a      	ldr	r2, [pc, #104]	; (8007664 <xPortStartScheduler+0x134>)
 80075fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	b2da      	uxtb	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007606:	4b18      	ldr	r3, [pc, #96]	; (8007668 <xPortStartScheduler+0x138>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <xPortStartScheduler+0x138>)
 800760c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <xPortStartScheduler+0x138>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a14      	ldr	r2, [pc, #80]	; (8007668 <xPortStartScheduler+0x138>)
 8007618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800761c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800761e:	f000 f8dd 	bl	80077dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <xPortStartScheduler+0x13c>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007628:	f000 f8fc 	bl	8007824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800762c:	4b10      	ldr	r3, [pc, #64]	; (8007670 <xPortStartScheduler+0x140>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0f      	ldr	r2, [pc, #60]	; (8007670 <xPortStartScheduler+0x140>)
 8007632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007638:	f7ff ff66 	bl	8007508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800763c:	f7ff fd54 	bl	80070e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007640:	f7ff ff1e 	bl	8007480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	e000ed00 	.word	0xe000ed00
 8007654:	410fc271 	.word	0x410fc271
 8007658:	410fc270 	.word	0x410fc270
 800765c:	e000e400 	.word	0xe000e400
 8007660:	20000608 	.word	0x20000608
 8007664:	2000060c 	.word	0x2000060c
 8007668:	e000ed20 	.word	0xe000ed20
 800766c:	20000050 	.word	0x20000050
 8007670:	e000ef34 	.word	0xe000ef34

08007674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	607b      	str	r3, [r7, #4]
}
 800768c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800768e:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <vPortEnterCritical+0x58>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3301      	adds	r3, #1
 8007694:	4a0d      	ldr	r2, [pc, #52]	; (80076cc <vPortEnterCritical+0x58>)
 8007696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007698:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <vPortEnterCritical+0x58>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10f      	bne.n	80076c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <vPortEnterCritical+0x5c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	603b      	str	r3, [r7, #0]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <vPortEnterCritical+0x4a>
	}
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20000050 	.word	0x20000050
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <vPortExitCritical+0x50>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <vPortExitCritical+0x24>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	607b      	str	r3, [r7, #4]
}
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <vPortExitCritical+0x50>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4a09      	ldr	r2, [pc, #36]	; (8007724 <vPortExitCritical+0x50>)
 8007700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007702:	4b08      	ldr	r3, [pc, #32]	; (8007724 <vPortExitCritical+0x50>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d105      	bne.n	8007716 <vPortExitCritical+0x42>
 800770a:	2300      	movs	r3, #0
 800770c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000050 	.word	0x20000050
	...

08007730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007730:	f3ef 8009 	mrs	r0, PSP
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	4b15      	ldr	r3, [pc, #84]	; (8007790 <pxCurrentTCBConst>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	f01e 0f10 	tst.w	lr, #16
 8007740:	bf08      	it	eq
 8007742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	6010      	str	r0, [r2, #0]
 800774c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007754:	f380 8811 	msr	BASEPRI, r0
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f7ff fcc2 	bl	80070e8 <vTaskSwitchContext>
 8007764:	f04f 0000 	mov.w	r0, #0
 8007768:	f380 8811 	msr	BASEPRI, r0
 800776c:	bc09      	pop	{r0, r3}
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	6808      	ldr	r0, [r1, #0]
 8007772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007776:	f01e 0f10 	tst.w	lr, #16
 800777a:	bf08      	it	eq
 800777c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007780:	f380 8809 	msr	PSP, r0
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst>:
 8007790:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	607b      	str	r3, [r7, #4]
}
 80077b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077b2:	f7ff fbe1 	bl	8006f78 <xTaskIncrementTick>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <SysTick_Handler+0x40>)
 80077be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f383 8811 	msr	BASEPRI, r3
}
 80077ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <vPortSetupTimerInterrupt+0x34>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077e6:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <vPortSetupTimerInterrupt+0x38>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ec:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <vPortSetupTimerInterrupt+0x3c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a0a      	ldr	r2, [pc, #40]	; (800781c <vPortSetupTimerInterrupt+0x40>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	099b      	lsrs	r3, r3, #6
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <vPortSetupTimerInterrupt+0x44>)
 80077fa:	3b01      	subs	r3, #1
 80077fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077fe:	4b04      	ldr	r3, [pc, #16]	; (8007810 <vPortSetupTimerInterrupt+0x34>)
 8007800:	2207      	movs	r2, #7
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	e000e010 	.word	0xe000e010
 8007814:	e000e018 	.word	0xe000e018
 8007818:	20000044 	.word	0x20000044
 800781c:	10624dd3 	.word	0x10624dd3
 8007820:	e000e014 	.word	0xe000e014

08007824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007834 <vPortEnableVFP+0x10>
 8007828:	6801      	ldr	r1, [r0, #0]
 800782a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800782e:	6001      	str	r1, [r0, #0]
 8007830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007832:	bf00      	nop
 8007834:	e000ed88 	.word	0xe000ed88

08007838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007844:	f7ff faee 	bl	8006e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007848:	4b5b      	ldr	r3, [pc, #364]	; (80079b8 <pvPortMalloc+0x180>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007850:	f000 f920 	bl	8007a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007854:	4b59      	ldr	r3, [pc, #356]	; (80079bc <pvPortMalloc+0x184>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 8093 	bne.w	8007988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01d      	beq.n	80078a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007868:	2208      	movs	r2, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4413      	add	r3, r2
 800786e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f023 0307 	bic.w	r3, r3, #7
 8007880:	3308      	adds	r3, #8
 8007882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <pvPortMalloc+0x6c>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d06e      	beq.n	8007988 <pvPortMalloc+0x150>
 80078aa:	4b45      	ldr	r3, [pc, #276]	; (80079c0 <pvPortMalloc+0x188>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d869      	bhi.n	8007988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078b4:	4b43      	ldr	r3, [pc, #268]	; (80079c4 <pvPortMalloc+0x18c>)
 80078b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078b8:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <pvPortMalloc+0x18c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078be:	e004      	b.n	80078ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d903      	bls.n	80078dc <pvPortMalloc+0xa4>
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1f1      	bne.n	80078c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078dc:	4b36      	ldr	r3, [pc, #216]	; (80079b8 <pvPortMalloc+0x180>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d050      	beq.n	8007988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2208      	movs	r2, #8
 80078ec:	4413      	add	r3, r2
 80078ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	2308      	movs	r3, #8
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	429a      	cmp	r2, r3
 8007906:	d91f      	bls.n	8007948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <pvPortMalloc+0xf8>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	613b      	str	r3, [r7, #16]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007942:	69b8      	ldr	r0, [r7, #24]
 8007944:	f000 f908 	bl	8007b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007948:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <pvPortMalloc+0x188>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <pvPortMalloc+0x188>)
 8007954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <pvPortMalloc+0x188>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <pvPortMalloc+0x190>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d203      	bcs.n	800796a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <pvPortMalloc+0x188>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <pvPortMalloc+0x190>)
 8007968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	4b13      	ldr	r3, [pc, #76]	; (80079bc <pvPortMalloc+0x184>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	431a      	orrs	r2, r3
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <pvPortMalloc+0x194>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a11      	ldr	r2, [pc, #68]	; (80079cc <pvPortMalloc+0x194>)
 8007986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007988:	f7ff fa5a 	bl	8006e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <pvPortMalloc+0x174>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60fb      	str	r3, [r7, #12]
}
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <pvPortMalloc+0x172>
	return pvReturn;
 80079ac:	69fb      	ldr	r3, [r7, #28]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3728      	adds	r7, #40	; 0x28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	200011d0 	.word	0x200011d0
 80079bc:	200011e4 	.word	0x200011e4
 80079c0:	200011d4 	.word	0x200011d4
 80079c4:	200011c8 	.word	0x200011c8
 80079c8:	200011d8 	.word	0x200011d8
 80079cc:	200011dc 	.word	0x200011dc

080079d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d04d      	beq.n	8007a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079e2:	2308      	movs	r3, #8
 80079e4:	425b      	negs	r3, r3
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <vPortFree+0xb8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <vPortFree+0x44>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60fb      	str	r3, [r7, #12]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <vPortFree+0x62>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60bb      	str	r3, [r7, #8]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <vPortFree+0xb8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01e      	beq.n	8007a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11a      	bne.n	8007a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <vPortFree+0xb8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	401a      	ands	r2, r3
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a58:	f7ff f9e4 	bl	8006e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <vPortFree+0xbc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4413      	add	r3, r2
 8007a66:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <vPortFree+0xbc>)
 8007a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a6a:	6938      	ldr	r0, [r7, #16]
 8007a6c:	f000 f874 	bl	8007b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <vPortFree+0xc0>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	4a06      	ldr	r2, [pc, #24]	; (8007a90 <vPortFree+0xc0>)
 8007a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a7a:	f7ff f9e1 	bl	8006e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a7e:	bf00      	nop
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200011e4 	.word	0x200011e4
 8007a8c:	200011d4 	.word	0x200011d4
 8007a90:	200011e0 	.word	0x200011e0

08007a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007aa0:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <prvHeapInit+0xac>)
 8007aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3307      	adds	r3, #7
 8007ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0307 	bic.w	r3, r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	4a1f      	ldr	r2, [pc, #124]	; (8007b40 <prvHeapInit+0xac>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007acc:	4a1d      	ldr	r2, [pc, #116]	; (8007b44 <prvHeapInit+0xb0>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <prvHeapInit+0xb0>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <prvHeapInit+0xb4>)
 8007af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <prvHeapInit+0xb4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <prvHeapInit+0xb4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <prvHeapInit+0xb4>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <prvHeapInit+0xb8>)
 8007b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <prvHeapInit+0xbc>)
 8007b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <prvHeapInit+0xc0>)
 8007b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	20000610 	.word	0x20000610
 8007b44:	200011c8 	.word	0x200011c8
 8007b48:	200011d0 	.word	0x200011d0
 8007b4c:	200011d8 	.word	0x200011d8
 8007b50:	200011d4 	.word	0x200011d4
 8007b54:	200011e4 	.word	0x200011e4

08007b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b60:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <prvInsertBlockIntoFreeList+0xac>)
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e002      	b.n	8007b6c <prvInsertBlockIntoFreeList+0x14>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d8f7      	bhi.n	8007b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4413      	add	r3, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d108      	bne.n	8007b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	441a      	add	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d118      	bne.n	8007be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00d      	beq.n	8007bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e008      	b.n	8007be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e003      	b.n	8007be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d002      	beq.n	8007bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	200011c8 	.word	0x200011c8
 8007c08:	200011d0 	.word	0x200011d0

08007c0c <__errno>:
 8007c0c:	4b01      	ldr	r3, [pc, #4]	; (8007c14 <__errno+0x8>)
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20000054 	.word	0x20000054

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4d0d      	ldr	r5, [pc, #52]	; (8007c50 <__libc_init_array+0x38>)
 8007c1c:	4c0d      	ldr	r4, [pc, #52]	; (8007c54 <__libc_init_array+0x3c>)
 8007c1e:	1b64      	subs	r4, r4, r5
 8007c20:	10a4      	asrs	r4, r4, #2
 8007c22:	2600      	movs	r6, #0
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	4d0b      	ldr	r5, [pc, #44]	; (8007c58 <__libc_init_array+0x40>)
 8007c2a:	4c0c      	ldr	r4, [pc, #48]	; (8007c5c <__libc_init_array+0x44>)
 8007c2c:	f002 feb4 	bl	800a998 <_init>
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	2600      	movs	r6, #0
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	0800aecc 	.word	0x0800aecc
 8007c54:	0800aecc 	.word	0x0800aecc
 8007c58:	0800aecc 	.word	0x0800aecc
 8007c5c:	0800aed0 	.word	0x0800aed0

08007c60 <memcpy>:
 8007c60:	440a      	add	r2, r1
 8007c62:	4291      	cmp	r1, r2
 8007c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c68:	d100      	bne.n	8007c6c <memcpy+0xc>
 8007c6a:	4770      	bx	lr
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c76:	4291      	cmp	r1, r2
 8007c78:	d1f9      	bne.n	8007c6e <memcpy+0xe>
 8007c7a:	bd10      	pop	{r4, pc}

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <__cvt>:
 8007c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	ec55 4b10 	vmov	r4, r5, d0
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	460e      	mov	r6, r1
 8007c98:	4619      	mov	r1, r3
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	bfbb      	ittet	lt
 8007c9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ca2:	461d      	movlt	r5, r3
 8007ca4:	2300      	movge	r3, #0
 8007ca6:	232d      	movlt	r3, #45	; 0x2d
 8007ca8:	700b      	strb	r3, [r1, #0]
 8007caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cb0:	4691      	mov	r9, r2
 8007cb2:	f023 0820 	bic.w	r8, r3, #32
 8007cb6:	bfbc      	itt	lt
 8007cb8:	4622      	movlt	r2, r4
 8007cba:	4614      	movlt	r4, r2
 8007cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cc0:	d005      	beq.n	8007cce <__cvt+0x42>
 8007cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007cc6:	d100      	bne.n	8007cca <__cvt+0x3e>
 8007cc8:	3601      	adds	r6, #1
 8007cca:	2102      	movs	r1, #2
 8007ccc:	e000      	b.n	8007cd0 <__cvt+0x44>
 8007cce:	2103      	movs	r1, #3
 8007cd0:	ab03      	add	r3, sp, #12
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	ab02      	add	r3, sp, #8
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	ec45 4b10 	vmov	d0, r4, r5
 8007cdc:	4653      	mov	r3, sl
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f000 fcea 	bl	80086b8 <_dtoa_r>
 8007ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ce8:	4607      	mov	r7, r0
 8007cea:	d102      	bne.n	8007cf2 <__cvt+0x66>
 8007cec:	f019 0f01 	tst.w	r9, #1
 8007cf0:	d022      	beq.n	8007d38 <__cvt+0xac>
 8007cf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cf6:	eb07 0906 	add.w	r9, r7, r6
 8007cfa:	d110      	bne.n	8007d1e <__cvt+0x92>
 8007cfc:	783b      	ldrb	r3, [r7, #0]
 8007cfe:	2b30      	cmp	r3, #48	; 0x30
 8007d00:	d10a      	bne.n	8007d18 <__cvt+0x8c>
 8007d02:	2200      	movs	r2, #0
 8007d04:	2300      	movs	r3, #0
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d0e:	b918      	cbnz	r0, 8007d18 <__cvt+0x8c>
 8007d10:	f1c6 0601 	rsb	r6, r6, #1
 8007d14:	f8ca 6000 	str.w	r6, [sl]
 8007d18:	f8da 3000 	ldr.w	r3, [sl]
 8007d1c:	4499      	add	r9, r3
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b108      	cbz	r0, 8007d30 <__cvt+0xa4>
 8007d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d30:	2230      	movs	r2, #48	; 0x30
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	454b      	cmp	r3, r9
 8007d36:	d307      	bcc.n	8007d48 <__cvt+0xbc>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d3c:	1bdb      	subs	r3, r3, r7
 8007d3e:	4638      	mov	r0, r7
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	b004      	add	sp, #16
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	1c59      	adds	r1, r3, #1
 8007d4a:	9103      	str	r1, [sp, #12]
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e7f0      	b.n	8007d32 <__cvt+0xa6>

08007d50 <__exponent>:
 8007d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d52:	4603      	mov	r3, r0
 8007d54:	2900      	cmp	r1, #0
 8007d56:	bfb8      	it	lt
 8007d58:	4249      	neglt	r1, r1
 8007d5a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d5e:	bfb4      	ite	lt
 8007d60:	222d      	movlt	r2, #45	; 0x2d
 8007d62:	222b      	movge	r2, #43	; 0x2b
 8007d64:	2909      	cmp	r1, #9
 8007d66:	7042      	strb	r2, [r0, #1]
 8007d68:	dd2a      	ble.n	8007dc0 <__exponent+0x70>
 8007d6a:	f10d 0407 	add.w	r4, sp, #7
 8007d6e:	46a4      	mov	ip, r4
 8007d70:	270a      	movs	r7, #10
 8007d72:	46a6      	mov	lr, r4
 8007d74:	460a      	mov	r2, r1
 8007d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d7a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d7e:	3530      	adds	r5, #48	; 0x30
 8007d80:	2a63      	cmp	r2, #99	; 0x63
 8007d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	dcf1      	bgt.n	8007d72 <__exponent+0x22>
 8007d8e:	3130      	adds	r1, #48	; 0x30
 8007d90:	f1ae 0502 	sub.w	r5, lr, #2
 8007d94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d98:	1c44      	adds	r4, r0, #1
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4561      	cmp	r1, ip
 8007d9e:	d30a      	bcc.n	8007db6 <__exponent+0x66>
 8007da0:	f10d 0209 	add.w	r2, sp, #9
 8007da4:	eba2 020e 	sub.w	r2, r2, lr
 8007da8:	4565      	cmp	r5, ip
 8007daa:	bf88      	it	hi
 8007dac:	2200      	movhi	r2, #0
 8007dae:	4413      	add	r3, r2
 8007db0:	1a18      	subs	r0, r3, r0
 8007db2:	b003      	add	sp, #12
 8007db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dbe:	e7ed      	b.n	8007d9c <__exponent+0x4c>
 8007dc0:	2330      	movs	r3, #48	; 0x30
 8007dc2:	3130      	adds	r1, #48	; 0x30
 8007dc4:	7083      	strb	r3, [r0, #2]
 8007dc6:	70c1      	strb	r1, [r0, #3]
 8007dc8:	1d03      	adds	r3, r0, #4
 8007dca:	e7f1      	b.n	8007db0 <__exponent+0x60>

08007dcc <_printf_float>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	ed2d 8b02 	vpush	{d8}
 8007dd4:	b08d      	sub	sp, #52	; 0x34
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	4605      	mov	r5, r0
 8007de2:	f001 fa55 	bl	8009290 <_localeconv_r>
 8007de6:	f8d0 a000 	ldr.w	sl, [r0]
 8007dea:	4650      	mov	r0, sl
 8007dec:	f7f8 f9f0 	bl	80001d0 <strlen>
 8007df0:	2300      	movs	r3, #0
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e00:	3307      	adds	r3, #7
 8007e02:	f023 0307 	bic.w	r3, r3, #7
 8007e06:	f103 0208 	add.w	r2, r3, #8
 8007e0a:	f8c8 2000 	str.w	r2, [r8]
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e24:	ee08 0a10 	vmov	s16, r0
 8007e28:	4b9f      	ldr	r3, [pc, #636]	; (80080a8 <_printf_float+0x2dc>)
 8007e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	f7f8 fe7b 	bl	8000b2c <__aeabi_dcmpun>
 8007e36:	bb88      	cbnz	r0, 8007e9c <_printf_float+0xd0>
 8007e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e3c:	4b9a      	ldr	r3, [pc, #616]	; (80080a8 <_printf_float+0x2dc>)
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	f7f8 fe55 	bl	8000af0 <__aeabi_dcmple>
 8007e46:	bb48      	cbnz	r0, 8007e9c <_printf_float+0xd0>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fe44 	bl	8000adc <__aeabi_dcmplt>
 8007e54:	b110      	cbz	r0, 8007e5c <_printf_float+0x90>
 8007e56:	232d      	movs	r3, #45	; 0x2d
 8007e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5c:	4b93      	ldr	r3, [pc, #588]	; (80080ac <_printf_float+0x2e0>)
 8007e5e:	4894      	ldr	r0, [pc, #592]	; (80080b0 <_printf_float+0x2e4>)
 8007e60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e64:	bf94      	ite	ls
 8007e66:	4698      	movls	r8, r3
 8007e68:	4680      	movhi	r8, r0
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	6123      	str	r3, [r4, #16]
 8007e6e:	9b05      	ldr	r3, [sp, #20]
 8007e70:	f023 0204 	bic.w	r2, r3, #4
 8007e74:	6022      	str	r2, [r4, #0]
 8007e76:	f04f 0900 	mov.w	r9, #0
 8007e7a:	9700      	str	r7, [sp, #0]
 8007e7c:	4633      	mov	r3, r6
 8007e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e80:	4621      	mov	r1, r4
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 f9d8 	bl	8008238 <_printf_common>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f040 8090 	bne.w	8007fae <_printf_float+0x1e2>
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	b00d      	add	sp, #52	; 0x34
 8007e94:	ecbd 8b02 	vpop	{d8}
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	f7f8 fe42 	bl	8000b2c <__aeabi_dcmpun>
 8007ea8:	b140      	cbz	r0, 8007ebc <_printf_float+0xf0>
 8007eaa:	464b      	mov	r3, r9
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfbc      	itt	lt
 8007eb0:	232d      	movlt	r3, #45	; 0x2d
 8007eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007eb6:	487f      	ldr	r0, [pc, #508]	; (80080b4 <_printf_float+0x2e8>)
 8007eb8:	4b7f      	ldr	r3, [pc, #508]	; (80080b8 <_printf_float+0x2ec>)
 8007eba:	e7d1      	b.n	8007e60 <_printf_float+0x94>
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ec2:	9206      	str	r2, [sp, #24]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	d13f      	bne.n	8007f48 <_printf_float+0x17c>
 8007ec8:	2306      	movs	r3, #6
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	9b05      	ldr	r3, [sp, #20]
 8007ece:	6861      	ldr	r1, [r4, #4]
 8007ed0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9303      	str	r3, [sp, #12]
 8007ed8:	ab0a      	add	r3, sp, #40	; 0x28
 8007eda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ede:	ab09      	add	r3, sp, #36	; 0x24
 8007ee0:	ec49 8b10 	vmov	d0, r8, r9
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7ff fecd 	bl	8007c8c <__cvt>
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ef6:	2b47      	cmp	r3, #71	; 0x47
 8007ef8:	4680      	mov	r8, r0
 8007efa:	d108      	bne.n	8007f0e <_printf_float+0x142>
 8007efc:	1cc8      	adds	r0, r1, #3
 8007efe:	db02      	blt.n	8007f06 <_printf_float+0x13a>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	4299      	cmp	r1, r3
 8007f04:	dd41      	ble.n	8007f8a <_printf_float+0x1be>
 8007f06:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f0a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f12:	d820      	bhi.n	8007f56 <_printf_float+0x18a>
 8007f14:	3901      	subs	r1, #1
 8007f16:	465a      	mov	r2, fp
 8007f18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f1e:	f7ff ff17 	bl	8007d50 <__exponent>
 8007f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f24:	1813      	adds	r3, r2, r0
 8007f26:	2a01      	cmp	r2, #1
 8007f28:	4681      	mov	r9, r0
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	dc02      	bgt.n	8007f34 <_printf_float+0x168>
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	07d2      	lsls	r2, r2, #31
 8007f32:	d501      	bpl.n	8007f38 <_printf_float+0x16c>
 8007f34:	3301      	adds	r3, #1
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d09c      	beq.n	8007e7a <_printf_float+0xae>
 8007f40:	232d      	movs	r3, #45	; 0x2d
 8007f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f46:	e798      	b.n	8007e7a <_printf_float+0xae>
 8007f48:	9a06      	ldr	r2, [sp, #24]
 8007f4a:	2a47      	cmp	r2, #71	; 0x47
 8007f4c:	d1be      	bne.n	8007ecc <_printf_float+0x100>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1bc      	bne.n	8007ecc <_printf_float+0x100>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e7b9      	b.n	8007eca <_printf_float+0xfe>
 8007f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f5a:	d118      	bne.n	8007f8e <_printf_float+0x1c2>
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	6863      	ldr	r3, [r4, #4]
 8007f60:	dd0b      	ble.n	8007f7a <_printf_float+0x1ae>
 8007f62:	6121      	str	r1, [r4, #16]
 8007f64:	b913      	cbnz	r3, 8007f6c <_printf_float+0x1a0>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d502      	bpl.n	8007f72 <_printf_float+0x1a6>
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	440b      	add	r3, r1
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f74:	f04f 0900 	mov.w	r9, #0
 8007f78:	e7de      	b.n	8007f38 <_printf_float+0x16c>
 8007f7a:	b913      	cbnz	r3, 8007f82 <_printf_float+0x1b6>
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	07d2      	lsls	r2, r2, #31
 8007f80:	d501      	bpl.n	8007f86 <_printf_float+0x1ba>
 8007f82:	3302      	adds	r3, #2
 8007f84:	e7f4      	b.n	8007f70 <_printf_float+0x1a4>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e7f2      	b.n	8007f70 <_printf_float+0x1a4>
 8007f8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	4299      	cmp	r1, r3
 8007f92:	db05      	blt.n	8007fa0 <_printf_float+0x1d4>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	6121      	str	r1, [r4, #16]
 8007f98:	07d8      	lsls	r0, r3, #31
 8007f9a:	d5ea      	bpl.n	8007f72 <_printf_float+0x1a6>
 8007f9c:	1c4b      	adds	r3, r1, #1
 8007f9e:	e7e7      	b.n	8007f70 <_printf_float+0x1a4>
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	bfd4      	ite	le
 8007fa4:	f1c1 0202 	rsble	r2, r1, #2
 8007fa8:	2201      	movgt	r2, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	e7e0      	b.n	8007f70 <_printf_float+0x1a4>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	055a      	lsls	r2, r3, #21
 8007fb2:	d407      	bmi.n	8007fc4 <_printf_float+0x1f8>
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d12c      	bne.n	800801c <_printf_float+0x250>
 8007fc2:	e764      	b.n	8007e8e <_printf_float+0xc2>
 8007fc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fc8:	f240 80e0 	bls.w	800818c <_printf_float+0x3c0>
 8007fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d034      	beq.n	8008046 <_printf_float+0x27a>
 8007fdc:	4a37      	ldr	r2, [pc, #220]	; (80080bc <_printf_float+0x2f0>)
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af51 	beq.w	8007e8e <_printf_float+0xc2>
 8007fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	db02      	blt.n	8007ffa <_printf_float+0x22e>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07d8      	lsls	r0, r3, #31
 8007ff8:	d510      	bpl.n	800801c <_printf_float+0x250>
 8007ffa:	ee18 3a10 	vmov	r3, s16
 8007ffe:	4652      	mov	r2, sl
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af41 	beq.w	8007e8e <_printf_float+0xc2>
 800800c:	f04f 0800 	mov.w	r8, #0
 8008010:	f104 091a 	add.w	r9, r4, #26
 8008014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008016:	3b01      	subs	r3, #1
 8008018:	4543      	cmp	r3, r8
 800801a:	dc09      	bgt.n	8008030 <_printf_float+0x264>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	079b      	lsls	r3, r3, #30
 8008020:	f100 8105 	bmi.w	800822e <_printf_float+0x462>
 8008024:	68e0      	ldr	r0, [r4, #12]
 8008026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008028:	4298      	cmp	r0, r3
 800802a:	bfb8      	it	lt
 800802c:	4618      	movlt	r0, r3
 800802e:	e730      	b.n	8007e92 <_printf_float+0xc6>
 8008030:	2301      	movs	r3, #1
 8008032:	464a      	mov	r2, r9
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	f43f af27 	beq.w	8007e8e <_printf_float+0xc2>
 8008040:	f108 0801 	add.w	r8, r8, #1
 8008044:	e7e6      	b.n	8008014 <_printf_float+0x248>
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	dc39      	bgt.n	80080c0 <_printf_float+0x2f4>
 800804c:	4a1b      	ldr	r2, [pc, #108]	; (80080bc <_printf_float+0x2f0>)
 800804e:	2301      	movs	r3, #1
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af19 	beq.w	8007e8e <_printf_float+0xc2>
 800805c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008060:	4313      	orrs	r3, r2
 8008062:	d102      	bne.n	800806a <_printf_float+0x29e>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d5d8      	bpl.n	800801c <_printf_float+0x250>
 800806a:	ee18 3a10 	vmov	r3, s16
 800806e:	4652      	mov	r2, sl
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af09 	beq.w	8007e8e <_printf_float+0xc2>
 800807c:	f04f 0900 	mov.w	r9, #0
 8008080:	f104 0a1a 	add.w	sl, r4, #26
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	425b      	negs	r3, r3
 8008088:	454b      	cmp	r3, r9
 800808a:	dc01      	bgt.n	8008090 <_printf_float+0x2c4>
 800808c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808e:	e792      	b.n	8007fb6 <_printf_float+0x1ea>
 8008090:	2301      	movs	r3, #1
 8008092:	4652      	mov	r2, sl
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f aef7 	beq.w	8007e8e <_printf_float+0xc2>
 80080a0:	f109 0901 	add.w	r9, r9, #1
 80080a4:	e7ee      	b.n	8008084 <_printf_float+0x2b8>
 80080a6:	bf00      	nop
 80080a8:	7fefffff 	.word	0x7fefffff
 80080ac:	0800aae4 	.word	0x0800aae4
 80080b0:	0800aae8 	.word	0x0800aae8
 80080b4:	0800aaf0 	.word	0x0800aaf0
 80080b8:	0800aaec 	.word	0x0800aaec
 80080bc:	0800aaf4 	.word	0x0800aaf4
 80080c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bfa8      	it	ge
 80080c8:	461a      	movge	r2, r3
 80080ca:	2a00      	cmp	r2, #0
 80080cc:	4691      	mov	r9, r2
 80080ce:	dc37      	bgt.n	8008140 <_printf_float+0x374>
 80080d0:	f04f 0b00 	mov.w	fp, #0
 80080d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080d8:	f104 021a 	add.w	r2, r4, #26
 80080dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	eba3 0309 	sub.w	r3, r3, r9
 80080e4:	455b      	cmp	r3, fp
 80080e6:	dc33      	bgt.n	8008150 <_printf_float+0x384>
 80080e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ec:	429a      	cmp	r2, r3
 80080ee:	db3b      	blt.n	8008168 <_printf_float+0x39c>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	07da      	lsls	r2, r3, #31
 80080f4:	d438      	bmi.n	8008168 <_printf_float+0x39c>
 80080f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f8:	9b05      	ldr	r3, [sp, #20]
 80080fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	eba2 0901 	sub.w	r9, r2, r1
 8008102:	4599      	cmp	r9, r3
 8008104:	bfa8      	it	ge
 8008106:	4699      	movge	r9, r3
 8008108:	f1b9 0f00 	cmp.w	r9, #0
 800810c:	dc35      	bgt.n	800817a <_printf_float+0x3ae>
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008116:	f104 0a1a 	add.w	sl, r4, #26
 800811a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	eba3 0309 	sub.w	r3, r3, r9
 8008124:	4543      	cmp	r3, r8
 8008126:	f77f af79 	ble.w	800801c <_printf_float+0x250>
 800812a:	2301      	movs	r3, #1
 800812c:	4652      	mov	r2, sl
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	f43f aeaa 	beq.w	8007e8e <_printf_float+0xc2>
 800813a:	f108 0801 	add.w	r8, r8, #1
 800813e:	e7ec      	b.n	800811a <_printf_float+0x34e>
 8008140:	4613      	mov	r3, r2
 8008142:	4631      	mov	r1, r6
 8008144:	4642      	mov	r2, r8
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	d1c0      	bne.n	80080d0 <_printf_float+0x304>
 800814e:	e69e      	b.n	8007e8e <_printf_float+0xc2>
 8008150:	2301      	movs	r3, #1
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	9205      	str	r2, [sp, #20]
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f ae97 	beq.w	8007e8e <_printf_float+0xc2>
 8008160:	9a05      	ldr	r2, [sp, #20]
 8008162:	f10b 0b01 	add.w	fp, fp, #1
 8008166:	e7b9      	b.n	80080dc <_printf_float+0x310>
 8008168:	ee18 3a10 	vmov	r3, s16
 800816c:	4652      	mov	r2, sl
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d1be      	bne.n	80080f6 <_printf_float+0x32a>
 8008178:	e689      	b.n	8007e8e <_printf_float+0xc2>
 800817a:	9a05      	ldr	r2, [sp, #20]
 800817c:	464b      	mov	r3, r9
 800817e:	4442      	add	r2, r8
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	d1c1      	bne.n	800810e <_printf_float+0x342>
 800818a:	e680      	b.n	8007e8e <_printf_float+0xc2>
 800818c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800818e:	2a01      	cmp	r2, #1
 8008190:	dc01      	bgt.n	8008196 <_printf_float+0x3ca>
 8008192:	07db      	lsls	r3, r3, #31
 8008194:	d538      	bpl.n	8008208 <_printf_float+0x43c>
 8008196:	2301      	movs	r3, #1
 8008198:	4642      	mov	r2, r8
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f ae74 	beq.w	8007e8e <_printf_float+0xc2>
 80081a6:	ee18 3a10 	vmov	r3, s16
 80081aa:	4652      	mov	r2, sl
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f ae6b 	beq.w	8007e8e <_printf_float+0xc2>
 80081b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	f7f8 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c4:	b9d8      	cbnz	r0, 80081fe <_printf_float+0x432>
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	f108 0201 	add.w	r2, r8, #1
 80081cc:	3b01      	subs	r3, #1
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	d10e      	bne.n	80081f6 <_printf_float+0x42a>
 80081d8:	e659      	b.n	8007e8e <_printf_float+0xc2>
 80081da:	2301      	movs	r3, #1
 80081dc:	4652      	mov	r2, sl
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	f43f ae52 	beq.w	8007e8e <_printf_float+0xc2>
 80081ea:	f108 0801 	add.w	r8, r8, #1
 80081ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4543      	cmp	r3, r8
 80081f4:	dcf1      	bgt.n	80081da <_printf_float+0x40e>
 80081f6:	464b      	mov	r3, r9
 80081f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081fc:	e6dc      	b.n	8007fb8 <_printf_float+0x1ec>
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	f104 0a1a 	add.w	sl, r4, #26
 8008206:	e7f2      	b.n	80081ee <_printf_float+0x422>
 8008208:	2301      	movs	r3, #1
 800820a:	4642      	mov	r2, r8
 800820c:	e7df      	b.n	80081ce <_printf_float+0x402>
 800820e:	2301      	movs	r3, #1
 8008210:	464a      	mov	r2, r9
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	47b8      	blx	r7
 8008218:	3001      	adds	r0, #1
 800821a:	f43f ae38 	beq.w	8007e8e <_printf_float+0xc2>
 800821e:	f108 0801 	add.w	r8, r8, #1
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	4543      	cmp	r3, r8
 800822a:	dcf0      	bgt.n	800820e <_printf_float+0x442>
 800822c:	e6fa      	b.n	8008024 <_printf_float+0x258>
 800822e:	f04f 0800 	mov.w	r8, #0
 8008232:	f104 0919 	add.w	r9, r4, #25
 8008236:	e7f4      	b.n	8008222 <_printf_float+0x456>

08008238 <_printf_common>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	4616      	mov	r6, r2
 800823e:	4699      	mov	r9, r3
 8008240:	688a      	ldr	r2, [r1, #8]
 8008242:	690b      	ldr	r3, [r1, #16]
 8008244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008248:	4293      	cmp	r3, r2
 800824a:	bfb8      	it	lt
 800824c:	4613      	movlt	r3, r2
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008254:	4607      	mov	r7, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b10a      	cbz	r2, 800825e <_printf_common+0x26>
 800825a:	3301      	adds	r3, #1
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	0699      	lsls	r1, r3, #26
 8008262:	bf42      	ittt	mi
 8008264:	6833      	ldrmi	r3, [r6, #0]
 8008266:	3302      	addmi	r3, #2
 8008268:	6033      	strmi	r3, [r6, #0]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	f015 0506 	ands.w	r5, r5, #6
 8008270:	d106      	bne.n	8008280 <_printf_common+0x48>
 8008272:	f104 0a19 	add.w	sl, r4, #25
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	6832      	ldr	r2, [r6, #0]
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	42ab      	cmp	r3, r5
 800827e:	dc26      	bgt.n	80082ce <_printf_common+0x96>
 8008280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008284:	1e13      	subs	r3, r2, #0
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	bf18      	it	ne
 800828a:	2301      	movne	r3, #1
 800828c:	0692      	lsls	r2, r2, #26
 800828e:	d42b      	bmi.n	80082e8 <_printf_common+0xb0>
 8008290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008294:	4649      	mov	r1, r9
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d01e      	beq.n	80082dc <_printf_common+0xa4>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	68e5      	ldr	r5, [r4, #12]
 80082a2:	6832      	ldr	r2, [r6, #0]
 80082a4:	f003 0306 	and.w	r3, r3, #6
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	bf08      	it	eq
 80082ac:	1aad      	subeq	r5, r5, r2
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	bf0c      	ite	eq
 80082b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b8:	2500      	movne	r5, #0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	bfc4      	itt	gt
 80082be:	1a9b      	subgt	r3, r3, r2
 80082c0:	18ed      	addgt	r5, r5, r3
 80082c2:	2600      	movs	r6, #0
 80082c4:	341a      	adds	r4, #26
 80082c6:	42b5      	cmp	r5, r6
 80082c8:	d11a      	bne.n	8008300 <_printf_common+0xc8>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e008      	b.n	80082e0 <_printf_common+0xa8>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4652      	mov	r2, sl
 80082d2:	4649      	mov	r1, r9
 80082d4:	4638      	mov	r0, r7
 80082d6:	47c0      	blx	r8
 80082d8:	3001      	adds	r0, #1
 80082da:	d103      	bne.n	80082e4 <_printf_common+0xac>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	3501      	adds	r5, #1
 80082e6:	e7c6      	b.n	8008276 <_printf_common+0x3e>
 80082e8:	18e1      	adds	r1, r4, r3
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	2030      	movs	r0, #48	; 0x30
 80082ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f2:	4422      	add	r2, r4
 80082f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082fc:	3302      	adds	r3, #2
 80082fe:	e7c7      	b.n	8008290 <_printf_common+0x58>
 8008300:	2301      	movs	r3, #1
 8008302:	4622      	mov	r2, r4
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d0e6      	beq.n	80082dc <_printf_common+0xa4>
 800830e:	3601      	adds	r6, #1
 8008310:	e7d9      	b.n	80082c6 <_printf_common+0x8e>
	...

08008314 <_printf_i>:
 8008314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	460c      	mov	r4, r1
 800831a:	4691      	mov	r9, r2
 800831c:	7e27      	ldrb	r7, [r4, #24]
 800831e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008320:	2f78      	cmp	r7, #120	; 0x78
 8008322:	4680      	mov	r8, r0
 8008324:	469a      	mov	sl, r3
 8008326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800832a:	d807      	bhi.n	800833c <_printf_i+0x28>
 800832c:	2f62      	cmp	r7, #98	; 0x62
 800832e:	d80a      	bhi.n	8008346 <_printf_i+0x32>
 8008330:	2f00      	cmp	r7, #0
 8008332:	f000 80d8 	beq.w	80084e6 <_printf_i+0x1d2>
 8008336:	2f58      	cmp	r7, #88	; 0x58
 8008338:	f000 80a3 	beq.w	8008482 <_printf_i+0x16e>
 800833c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008344:	e03a      	b.n	80083bc <_printf_i+0xa8>
 8008346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800834a:	2b15      	cmp	r3, #21
 800834c:	d8f6      	bhi.n	800833c <_printf_i+0x28>
 800834e:	a001      	add	r0, pc, #4	; (adr r0, 8008354 <_printf_i+0x40>)
 8008350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083c1 	.word	0x080083c1
 800835c:	0800833d 	.word	0x0800833d
 8008360:	0800833d 	.word	0x0800833d
 8008364:	0800833d 	.word	0x0800833d
 8008368:	0800833d 	.word	0x0800833d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800833d 	.word	0x0800833d
 8008374:	0800833d 	.word	0x0800833d
 8008378:	0800833d 	.word	0x0800833d
 800837c:	0800833d 	.word	0x0800833d
 8008380:	080084cd 	.word	0x080084cd
 8008384:	080083f1 	.word	0x080083f1
 8008388:	080084af 	.word	0x080084af
 800838c:	0800833d 	.word	0x0800833d
 8008390:	0800833d 	.word	0x0800833d
 8008394:	080084ef 	.word	0x080084ef
 8008398:	0800833d 	.word	0x0800833d
 800839c:	080083f1 	.word	0x080083f1
 80083a0:	0800833d 	.word	0x0800833d
 80083a4:	0800833d 	.word	0x0800833d
 80083a8:	080084b7 	.word	0x080084b7
 80083ac:	680b      	ldr	r3, [r1, #0]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	600a      	str	r2, [r1, #0]
 80083b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083bc:	2301      	movs	r3, #1
 80083be:	e0a3      	b.n	8008508 <_printf_i+0x1f4>
 80083c0:	6825      	ldr	r5, [r4, #0]
 80083c2:	6808      	ldr	r0, [r1, #0]
 80083c4:	062e      	lsls	r6, r5, #24
 80083c6:	f100 0304 	add.w	r3, r0, #4
 80083ca:	d50a      	bpl.n	80083e2 <_printf_i+0xce>
 80083cc:	6805      	ldr	r5, [r0, #0]
 80083ce:	600b      	str	r3, [r1, #0]
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	da03      	bge.n	80083dc <_printf_i+0xc8>
 80083d4:	232d      	movs	r3, #45	; 0x2d
 80083d6:	426d      	negs	r5, r5
 80083d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083dc:	485e      	ldr	r0, [pc, #376]	; (8008558 <_printf_i+0x244>)
 80083de:	230a      	movs	r3, #10
 80083e0:	e019      	b.n	8008416 <_printf_i+0x102>
 80083e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083e6:	6805      	ldr	r5, [r0, #0]
 80083e8:	600b      	str	r3, [r1, #0]
 80083ea:	bf18      	it	ne
 80083ec:	b22d      	sxthne	r5, r5
 80083ee:	e7ef      	b.n	80083d0 <_printf_i+0xbc>
 80083f0:	680b      	ldr	r3, [r1, #0]
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	1d18      	adds	r0, r3, #4
 80083f6:	6008      	str	r0, [r1, #0]
 80083f8:	0628      	lsls	r0, r5, #24
 80083fa:	d501      	bpl.n	8008400 <_printf_i+0xec>
 80083fc:	681d      	ldr	r5, [r3, #0]
 80083fe:	e002      	b.n	8008406 <_printf_i+0xf2>
 8008400:	0669      	lsls	r1, r5, #25
 8008402:	d5fb      	bpl.n	80083fc <_printf_i+0xe8>
 8008404:	881d      	ldrh	r5, [r3, #0]
 8008406:	4854      	ldr	r0, [pc, #336]	; (8008558 <_printf_i+0x244>)
 8008408:	2f6f      	cmp	r7, #111	; 0x6f
 800840a:	bf0c      	ite	eq
 800840c:	2308      	moveq	r3, #8
 800840e:	230a      	movne	r3, #10
 8008410:	2100      	movs	r1, #0
 8008412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008416:	6866      	ldr	r6, [r4, #4]
 8008418:	60a6      	str	r6, [r4, #8]
 800841a:	2e00      	cmp	r6, #0
 800841c:	bfa2      	ittt	ge
 800841e:	6821      	ldrge	r1, [r4, #0]
 8008420:	f021 0104 	bicge.w	r1, r1, #4
 8008424:	6021      	strge	r1, [r4, #0]
 8008426:	b90d      	cbnz	r5, 800842c <_printf_i+0x118>
 8008428:	2e00      	cmp	r6, #0
 800842a:	d04d      	beq.n	80084c8 <_printf_i+0x1b4>
 800842c:	4616      	mov	r6, r2
 800842e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008432:	fb03 5711 	mls	r7, r3, r1, r5
 8008436:	5dc7      	ldrb	r7, [r0, r7]
 8008438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800843c:	462f      	mov	r7, r5
 800843e:	42bb      	cmp	r3, r7
 8008440:	460d      	mov	r5, r1
 8008442:	d9f4      	bls.n	800842e <_printf_i+0x11a>
 8008444:	2b08      	cmp	r3, #8
 8008446:	d10b      	bne.n	8008460 <_printf_i+0x14c>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	07df      	lsls	r7, r3, #31
 800844c:	d508      	bpl.n	8008460 <_printf_i+0x14c>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	6861      	ldr	r1, [r4, #4]
 8008452:	4299      	cmp	r1, r3
 8008454:	bfde      	ittt	le
 8008456:	2330      	movle	r3, #48	; 0x30
 8008458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800845c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008460:	1b92      	subs	r2, r2, r6
 8008462:	6122      	str	r2, [r4, #16]
 8008464:	f8cd a000 	str.w	sl, [sp]
 8008468:	464b      	mov	r3, r9
 800846a:	aa03      	add	r2, sp, #12
 800846c:	4621      	mov	r1, r4
 800846e:	4640      	mov	r0, r8
 8008470:	f7ff fee2 	bl	8008238 <_printf_common>
 8008474:	3001      	adds	r0, #1
 8008476:	d14c      	bne.n	8008512 <_printf_i+0x1fe>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	b004      	add	sp, #16
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	4835      	ldr	r0, [pc, #212]	; (8008558 <_printf_i+0x244>)
 8008484:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	680e      	ldr	r6, [r1, #0]
 800848c:	061f      	lsls	r7, r3, #24
 800848e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008492:	600e      	str	r6, [r1, #0]
 8008494:	d514      	bpl.n	80084c0 <_printf_i+0x1ac>
 8008496:	07d9      	lsls	r1, r3, #31
 8008498:	bf44      	itt	mi
 800849a:	f043 0320 	orrmi.w	r3, r3, #32
 800849e:	6023      	strmi	r3, [r4, #0]
 80084a0:	b91d      	cbnz	r5, 80084aa <_printf_i+0x196>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f023 0320 	bic.w	r3, r3, #32
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	2310      	movs	r3, #16
 80084ac:	e7b0      	b.n	8008410 <_printf_i+0xfc>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f043 0320 	orr.w	r3, r3, #32
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	2378      	movs	r3, #120	; 0x78
 80084b8:	4828      	ldr	r0, [pc, #160]	; (800855c <_printf_i+0x248>)
 80084ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084be:	e7e3      	b.n	8008488 <_printf_i+0x174>
 80084c0:	065e      	lsls	r6, r3, #25
 80084c2:	bf48      	it	mi
 80084c4:	b2ad      	uxthmi	r5, r5
 80084c6:	e7e6      	b.n	8008496 <_printf_i+0x182>
 80084c8:	4616      	mov	r6, r2
 80084ca:	e7bb      	b.n	8008444 <_printf_i+0x130>
 80084cc:	680b      	ldr	r3, [r1, #0]
 80084ce:	6826      	ldr	r6, [r4, #0]
 80084d0:	6960      	ldr	r0, [r4, #20]
 80084d2:	1d1d      	adds	r5, r3, #4
 80084d4:	600d      	str	r5, [r1, #0]
 80084d6:	0635      	lsls	r5, r6, #24
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0x1cc>
 80084dc:	6018      	str	r0, [r3, #0]
 80084de:	e002      	b.n	80084e6 <_printf_i+0x1d2>
 80084e0:	0671      	lsls	r1, r6, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0x1c8>
 80084e4:	8018      	strh	r0, [r3, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	4616      	mov	r6, r2
 80084ec:	e7ba      	b.n	8008464 <_printf_i+0x150>
 80084ee:	680b      	ldr	r3, [r1, #0]
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	600a      	str	r2, [r1, #0]
 80084f4:	681e      	ldr	r6, [r3, #0]
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7f7 fe70 	bl	80001e0 <memchr>
 8008500:	b108      	cbz	r0, 8008506 <_printf_i+0x1f2>
 8008502:	1b80      	subs	r0, r0, r6
 8008504:	6060      	str	r0, [r4, #4]
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	2300      	movs	r3, #0
 800850c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008510:	e7a8      	b.n	8008464 <_printf_i+0x150>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	4632      	mov	r2, r6
 8008516:	4649      	mov	r1, r9
 8008518:	4640      	mov	r0, r8
 800851a:	47d0      	blx	sl
 800851c:	3001      	adds	r0, #1
 800851e:	d0ab      	beq.n	8008478 <_printf_i+0x164>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	079b      	lsls	r3, r3, #30
 8008524:	d413      	bmi.n	800854e <_printf_i+0x23a>
 8008526:	68e0      	ldr	r0, [r4, #12]
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	4298      	cmp	r0, r3
 800852c:	bfb8      	it	lt
 800852e:	4618      	movlt	r0, r3
 8008530:	e7a4      	b.n	800847c <_printf_i+0x168>
 8008532:	2301      	movs	r3, #1
 8008534:	4632      	mov	r2, r6
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	47d0      	blx	sl
 800853c:	3001      	adds	r0, #1
 800853e:	d09b      	beq.n	8008478 <_printf_i+0x164>
 8008540:	3501      	adds	r5, #1
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	9903      	ldr	r1, [sp, #12]
 8008546:	1a5b      	subs	r3, r3, r1
 8008548:	42ab      	cmp	r3, r5
 800854a:	dcf2      	bgt.n	8008532 <_printf_i+0x21e>
 800854c:	e7eb      	b.n	8008526 <_printf_i+0x212>
 800854e:	2500      	movs	r5, #0
 8008550:	f104 0619 	add.w	r6, r4, #25
 8008554:	e7f5      	b.n	8008542 <_printf_i+0x22e>
 8008556:	bf00      	nop
 8008558:	0800aaf6 	.word	0x0800aaf6
 800855c:	0800ab07 	.word	0x0800ab07

08008560 <siprintf>:
 8008560:	b40e      	push	{r1, r2, r3}
 8008562:	b500      	push	{lr}
 8008564:	b09c      	sub	sp, #112	; 0x70
 8008566:	ab1d      	add	r3, sp, #116	; 0x74
 8008568:	9002      	str	r0, [sp, #8]
 800856a:	9006      	str	r0, [sp, #24]
 800856c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008570:	4809      	ldr	r0, [pc, #36]	; (8008598 <siprintf+0x38>)
 8008572:	9107      	str	r1, [sp, #28]
 8008574:	9104      	str	r1, [sp, #16]
 8008576:	4909      	ldr	r1, [pc, #36]	; (800859c <siprintf+0x3c>)
 8008578:	f853 2b04 	ldr.w	r2, [r3], #4
 800857c:	9105      	str	r1, [sp, #20]
 800857e:	6800      	ldr	r0, [r0, #0]
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	a902      	add	r1, sp, #8
 8008584:	f001 fb24 	bl	8009bd0 <_svfiprintf_r>
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	b01c      	add	sp, #112	; 0x70
 8008590:	f85d eb04 	ldr.w	lr, [sp], #4
 8008594:	b003      	add	sp, #12
 8008596:	4770      	bx	lr
 8008598:	20000054 	.word	0x20000054
 800859c:	ffff0208 	.word	0xffff0208

080085a0 <quorem>:
 80085a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	6903      	ldr	r3, [r0, #16]
 80085a6:	690c      	ldr	r4, [r1, #16]
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	4607      	mov	r7, r0
 80085ac:	f2c0 8081 	blt.w	80086b2 <quorem+0x112>
 80085b0:	3c01      	subs	r4, #1
 80085b2:	f101 0814 	add.w	r8, r1, #20
 80085b6:	f100 0514 	add.w	r5, r0, #20
 80085ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085c8:	3301      	adds	r3, #1
 80085ca:	429a      	cmp	r2, r3
 80085cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80085d8:	d331      	bcc.n	800863e <quorem+0x9e>
 80085da:	f04f 0e00 	mov.w	lr, #0
 80085de:	4640      	mov	r0, r8
 80085e0:	46ac      	mov	ip, r5
 80085e2:	46f2      	mov	sl, lr
 80085e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80085e8:	b293      	uxth	r3, r2
 80085ea:	fb06 e303 	mla	r3, r6, r3, lr
 80085ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	ebaa 0303 	sub.w	r3, sl, r3
 80085f8:	0c12      	lsrs	r2, r2, #16
 80085fa:	f8dc a000 	ldr.w	sl, [ip]
 80085fe:	fb06 e202 	mla	r2, r6, r2, lr
 8008602:	fa13 f38a 	uxtah	r3, r3, sl
 8008606:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800860a:	fa1f fa82 	uxth.w	sl, r2
 800860e:	f8dc 2000 	ldr.w	r2, [ip]
 8008612:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008616:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800861a:	b29b      	uxth	r3, r3
 800861c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008620:	4581      	cmp	r9, r0
 8008622:	f84c 3b04 	str.w	r3, [ip], #4
 8008626:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800862a:	d2db      	bcs.n	80085e4 <quorem+0x44>
 800862c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008630:	b92b      	cbnz	r3, 800863e <quorem+0x9e>
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	3b04      	subs	r3, #4
 8008636:	429d      	cmp	r5, r3
 8008638:	461a      	mov	r2, r3
 800863a:	d32e      	bcc.n	800869a <quorem+0xfa>
 800863c:	613c      	str	r4, [r7, #16]
 800863e:	4638      	mov	r0, r7
 8008640:	f001 f8b0 	bl	80097a4 <__mcmp>
 8008644:	2800      	cmp	r0, #0
 8008646:	db24      	blt.n	8008692 <quorem+0xf2>
 8008648:	3601      	adds	r6, #1
 800864a:	4628      	mov	r0, r5
 800864c:	f04f 0c00 	mov.w	ip, #0
 8008650:	f858 2b04 	ldr.w	r2, [r8], #4
 8008654:	f8d0 e000 	ldr.w	lr, [r0]
 8008658:	b293      	uxth	r3, r2
 800865a:	ebac 0303 	sub.w	r3, ip, r3
 800865e:	0c12      	lsrs	r2, r2, #16
 8008660:	fa13 f38e 	uxtah	r3, r3, lr
 8008664:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800866c:	b29b      	uxth	r3, r3
 800866e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008672:	45c1      	cmp	r9, r8
 8008674:	f840 3b04 	str.w	r3, [r0], #4
 8008678:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800867c:	d2e8      	bcs.n	8008650 <quorem+0xb0>
 800867e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008686:	b922      	cbnz	r2, 8008692 <quorem+0xf2>
 8008688:	3b04      	subs	r3, #4
 800868a:	429d      	cmp	r5, r3
 800868c:	461a      	mov	r2, r3
 800868e:	d30a      	bcc.n	80086a6 <quorem+0x106>
 8008690:	613c      	str	r4, [r7, #16]
 8008692:	4630      	mov	r0, r6
 8008694:	b003      	add	sp, #12
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	3b04      	subs	r3, #4
 800869e:	2a00      	cmp	r2, #0
 80086a0:	d1cc      	bne.n	800863c <quorem+0x9c>
 80086a2:	3c01      	subs	r4, #1
 80086a4:	e7c7      	b.n	8008636 <quorem+0x96>
 80086a6:	6812      	ldr	r2, [r2, #0]
 80086a8:	3b04      	subs	r3, #4
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d1f0      	bne.n	8008690 <quorem+0xf0>
 80086ae:	3c01      	subs	r4, #1
 80086b0:	e7eb      	b.n	800868a <quorem+0xea>
 80086b2:	2000      	movs	r0, #0
 80086b4:	e7ee      	b.n	8008694 <quorem+0xf4>
	...

080086b8 <_dtoa_r>:
 80086b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086bc:	ed2d 8b02 	vpush	{d8}
 80086c0:	ec57 6b10 	vmov	r6, r7, d0
 80086c4:	b095      	sub	sp, #84	; 0x54
 80086c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086cc:	9105      	str	r1, [sp, #20]
 80086ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80086d2:	4604      	mov	r4, r0
 80086d4:	9209      	str	r2, [sp, #36]	; 0x24
 80086d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086d8:	b975      	cbnz	r5, 80086f8 <_dtoa_r+0x40>
 80086da:	2010      	movs	r0, #16
 80086dc:	f000 fddc 	bl	8009298 <malloc>
 80086e0:	4602      	mov	r2, r0
 80086e2:	6260      	str	r0, [r4, #36]	; 0x24
 80086e4:	b920      	cbnz	r0, 80086f0 <_dtoa_r+0x38>
 80086e6:	4bb2      	ldr	r3, [pc, #712]	; (80089b0 <_dtoa_r+0x2f8>)
 80086e8:	21ea      	movs	r1, #234	; 0xea
 80086ea:	48b2      	ldr	r0, [pc, #712]	; (80089b4 <_dtoa_r+0x2fc>)
 80086ec:	f001 fb80 	bl	8009df0 <__assert_func>
 80086f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086f4:	6005      	str	r5, [r0, #0]
 80086f6:	60c5      	str	r5, [r0, #12]
 80086f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086fa:	6819      	ldr	r1, [r3, #0]
 80086fc:	b151      	cbz	r1, 8008714 <_dtoa_r+0x5c>
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	604a      	str	r2, [r1, #4]
 8008702:	2301      	movs	r3, #1
 8008704:	4093      	lsls	r3, r2
 8008706:	608b      	str	r3, [r1, #8]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fe0d 	bl	8009328 <_Bfree>
 800870e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	1e3b      	subs	r3, r7, #0
 8008716:	bfb9      	ittee	lt
 8008718:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800871c:	9303      	strlt	r3, [sp, #12]
 800871e:	2300      	movge	r3, #0
 8008720:	f8c8 3000 	strge.w	r3, [r8]
 8008724:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008728:	4ba3      	ldr	r3, [pc, #652]	; (80089b8 <_dtoa_r+0x300>)
 800872a:	bfbc      	itt	lt
 800872c:	2201      	movlt	r2, #1
 800872e:	f8c8 2000 	strlt.w	r2, [r8]
 8008732:	ea33 0309 	bics.w	r3, r3, r9
 8008736:	d11b      	bne.n	8008770 <_dtoa_r+0xb8>
 8008738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800873a:	f242 730f 	movw	r3, #9999	; 0x270f
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008744:	4333      	orrs	r3, r6
 8008746:	f000 857a 	beq.w	800923e <_dtoa_r+0xb86>
 800874a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800874c:	b963      	cbnz	r3, 8008768 <_dtoa_r+0xb0>
 800874e:	4b9b      	ldr	r3, [pc, #620]	; (80089bc <_dtoa_r+0x304>)
 8008750:	e024      	b.n	800879c <_dtoa_r+0xe4>
 8008752:	4b9b      	ldr	r3, [pc, #620]	; (80089c0 <_dtoa_r+0x308>)
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	9800      	ldr	r0, [sp, #0]
 800875e:	b015      	add	sp, #84	; 0x54
 8008760:	ecbd 8b02 	vpop	{d8}
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	4b94      	ldr	r3, [pc, #592]	; (80089bc <_dtoa_r+0x304>)
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	3303      	adds	r3, #3
 800876e:	e7f3      	b.n	8008758 <_dtoa_r+0xa0>
 8008770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	ec51 0b17 	vmov	r0, r1, d7
 800877a:	2300      	movs	r3, #0
 800877c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008780:	f7f8 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008784:	4680      	mov	r8, r0
 8008786:	b158      	cbz	r0, 80087a0 <_dtoa_r+0xe8>
 8008788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800878a:	2301      	movs	r3, #1
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8551 	beq.w	8009238 <_dtoa_r+0xb80>
 8008796:	488b      	ldr	r0, [pc, #556]	; (80089c4 <_dtoa_r+0x30c>)
 8008798:	6018      	str	r0, [r3, #0]
 800879a:	1e43      	subs	r3, r0, #1
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	e7dd      	b.n	800875c <_dtoa_r+0xa4>
 80087a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087a4:	aa12      	add	r2, sp, #72	; 0x48
 80087a6:	a913      	add	r1, sp, #76	; 0x4c
 80087a8:	4620      	mov	r0, r4
 80087aa:	f001 f89f 	bl	80098ec <__d2b>
 80087ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087b2:	4683      	mov	fp, r0
 80087b4:	2d00      	cmp	r5, #0
 80087b6:	d07c      	beq.n	80088b2 <_dtoa_r+0x1fa>
 80087b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80087be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80087c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087d2:	4b7d      	ldr	r3, [pc, #500]	; (80089c8 <_dtoa_r+0x310>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f7 fd55 	bl	8000288 <__aeabi_dsub>
 80087de:	a36e      	add	r3, pc, #440	; (adr r3, 8008998 <_dtoa_r+0x2e0>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	a36d      	add	r3, pc, #436	; (adr r3, 80089a0 <_dtoa_r+0x2e8>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f7 fd4d 	bl	800028c <__adddf3>
 80087f2:	4606      	mov	r6, r0
 80087f4:	4628      	mov	r0, r5
 80087f6:	460f      	mov	r7, r1
 80087f8:	f7f7 fe94 	bl	8000524 <__aeabi_i2d>
 80087fc:	a36a      	add	r3, pc, #424	; (adr r3, 80089a8 <_dtoa_r+0x2f0>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f7 fd3d 	bl	800028c <__adddf3>
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f99f 	bl	8000b58 <__aeabi_d2iz>
 800881a:	2200      	movs	r2, #0
 800881c:	4682      	mov	sl, r0
 800881e:	2300      	movs	r3, #0
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f95a 	bl	8000adc <__aeabi_dcmplt>
 8008828:	b148      	cbz	r0, 800883e <_dtoa_r+0x186>
 800882a:	4650      	mov	r0, sl
 800882c:	f7f7 fe7a 	bl	8000524 <__aeabi_i2d>
 8008830:	4632      	mov	r2, r6
 8008832:	463b      	mov	r3, r7
 8008834:	f7f8 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8008838:	b908      	cbnz	r0, 800883e <_dtoa_r+0x186>
 800883a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800883e:	f1ba 0f16 	cmp.w	sl, #22
 8008842:	d854      	bhi.n	80088ee <_dtoa_r+0x236>
 8008844:	4b61      	ldr	r3, [pc, #388]	; (80089cc <_dtoa_r+0x314>)
 8008846:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008852:	f7f8 f943 	bl	8000adc <__aeabi_dcmplt>
 8008856:	2800      	cmp	r0, #0
 8008858:	d04b      	beq.n	80088f2 <_dtoa_r+0x23a>
 800885a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800885e:	2300      	movs	r3, #0
 8008860:	930e      	str	r3, [sp, #56]	; 0x38
 8008862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008864:	1b5d      	subs	r5, r3, r5
 8008866:	1e6b      	subs	r3, r5, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	bf43      	ittte	mi
 800886c:	2300      	movmi	r3, #0
 800886e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008872:	9304      	strmi	r3, [sp, #16]
 8008874:	f04f 0800 	movpl.w	r8, #0
 8008878:	f1ba 0f00 	cmp.w	sl, #0
 800887c:	db3b      	blt.n	80088f6 <_dtoa_r+0x23e>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008884:	4453      	add	r3, sl
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	2300      	movs	r3, #0
 800888a:	9306      	str	r3, [sp, #24]
 800888c:	9b05      	ldr	r3, [sp, #20]
 800888e:	2b09      	cmp	r3, #9
 8008890:	d869      	bhi.n	8008966 <_dtoa_r+0x2ae>
 8008892:	2b05      	cmp	r3, #5
 8008894:	bfc4      	itt	gt
 8008896:	3b04      	subgt	r3, #4
 8008898:	9305      	strgt	r3, [sp, #20]
 800889a:	9b05      	ldr	r3, [sp, #20]
 800889c:	f1a3 0302 	sub.w	r3, r3, #2
 80088a0:	bfcc      	ite	gt
 80088a2:	2500      	movgt	r5, #0
 80088a4:	2501      	movle	r5, #1
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d869      	bhi.n	800897e <_dtoa_r+0x2c6>
 80088aa:	e8df f003 	tbb	[pc, r3]
 80088ae:	4e2c      	.short	0x4e2c
 80088b0:	5a4c      	.short	0x5a4c
 80088b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80088b6:	441d      	add	r5, r3
 80088b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088bc:	2b20      	cmp	r3, #32
 80088be:	bfc1      	itttt	gt
 80088c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80088cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088d0:	bfda      	itte	le
 80088d2:	f1c3 0320 	rsble	r3, r3, #32
 80088d6:	fa06 f003 	lslle.w	r0, r6, r3
 80088da:	4318      	orrgt	r0, r3
 80088dc:	f7f7 fe12 	bl	8000504 <__aeabi_ui2d>
 80088e0:	2301      	movs	r3, #1
 80088e2:	4606      	mov	r6, r0
 80088e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80088e8:	3d01      	subs	r5, #1
 80088ea:	9310      	str	r3, [sp, #64]	; 0x40
 80088ec:	e771      	b.n	80087d2 <_dtoa_r+0x11a>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e7b6      	b.n	8008860 <_dtoa_r+0x1a8>
 80088f2:	900e      	str	r0, [sp, #56]	; 0x38
 80088f4:	e7b5      	b.n	8008862 <_dtoa_r+0x1aa>
 80088f6:	f1ca 0300 	rsb	r3, sl, #0
 80088fa:	9306      	str	r3, [sp, #24]
 80088fc:	2300      	movs	r3, #0
 80088fe:	eba8 080a 	sub.w	r8, r8, sl
 8008902:	930d      	str	r3, [sp, #52]	; 0x34
 8008904:	e7c2      	b.n	800888c <_dtoa_r+0x1d4>
 8008906:	2300      	movs	r3, #0
 8008908:	9308      	str	r3, [sp, #32]
 800890a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc39      	bgt.n	8008984 <_dtoa_r+0x2cc>
 8008910:	f04f 0901 	mov.w	r9, #1
 8008914:	f8cd 9004 	str.w	r9, [sp, #4]
 8008918:	464b      	mov	r3, r9
 800891a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800891e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008920:	2200      	movs	r2, #0
 8008922:	6042      	str	r2, [r0, #4]
 8008924:	2204      	movs	r2, #4
 8008926:	f102 0614 	add.w	r6, r2, #20
 800892a:	429e      	cmp	r6, r3
 800892c:	6841      	ldr	r1, [r0, #4]
 800892e:	d92f      	bls.n	8008990 <_dtoa_r+0x2d8>
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fcb9 	bl	80092a8 <_Balloc>
 8008936:	9000      	str	r0, [sp, #0]
 8008938:	2800      	cmp	r0, #0
 800893a:	d14b      	bne.n	80089d4 <_dtoa_r+0x31c>
 800893c:	4b24      	ldr	r3, [pc, #144]	; (80089d0 <_dtoa_r+0x318>)
 800893e:	4602      	mov	r2, r0
 8008940:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008944:	e6d1      	b.n	80086ea <_dtoa_r+0x32>
 8008946:	2301      	movs	r3, #1
 8008948:	e7de      	b.n	8008908 <_dtoa_r+0x250>
 800894a:	2300      	movs	r3, #0
 800894c:	9308      	str	r3, [sp, #32]
 800894e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008950:	eb0a 0903 	add.w	r9, sl, r3
 8008954:	f109 0301 	add.w	r3, r9, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	bfb8      	it	lt
 800895e:	2301      	movlt	r3, #1
 8008960:	e7dd      	b.n	800891e <_dtoa_r+0x266>
 8008962:	2301      	movs	r3, #1
 8008964:	e7f2      	b.n	800894c <_dtoa_r+0x294>
 8008966:	2501      	movs	r5, #1
 8008968:	2300      	movs	r3, #0
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	9508      	str	r5, [sp, #32]
 800896e:	f04f 39ff 	mov.w	r9, #4294967295
 8008972:	2200      	movs	r2, #0
 8008974:	f8cd 9004 	str.w	r9, [sp, #4]
 8008978:	2312      	movs	r3, #18
 800897a:	9209      	str	r2, [sp, #36]	; 0x24
 800897c:	e7cf      	b.n	800891e <_dtoa_r+0x266>
 800897e:	2301      	movs	r3, #1
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	e7f4      	b.n	800896e <_dtoa_r+0x2b6>
 8008984:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008988:	f8cd 9004 	str.w	r9, [sp, #4]
 800898c:	464b      	mov	r3, r9
 800898e:	e7c6      	b.n	800891e <_dtoa_r+0x266>
 8008990:	3101      	adds	r1, #1
 8008992:	6041      	str	r1, [r0, #4]
 8008994:	0052      	lsls	r2, r2, #1
 8008996:	e7c6      	b.n	8008926 <_dtoa_r+0x26e>
 8008998:	636f4361 	.word	0x636f4361
 800899c:	3fd287a7 	.word	0x3fd287a7
 80089a0:	8b60c8b3 	.word	0x8b60c8b3
 80089a4:	3fc68a28 	.word	0x3fc68a28
 80089a8:	509f79fb 	.word	0x509f79fb
 80089ac:	3fd34413 	.word	0x3fd34413
 80089b0:	0800ab25 	.word	0x0800ab25
 80089b4:	0800ab3c 	.word	0x0800ab3c
 80089b8:	7ff00000 	.word	0x7ff00000
 80089bc:	0800ab21 	.word	0x0800ab21
 80089c0:	0800ab18 	.word	0x0800ab18
 80089c4:	0800aaf5 	.word	0x0800aaf5
 80089c8:	3ff80000 	.word	0x3ff80000
 80089cc:	0800ac38 	.word	0x0800ac38
 80089d0:	0800ab9b 	.word	0x0800ab9b
 80089d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d6:	9a00      	ldr	r2, [sp, #0]
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	9b01      	ldr	r3, [sp, #4]
 80089dc:	2b0e      	cmp	r3, #14
 80089de:	f200 80ad 	bhi.w	8008b3c <_dtoa_r+0x484>
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	f000 80aa 	beq.w	8008b3c <_dtoa_r+0x484>
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	dd36      	ble.n	8008a5c <_dtoa_r+0x3a4>
 80089ee:	4ac3      	ldr	r2, [pc, #780]	; (8008cfc <_dtoa_r+0x644>)
 80089f0:	f00a 030f 	and.w	r3, sl, #15
 80089f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089f8:	ed93 7b00 	vldr	d7, [r3]
 80089fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a04:	eeb0 8a47 	vmov.f32	s16, s14
 8008a08:	eef0 8a67 	vmov.f32	s17, s15
 8008a0c:	d016      	beq.n	8008a3c <_dtoa_r+0x384>
 8008a0e:	4bbc      	ldr	r3, [pc, #752]	; (8008d00 <_dtoa_r+0x648>)
 8008a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a18:	f7f7 ff18 	bl	800084c <__aeabi_ddiv>
 8008a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a20:	f007 070f 	and.w	r7, r7, #15
 8008a24:	2503      	movs	r5, #3
 8008a26:	4eb6      	ldr	r6, [pc, #728]	; (8008d00 <_dtoa_r+0x648>)
 8008a28:	b957      	cbnz	r7, 8008a40 <_dtoa_r+0x388>
 8008a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a2e:	ec53 2b18 	vmov	r2, r3, d8
 8008a32:	f7f7 ff0b 	bl	800084c <__aeabi_ddiv>
 8008a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a3a:	e029      	b.n	8008a90 <_dtoa_r+0x3d8>
 8008a3c:	2502      	movs	r5, #2
 8008a3e:	e7f2      	b.n	8008a26 <_dtoa_r+0x36e>
 8008a40:	07f9      	lsls	r1, r7, #31
 8008a42:	d508      	bpl.n	8008a56 <_dtoa_r+0x39e>
 8008a44:	ec51 0b18 	vmov	r0, r1, d8
 8008a48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a4c:	f7f7 fdd4 	bl	80005f8 <__aeabi_dmul>
 8008a50:	ec41 0b18 	vmov	d8, r0, r1
 8008a54:	3501      	adds	r5, #1
 8008a56:	107f      	asrs	r7, r7, #1
 8008a58:	3608      	adds	r6, #8
 8008a5a:	e7e5      	b.n	8008a28 <_dtoa_r+0x370>
 8008a5c:	f000 80a6 	beq.w	8008bac <_dtoa_r+0x4f4>
 8008a60:	f1ca 0600 	rsb	r6, sl, #0
 8008a64:	4ba5      	ldr	r3, [pc, #660]	; (8008cfc <_dtoa_r+0x644>)
 8008a66:	4fa6      	ldr	r7, [pc, #664]	; (8008d00 <_dtoa_r+0x648>)
 8008a68:	f006 020f 	and.w	r2, r6, #15
 8008a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a78:	f7f7 fdbe 	bl	80005f8 <__aeabi_dmul>
 8008a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a80:	1136      	asrs	r6, r6, #4
 8008a82:	2300      	movs	r3, #0
 8008a84:	2502      	movs	r5, #2
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	f040 8085 	bne.w	8008b96 <_dtoa_r+0x4de>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1d2      	bne.n	8008a36 <_dtoa_r+0x37e>
 8008a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 808c 	beq.w	8008bb0 <_dtoa_r+0x4f8>
 8008a98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a9c:	4b99      	ldr	r3, [pc, #612]	; (8008d04 <_dtoa_r+0x64c>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	f7f8 f81a 	bl	8000adc <__aeabi_dcmplt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f000 8081 	beq.w	8008bb0 <_dtoa_r+0x4f8>
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d07d      	beq.n	8008bb0 <_dtoa_r+0x4f8>
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	dd3c      	ble.n	8008b34 <_dtoa_r+0x47c>
 8008aba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4b91      	ldr	r3, [pc, #580]	; (8008d08 <_dtoa_r+0x650>)
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	f7f7 fd96 	bl	80005f8 <__aeabi_dmul>
 8008acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008ad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7f7 fd22 	bl	8000524 <__aeabi_i2d>
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	4b88      	ldr	r3, [pc, #544]	; (8008d0c <_dtoa_r+0x654>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	f7f7 fbce 	bl	800028c <__adddf3>
 8008af0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008af8:	9303      	str	r3, [sp, #12]
 8008afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d15c      	bne.n	8008bba <_dtoa_r+0x502>
 8008b00:	4b83      	ldr	r3, [pc, #524]	; (8008d10 <_dtoa_r+0x658>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f7f7 fbbe 	bl	8000288 <__aeabi_dsub>
 8008b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b10:	4606      	mov	r6, r0
 8008b12:	460f      	mov	r7, r1
 8008b14:	f7f8 f800 	bl	8000b18 <__aeabi_dcmpgt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f040 8296 	bne.w	800904a <_dtoa_r+0x992>
 8008b1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b22:	4630      	mov	r0, r6
 8008b24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f7f7 ffd7 	bl	8000adc <__aeabi_dcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f040 8288 	bne.w	8009044 <_dtoa_r+0x98c>
 8008b34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f2c0 8158 	blt.w	8008df4 <_dtoa_r+0x73c>
 8008b44:	f1ba 0f0e 	cmp.w	sl, #14
 8008b48:	f300 8154 	bgt.w	8008df4 <_dtoa_r+0x73c>
 8008b4c:	4b6b      	ldr	r3, [pc, #428]	; (8008cfc <_dtoa_r+0x644>)
 8008b4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f280 80e3 	bge.w	8008d24 <_dtoa_r+0x66c>
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f300 80df 	bgt.w	8008d24 <_dtoa_r+0x66c>
 8008b66:	f040 826d 	bne.w	8009044 <_dtoa_r+0x98c>
 8008b6a:	4b69      	ldr	r3, [pc, #420]	; (8008d10 <_dtoa_r+0x658>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4649      	mov	r1, r9
 8008b72:	f7f7 fd41 	bl	80005f8 <__aeabi_dmul>
 8008b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b7a:	f7f7 ffc3 	bl	8000b04 <__aeabi_dcmpge>
 8008b7e:	9e01      	ldr	r6, [sp, #4]
 8008b80:	4637      	mov	r7, r6
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f040 8243 	bne.w	800900e <_dtoa_r+0x956>
 8008b88:	9d00      	ldr	r5, [sp, #0]
 8008b8a:	2331      	movs	r3, #49	; 0x31
 8008b8c:	f805 3b01 	strb.w	r3, [r5], #1
 8008b90:	f10a 0a01 	add.w	sl, sl, #1
 8008b94:	e23f      	b.n	8009016 <_dtoa_r+0x95e>
 8008b96:	07f2      	lsls	r2, r6, #31
 8008b98:	d505      	bpl.n	8008ba6 <_dtoa_r+0x4ee>
 8008b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9e:	f7f7 fd2b 	bl	80005f8 <__aeabi_dmul>
 8008ba2:	3501      	adds	r5, #1
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	1076      	asrs	r6, r6, #1
 8008ba8:	3708      	adds	r7, #8
 8008baa:	e76c      	b.n	8008a86 <_dtoa_r+0x3ce>
 8008bac:	2502      	movs	r5, #2
 8008bae:	e76f      	b.n	8008a90 <_dtoa_r+0x3d8>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bb8:	e78d      	b.n	8008ad6 <_dtoa_r+0x41e>
 8008bba:	9900      	ldr	r1, [sp, #0]
 8008bbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bc0:	4b4e      	ldr	r3, [pc, #312]	; (8008cfc <_dtoa_r+0x644>)
 8008bc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bc6:	4401      	add	r1, r0
 8008bc8:	9102      	str	r1, [sp, #8]
 8008bca:	9908      	ldr	r1, [sp, #32]
 8008bcc:	eeb0 8a47 	vmov.f32	s16, s14
 8008bd0:	eef0 8a67 	vmov.f32	s17, s15
 8008bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d045      	beq.n	8008c6c <_dtoa_r+0x5b4>
 8008be0:	494c      	ldr	r1, [pc, #304]	; (8008d14 <_dtoa_r+0x65c>)
 8008be2:	2000      	movs	r0, #0
 8008be4:	f7f7 fe32 	bl	800084c <__aeabi_ddiv>
 8008be8:	ec53 2b18 	vmov	r2, r3, d8
 8008bec:	f7f7 fb4c 	bl	8000288 <__aeabi_dsub>
 8008bf0:	9d00      	ldr	r5, [sp, #0]
 8008bf2:	ec41 0b18 	vmov	d8, r0, r1
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7f7 ffad 	bl	8000b58 <__aeabi_d2iz>
 8008bfe:	900c      	str	r0, [sp, #48]	; 0x30
 8008c00:	f7f7 fc90 	bl	8000524 <__aeabi_i2d>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 fb3c 	bl	8000288 <__aeabi_dsub>
 8008c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c12:	3330      	adds	r3, #48	; 0x30
 8008c14:	f805 3b01 	strb.w	r3, [r5], #1
 8008c18:	ec53 2b18 	vmov	r2, r3, d8
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	460f      	mov	r7, r1
 8008c20:	f7f7 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d165      	bne.n	8008cf4 <_dtoa_r+0x63c>
 8008c28:	4632      	mov	r2, r6
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	4935      	ldr	r1, [pc, #212]	; (8008d04 <_dtoa_r+0x64c>)
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f7f7 fb2a 	bl	8000288 <__aeabi_dsub>
 8008c34:	ec53 2b18 	vmov	r2, r3, d8
 8008c38:	f7f7 ff50 	bl	8000adc <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f040 80b9 	bne.w	8008db4 <_dtoa_r+0x6fc>
 8008c42:	9b02      	ldr	r3, [sp, #8]
 8008c44:	429d      	cmp	r5, r3
 8008c46:	f43f af75 	beq.w	8008b34 <_dtoa_r+0x47c>
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <_dtoa_r+0x650>)
 8008c4c:	ec51 0b18 	vmov	r0, r1, d8
 8008c50:	2200      	movs	r2, #0
 8008c52:	f7f7 fcd1 	bl	80005f8 <__aeabi_dmul>
 8008c56:	4b2c      	ldr	r3, [pc, #176]	; (8008d08 <_dtoa_r+0x650>)
 8008c58:	ec41 0b18 	vmov	d8, r0, r1
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	4639      	mov	r1, r7
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	4606      	mov	r6, r0
 8008c68:	460f      	mov	r7, r1
 8008c6a:	e7c4      	b.n	8008bf6 <_dtoa_r+0x53e>
 8008c6c:	ec51 0b17 	vmov	r0, r1, d7
 8008c70:	f7f7 fcc2 	bl	80005f8 <__aeabi_dmul>
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	9d00      	ldr	r5, [sp, #0]
 8008c78:	930c      	str	r3, [sp, #48]	; 0x30
 8008c7a:	ec41 0b18 	vmov	d8, r0, r1
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7f7 ff69 	bl	8000b58 <__aeabi_d2iz>
 8008c86:	9011      	str	r0, [sp, #68]	; 0x44
 8008c88:	f7f7 fc4c 	bl	8000524 <__aeabi_i2d>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 faf8 	bl	8000288 <__aeabi_dsub>
 8008c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c9a:	3330      	adds	r3, #48	; 0x30
 8008c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	429d      	cmp	r5, r3
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	d134      	bne.n	8008d18 <_dtoa_r+0x660>
 8008cae:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <_dtoa_r+0x65c>)
 8008cb0:	ec51 0b18 	vmov	r0, r1, d8
 8008cb4:	f7f7 faea 	bl	800028c <__adddf3>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 ff2a 	bl	8000b18 <__aeabi_dcmpgt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d175      	bne.n	8008db4 <_dtoa_r+0x6fc>
 8008cc8:	ec53 2b18 	vmov	r2, r3, d8
 8008ccc:	4911      	ldr	r1, [pc, #68]	; (8008d14 <_dtoa_r+0x65c>)
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f7f7 fada 	bl	8000288 <__aeabi_dsub>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4630      	mov	r0, r6
 8008cda:	4639      	mov	r1, r7
 8008cdc:	f7f7 fefe 	bl	8000adc <__aeabi_dcmplt>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f43f af27 	beq.w	8008b34 <_dtoa_r+0x47c>
 8008ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ce8:	1e6b      	subs	r3, r5, #1
 8008cea:	930c      	str	r3, [sp, #48]	; 0x30
 8008cec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cf0:	2b30      	cmp	r3, #48	; 0x30
 8008cf2:	d0f8      	beq.n	8008ce6 <_dtoa_r+0x62e>
 8008cf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008cf8:	e04a      	b.n	8008d90 <_dtoa_r+0x6d8>
 8008cfa:	bf00      	nop
 8008cfc:	0800ac38 	.word	0x0800ac38
 8008d00:	0800ac10 	.word	0x0800ac10
 8008d04:	3ff00000 	.word	0x3ff00000
 8008d08:	40240000 	.word	0x40240000
 8008d0c:	401c0000 	.word	0x401c0000
 8008d10:	40140000 	.word	0x40140000
 8008d14:	3fe00000 	.word	0x3fe00000
 8008d18:	4baf      	ldr	r3, [pc, #700]	; (8008fd8 <_dtoa_r+0x920>)
 8008d1a:	f7f7 fc6d 	bl	80005f8 <__aeabi_dmul>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	e7ac      	b.n	8008c7e <_dtoa_r+0x5c6>
 8008d24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d28:	9d00      	ldr	r5, [sp, #0]
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	4630      	mov	r0, r6
 8008d30:	4639      	mov	r1, r7
 8008d32:	f7f7 fd8b 	bl	800084c <__aeabi_ddiv>
 8008d36:	f7f7 ff0f 	bl	8000b58 <__aeabi_d2iz>
 8008d3a:	9002      	str	r0, [sp, #8]
 8008d3c:	f7f7 fbf2 	bl	8000524 <__aeabi_i2d>
 8008d40:	4642      	mov	r2, r8
 8008d42:	464b      	mov	r3, r9
 8008d44:	f7f7 fc58 	bl	80005f8 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fa9a 	bl	8000288 <__aeabi_dsub>
 8008d54:	9e02      	ldr	r6, [sp, #8]
 8008d56:	9f01      	ldr	r7, [sp, #4]
 8008d58:	3630      	adds	r6, #48	; 0x30
 8008d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d5e:	9e00      	ldr	r6, [sp, #0]
 8008d60:	1bae      	subs	r6, r5, r6
 8008d62:	42b7      	cmp	r7, r6
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	d137      	bne.n	8008dda <_dtoa_r+0x722>
 8008d6a:	f7f7 fa8f 	bl	800028c <__adddf3>
 8008d6e:	4642      	mov	r2, r8
 8008d70:	464b      	mov	r3, r9
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	f7f7 fecf 	bl	8000b18 <__aeabi_dcmpgt>
 8008d7a:	b9c8      	cbnz	r0, 8008db0 <_dtoa_r+0x6f8>
 8008d7c:	4642      	mov	r2, r8
 8008d7e:	464b      	mov	r3, r9
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d88:	b110      	cbz	r0, 8008d90 <_dtoa_r+0x6d8>
 8008d8a:	9b02      	ldr	r3, [sp, #8]
 8008d8c:	07d9      	lsls	r1, r3, #31
 8008d8e:	d40f      	bmi.n	8008db0 <_dtoa_r+0x6f8>
 8008d90:	4620      	mov	r0, r4
 8008d92:	4659      	mov	r1, fp
 8008d94:	f000 fac8 	bl	8009328 <_Bfree>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	702b      	strb	r3, [r5, #0]
 8008d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d9e:	f10a 0001 	add.w	r0, sl, #1
 8008da2:	6018      	str	r0, [r3, #0]
 8008da4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f43f acd8 	beq.w	800875c <_dtoa_r+0xa4>
 8008dac:	601d      	str	r5, [r3, #0]
 8008dae:	e4d5      	b.n	800875c <_dtoa_r+0xa4>
 8008db0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008db4:	462b      	mov	r3, r5
 8008db6:	461d      	mov	r5, r3
 8008db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dbc:	2a39      	cmp	r2, #57	; 0x39
 8008dbe:	d108      	bne.n	8008dd2 <_dtoa_r+0x71a>
 8008dc0:	9a00      	ldr	r2, [sp, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d1f7      	bne.n	8008db6 <_dtoa_r+0x6fe>
 8008dc6:	9a07      	ldr	r2, [sp, #28]
 8008dc8:	9900      	ldr	r1, [sp, #0]
 8008dca:	3201      	adds	r2, #1
 8008dcc:	9207      	str	r2, [sp, #28]
 8008dce:	2230      	movs	r2, #48	; 0x30
 8008dd0:	700a      	strb	r2, [r1, #0]
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	3201      	adds	r2, #1
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	e78c      	b.n	8008cf4 <_dtoa_r+0x63c>
 8008dda:	4b7f      	ldr	r3, [pc, #508]	; (8008fd8 <_dtoa_r+0x920>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f7f7 fc0b 	bl	80005f8 <__aeabi_dmul>
 8008de2:	2200      	movs	r2, #0
 8008de4:	2300      	movs	r3, #0
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	f7f7 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d09b      	beq.n	8008d2a <_dtoa_r+0x672>
 8008df2:	e7cd      	b.n	8008d90 <_dtoa_r+0x6d8>
 8008df4:	9a08      	ldr	r2, [sp, #32]
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	f000 80c4 	beq.w	8008f84 <_dtoa_r+0x8cc>
 8008dfc:	9a05      	ldr	r2, [sp, #20]
 8008dfe:	2a01      	cmp	r2, #1
 8008e00:	f300 80a8 	bgt.w	8008f54 <_dtoa_r+0x89c>
 8008e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	f000 80a0 	beq.w	8008f4c <_dtoa_r+0x894>
 8008e0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e10:	9e06      	ldr	r6, [sp, #24]
 8008e12:	4645      	mov	r5, r8
 8008e14:	9a04      	ldr	r2, [sp, #16]
 8008e16:	2101      	movs	r1, #1
 8008e18:	441a      	add	r2, r3
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4498      	add	r8, r3
 8008e1e:	9204      	str	r2, [sp, #16]
 8008e20:	f000 fb3e 	bl	80094a0 <__i2b>
 8008e24:	4607      	mov	r7, r0
 8008e26:	2d00      	cmp	r5, #0
 8008e28:	dd0b      	ble.n	8008e42 <_dtoa_r+0x78a>
 8008e2a:	9b04      	ldr	r3, [sp, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dd08      	ble.n	8008e42 <_dtoa_r+0x78a>
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	9a04      	ldr	r2, [sp, #16]
 8008e34:	bfa8      	it	ge
 8008e36:	462b      	movge	r3, r5
 8008e38:	eba8 0803 	sub.w	r8, r8, r3
 8008e3c:	1aed      	subs	r5, r5, r3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	9b06      	ldr	r3, [sp, #24]
 8008e44:	b1fb      	cbz	r3, 8008e86 <_dtoa_r+0x7ce>
 8008e46:	9b08      	ldr	r3, [sp, #32]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 809f 	beq.w	8008f8c <_dtoa_r+0x8d4>
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	dd11      	ble.n	8008e76 <_dtoa_r+0x7be>
 8008e52:	4639      	mov	r1, r7
 8008e54:	4632      	mov	r2, r6
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 fbde 	bl	8009618 <__pow5mult>
 8008e5c:	465a      	mov	r2, fp
 8008e5e:	4601      	mov	r1, r0
 8008e60:	4607      	mov	r7, r0
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fb32 	bl	80094cc <__multiply>
 8008e68:	4659      	mov	r1, fp
 8008e6a:	9007      	str	r0, [sp, #28]
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fa5b 	bl	8009328 <_Bfree>
 8008e72:	9b07      	ldr	r3, [sp, #28]
 8008e74:	469b      	mov	fp, r3
 8008e76:	9b06      	ldr	r3, [sp, #24]
 8008e78:	1b9a      	subs	r2, r3, r6
 8008e7a:	d004      	beq.n	8008e86 <_dtoa_r+0x7ce>
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 fbca 	bl	8009618 <__pow5mult>
 8008e84:	4683      	mov	fp, r0
 8008e86:	2101      	movs	r1, #1
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fb09 	bl	80094a0 <__i2b>
 8008e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	4606      	mov	r6, r0
 8008e94:	dd7c      	ble.n	8008f90 <_dtoa_r+0x8d8>
 8008e96:	461a      	mov	r2, r3
 8008e98:	4601      	mov	r1, r0
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fbbc 	bl	8009618 <__pow5mult>
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	dd76      	ble.n	8008f96 <_dtoa_r+0x8de>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9306      	str	r3, [sp, #24]
 8008eac:	6933      	ldr	r3, [r6, #16]
 8008eae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008eb2:	6918      	ldr	r0, [r3, #16]
 8008eb4:	f000 faa4 	bl	8009400 <__hi0bits>
 8008eb8:	f1c0 0020 	rsb	r0, r0, #32
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	4418      	add	r0, r3
 8008ec0:	f010 001f 	ands.w	r0, r0, #31
 8008ec4:	f000 8086 	beq.w	8008fd4 <_dtoa_r+0x91c>
 8008ec8:	f1c0 0320 	rsb	r3, r0, #32
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	dd7f      	ble.n	8008fd0 <_dtoa_r+0x918>
 8008ed0:	f1c0 001c 	rsb	r0, r0, #28
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	4403      	add	r3, r0
 8008ed8:	4480      	add	r8, r0
 8008eda:	4405      	add	r5, r0
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	dd05      	ble.n	8008ef0 <_dtoa_r+0x838>
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fbef 	bl	80096cc <__lshift>
 8008eee:	4683      	mov	fp, r0
 8008ef0:	9b04      	ldr	r3, [sp, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dd05      	ble.n	8008f02 <_dtoa_r+0x84a>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fbe6 	bl	80096cc <__lshift>
 8008f00:	4606      	mov	r6, r0
 8008f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d069      	beq.n	8008fdc <_dtoa_r+0x924>
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4658      	mov	r0, fp
 8008f0c:	f000 fc4a 	bl	80097a4 <__mcmp>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	da63      	bge.n	8008fdc <_dtoa_r+0x924>
 8008f14:	2300      	movs	r3, #0
 8008f16:	4659      	mov	r1, fp
 8008f18:	220a      	movs	r2, #10
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fa26 	bl	800936c <__multadd>
 8008f20:	9b08      	ldr	r3, [sp, #32]
 8008f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f26:	4683      	mov	fp, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 818f 	beq.w	800924c <_dtoa_r+0xb94>
 8008f2e:	4639      	mov	r1, r7
 8008f30:	2300      	movs	r3, #0
 8008f32:	220a      	movs	r2, #10
 8008f34:	4620      	mov	r0, r4
 8008f36:	f000 fa19 	bl	800936c <__multadd>
 8008f3a:	f1b9 0f00 	cmp.w	r9, #0
 8008f3e:	4607      	mov	r7, r0
 8008f40:	f300 808e 	bgt.w	8009060 <_dtoa_r+0x9a8>
 8008f44:	9b05      	ldr	r3, [sp, #20]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	dc50      	bgt.n	8008fec <_dtoa_r+0x934>
 8008f4a:	e089      	b.n	8009060 <_dtoa_r+0x9a8>
 8008f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f52:	e75d      	b.n	8008e10 <_dtoa_r+0x758>
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	1e5e      	subs	r6, r3, #1
 8008f58:	9b06      	ldr	r3, [sp, #24]
 8008f5a:	42b3      	cmp	r3, r6
 8008f5c:	bfbf      	itttt	lt
 8008f5e:	9b06      	ldrlt	r3, [sp, #24]
 8008f60:	9606      	strlt	r6, [sp, #24]
 8008f62:	1af2      	sublt	r2, r6, r3
 8008f64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008f66:	bfb6      	itet	lt
 8008f68:	189b      	addlt	r3, r3, r2
 8008f6a:	1b9e      	subge	r6, r3, r6
 8008f6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	bfb8      	it	lt
 8008f72:	2600      	movlt	r6, #0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfb5      	itete	lt
 8008f78:	eba8 0503 	sublt.w	r5, r8, r3
 8008f7c:	9b01      	ldrge	r3, [sp, #4]
 8008f7e:	2300      	movlt	r3, #0
 8008f80:	4645      	movge	r5, r8
 8008f82:	e747      	b.n	8008e14 <_dtoa_r+0x75c>
 8008f84:	9e06      	ldr	r6, [sp, #24]
 8008f86:	9f08      	ldr	r7, [sp, #32]
 8008f88:	4645      	mov	r5, r8
 8008f8a:	e74c      	b.n	8008e26 <_dtoa_r+0x76e>
 8008f8c:	9a06      	ldr	r2, [sp, #24]
 8008f8e:	e775      	b.n	8008e7c <_dtoa_r+0x7c4>
 8008f90:	9b05      	ldr	r3, [sp, #20]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	dc18      	bgt.n	8008fc8 <_dtoa_r+0x910>
 8008f96:	9b02      	ldr	r3, [sp, #8]
 8008f98:	b9b3      	cbnz	r3, 8008fc8 <_dtoa_r+0x910>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa0:	b9a3      	cbnz	r3, 8008fcc <_dtoa_r+0x914>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fa8:	0d1b      	lsrs	r3, r3, #20
 8008faa:	051b      	lsls	r3, r3, #20
 8008fac:	b12b      	cbz	r3, 8008fba <_dtoa_r+0x902>
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	f108 0801 	add.w	r8, r8, #1
 8008fb8:	2301      	movs	r3, #1
 8008fba:	9306      	str	r3, [sp, #24]
 8008fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f47f af74 	bne.w	8008eac <_dtoa_r+0x7f4>
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	e779      	b.n	8008ebc <_dtoa_r+0x804>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e7f6      	b.n	8008fba <_dtoa_r+0x902>
 8008fcc:	9b02      	ldr	r3, [sp, #8]
 8008fce:	e7f4      	b.n	8008fba <_dtoa_r+0x902>
 8008fd0:	d085      	beq.n	8008ede <_dtoa_r+0x826>
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	301c      	adds	r0, #28
 8008fd6:	e77d      	b.n	8008ed4 <_dtoa_r+0x81c>
 8008fd8:	40240000 	.word	0x40240000
 8008fdc:	9b01      	ldr	r3, [sp, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dc38      	bgt.n	8009054 <_dtoa_r+0x99c>
 8008fe2:	9b05      	ldr	r3, [sp, #20]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	dd35      	ble.n	8009054 <_dtoa_r+0x99c>
 8008fe8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008fec:	f1b9 0f00 	cmp.w	r9, #0
 8008ff0:	d10d      	bne.n	800900e <_dtoa_r+0x956>
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	2205      	movs	r2, #5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 f9b7 	bl	800936c <__multadd>
 8008ffe:	4601      	mov	r1, r0
 8009000:	4606      	mov	r6, r0
 8009002:	4658      	mov	r0, fp
 8009004:	f000 fbce 	bl	80097a4 <__mcmp>
 8009008:	2800      	cmp	r0, #0
 800900a:	f73f adbd 	bgt.w	8008b88 <_dtoa_r+0x4d0>
 800900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009010:	9d00      	ldr	r5, [sp, #0]
 8009012:	ea6f 0a03 	mvn.w	sl, r3
 8009016:	f04f 0800 	mov.w	r8, #0
 800901a:	4631      	mov	r1, r6
 800901c:	4620      	mov	r0, r4
 800901e:	f000 f983 	bl	8009328 <_Bfree>
 8009022:	2f00      	cmp	r7, #0
 8009024:	f43f aeb4 	beq.w	8008d90 <_dtoa_r+0x6d8>
 8009028:	f1b8 0f00 	cmp.w	r8, #0
 800902c:	d005      	beq.n	800903a <_dtoa_r+0x982>
 800902e:	45b8      	cmp	r8, r7
 8009030:	d003      	beq.n	800903a <_dtoa_r+0x982>
 8009032:	4641      	mov	r1, r8
 8009034:	4620      	mov	r0, r4
 8009036:	f000 f977 	bl	8009328 <_Bfree>
 800903a:	4639      	mov	r1, r7
 800903c:	4620      	mov	r0, r4
 800903e:	f000 f973 	bl	8009328 <_Bfree>
 8009042:	e6a5      	b.n	8008d90 <_dtoa_r+0x6d8>
 8009044:	2600      	movs	r6, #0
 8009046:	4637      	mov	r7, r6
 8009048:	e7e1      	b.n	800900e <_dtoa_r+0x956>
 800904a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800904c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009050:	4637      	mov	r7, r6
 8009052:	e599      	b.n	8008b88 <_dtoa_r+0x4d0>
 8009054:	9b08      	ldr	r3, [sp, #32]
 8009056:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80fd 	beq.w	800925a <_dtoa_r+0xba2>
 8009060:	2d00      	cmp	r5, #0
 8009062:	dd05      	ble.n	8009070 <_dtoa_r+0x9b8>
 8009064:	4639      	mov	r1, r7
 8009066:	462a      	mov	r2, r5
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fb2f 	bl	80096cc <__lshift>
 800906e:	4607      	mov	r7, r0
 8009070:	9b06      	ldr	r3, [sp, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d05c      	beq.n	8009130 <_dtoa_r+0xa78>
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	4620      	mov	r0, r4
 800907a:	f000 f915 	bl	80092a8 <_Balloc>
 800907e:	4605      	mov	r5, r0
 8009080:	b928      	cbnz	r0, 800908e <_dtoa_r+0x9d6>
 8009082:	4b80      	ldr	r3, [pc, #512]	; (8009284 <_dtoa_r+0xbcc>)
 8009084:	4602      	mov	r2, r0
 8009086:	f240 21ea 	movw	r1, #746	; 0x2ea
 800908a:	f7ff bb2e 	b.w	80086ea <_dtoa_r+0x32>
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	3202      	adds	r2, #2
 8009092:	0092      	lsls	r2, r2, #2
 8009094:	f107 010c 	add.w	r1, r7, #12
 8009098:	300c      	adds	r0, #12
 800909a:	f7fe fde1 	bl	8007c60 <memcpy>
 800909e:	2201      	movs	r2, #1
 80090a0:	4629      	mov	r1, r5
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 fb12 	bl	80096cc <__lshift>
 80090a8:	9b00      	ldr	r3, [sp, #0]
 80090aa:	3301      	adds	r3, #1
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	9b00      	ldr	r3, [sp, #0]
 80090b0:	444b      	add	r3, r9
 80090b2:	9307      	str	r3, [sp, #28]
 80090b4:	9b02      	ldr	r3, [sp, #8]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	46b8      	mov	r8, r7
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	4607      	mov	r7, r0
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	4631      	mov	r1, r6
 80090c4:	3b01      	subs	r3, #1
 80090c6:	4658      	mov	r0, fp
 80090c8:	9302      	str	r3, [sp, #8]
 80090ca:	f7ff fa69 	bl	80085a0 <quorem>
 80090ce:	4603      	mov	r3, r0
 80090d0:	3330      	adds	r3, #48	; 0x30
 80090d2:	9004      	str	r0, [sp, #16]
 80090d4:	4641      	mov	r1, r8
 80090d6:	4658      	mov	r0, fp
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	f000 fb63 	bl	80097a4 <__mcmp>
 80090de:	463a      	mov	r2, r7
 80090e0:	4681      	mov	r9, r0
 80090e2:	4631      	mov	r1, r6
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fb79 	bl	80097dc <__mdiff>
 80090ea:	68c2      	ldr	r2, [r0, #12]
 80090ec:	9b08      	ldr	r3, [sp, #32]
 80090ee:	4605      	mov	r5, r0
 80090f0:	bb02      	cbnz	r2, 8009134 <_dtoa_r+0xa7c>
 80090f2:	4601      	mov	r1, r0
 80090f4:	4658      	mov	r0, fp
 80090f6:	f000 fb55 	bl	80097a4 <__mcmp>
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	4602      	mov	r2, r0
 80090fe:	4629      	mov	r1, r5
 8009100:	4620      	mov	r0, r4
 8009102:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009106:	f000 f90f 	bl	8009328 <_Bfree>
 800910a:	9b05      	ldr	r3, [sp, #20]
 800910c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800910e:	9d01      	ldr	r5, [sp, #4]
 8009110:	ea43 0102 	orr.w	r1, r3, r2
 8009114:	9b06      	ldr	r3, [sp, #24]
 8009116:	430b      	orrs	r3, r1
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	d10d      	bne.n	8009138 <_dtoa_r+0xa80>
 800911c:	2b39      	cmp	r3, #57	; 0x39
 800911e:	d029      	beq.n	8009174 <_dtoa_r+0xabc>
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	dd01      	ble.n	800912a <_dtoa_r+0xa72>
 8009126:	9b04      	ldr	r3, [sp, #16]
 8009128:	3331      	adds	r3, #49	; 0x31
 800912a:	9a02      	ldr	r2, [sp, #8]
 800912c:	7013      	strb	r3, [r2, #0]
 800912e:	e774      	b.n	800901a <_dtoa_r+0x962>
 8009130:	4638      	mov	r0, r7
 8009132:	e7b9      	b.n	80090a8 <_dtoa_r+0x9f0>
 8009134:	2201      	movs	r2, #1
 8009136:	e7e2      	b.n	80090fe <_dtoa_r+0xa46>
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	db06      	blt.n	800914c <_dtoa_r+0xa94>
 800913e:	9905      	ldr	r1, [sp, #20]
 8009140:	ea41 0909 	orr.w	r9, r1, r9
 8009144:	9906      	ldr	r1, [sp, #24]
 8009146:	ea59 0101 	orrs.w	r1, r9, r1
 800914a:	d120      	bne.n	800918e <_dtoa_r+0xad6>
 800914c:	2a00      	cmp	r2, #0
 800914e:	ddec      	ble.n	800912a <_dtoa_r+0xa72>
 8009150:	4659      	mov	r1, fp
 8009152:	2201      	movs	r2, #1
 8009154:	4620      	mov	r0, r4
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	f000 fab8 	bl	80096cc <__lshift>
 800915c:	4631      	mov	r1, r6
 800915e:	4683      	mov	fp, r0
 8009160:	f000 fb20 	bl	80097a4 <__mcmp>
 8009164:	2800      	cmp	r0, #0
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	dc02      	bgt.n	8009170 <_dtoa_r+0xab8>
 800916a:	d1de      	bne.n	800912a <_dtoa_r+0xa72>
 800916c:	07da      	lsls	r2, r3, #31
 800916e:	d5dc      	bpl.n	800912a <_dtoa_r+0xa72>
 8009170:	2b39      	cmp	r3, #57	; 0x39
 8009172:	d1d8      	bne.n	8009126 <_dtoa_r+0xa6e>
 8009174:	9a02      	ldr	r2, [sp, #8]
 8009176:	2339      	movs	r3, #57	; 0x39
 8009178:	7013      	strb	r3, [r2, #0]
 800917a:	462b      	mov	r3, r5
 800917c:	461d      	mov	r5, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009184:	2a39      	cmp	r2, #57	; 0x39
 8009186:	d050      	beq.n	800922a <_dtoa_r+0xb72>
 8009188:	3201      	adds	r2, #1
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	e745      	b.n	800901a <_dtoa_r+0x962>
 800918e:	2a00      	cmp	r2, #0
 8009190:	dd03      	ble.n	800919a <_dtoa_r+0xae2>
 8009192:	2b39      	cmp	r3, #57	; 0x39
 8009194:	d0ee      	beq.n	8009174 <_dtoa_r+0xabc>
 8009196:	3301      	adds	r3, #1
 8009198:	e7c7      	b.n	800912a <_dtoa_r+0xa72>
 800919a:	9a01      	ldr	r2, [sp, #4]
 800919c:	9907      	ldr	r1, [sp, #28]
 800919e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091a2:	428a      	cmp	r2, r1
 80091a4:	d02a      	beq.n	80091fc <_dtoa_r+0xb44>
 80091a6:	4659      	mov	r1, fp
 80091a8:	2300      	movs	r3, #0
 80091aa:	220a      	movs	r2, #10
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 f8dd 	bl	800936c <__multadd>
 80091b2:	45b8      	cmp	r8, r7
 80091b4:	4683      	mov	fp, r0
 80091b6:	f04f 0300 	mov.w	r3, #0
 80091ba:	f04f 020a 	mov.w	r2, #10
 80091be:	4641      	mov	r1, r8
 80091c0:	4620      	mov	r0, r4
 80091c2:	d107      	bne.n	80091d4 <_dtoa_r+0xb1c>
 80091c4:	f000 f8d2 	bl	800936c <__multadd>
 80091c8:	4680      	mov	r8, r0
 80091ca:	4607      	mov	r7, r0
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	3301      	adds	r3, #1
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	e775      	b.n	80090c0 <_dtoa_r+0xa08>
 80091d4:	f000 f8ca 	bl	800936c <__multadd>
 80091d8:	4639      	mov	r1, r7
 80091da:	4680      	mov	r8, r0
 80091dc:	2300      	movs	r3, #0
 80091de:	220a      	movs	r2, #10
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 f8c3 	bl	800936c <__multadd>
 80091e6:	4607      	mov	r7, r0
 80091e8:	e7f0      	b.n	80091cc <_dtoa_r+0xb14>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	9a00      	ldr	r2, [sp, #0]
 80091f0:	bfcc      	ite	gt
 80091f2:	464d      	movgt	r5, r9
 80091f4:	2501      	movle	r5, #1
 80091f6:	4415      	add	r5, r2
 80091f8:	f04f 0800 	mov.w	r8, #0
 80091fc:	4659      	mov	r1, fp
 80091fe:	2201      	movs	r2, #1
 8009200:	4620      	mov	r0, r4
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	f000 fa62 	bl	80096cc <__lshift>
 8009208:	4631      	mov	r1, r6
 800920a:	4683      	mov	fp, r0
 800920c:	f000 faca 	bl	80097a4 <__mcmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	dcb2      	bgt.n	800917a <_dtoa_r+0xac2>
 8009214:	d102      	bne.n	800921c <_dtoa_r+0xb64>
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	07db      	lsls	r3, r3, #31
 800921a:	d4ae      	bmi.n	800917a <_dtoa_r+0xac2>
 800921c:	462b      	mov	r3, r5
 800921e:	461d      	mov	r5, r3
 8009220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009224:	2a30      	cmp	r2, #48	; 0x30
 8009226:	d0fa      	beq.n	800921e <_dtoa_r+0xb66>
 8009228:	e6f7      	b.n	800901a <_dtoa_r+0x962>
 800922a:	9a00      	ldr	r2, [sp, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d1a5      	bne.n	800917c <_dtoa_r+0xac4>
 8009230:	f10a 0a01 	add.w	sl, sl, #1
 8009234:	2331      	movs	r3, #49	; 0x31
 8009236:	e779      	b.n	800912c <_dtoa_r+0xa74>
 8009238:	4b13      	ldr	r3, [pc, #76]	; (8009288 <_dtoa_r+0xbd0>)
 800923a:	f7ff baaf 	b.w	800879c <_dtoa_r+0xe4>
 800923e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009240:	2b00      	cmp	r3, #0
 8009242:	f47f aa86 	bne.w	8008752 <_dtoa_r+0x9a>
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <_dtoa_r+0xbd4>)
 8009248:	f7ff baa8 	b.w	800879c <_dtoa_r+0xe4>
 800924c:	f1b9 0f00 	cmp.w	r9, #0
 8009250:	dc03      	bgt.n	800925a <_dtoa_r+0xba2>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	2b02      	cmp	r3, #2
 8009256:	f73f aec9 	bgt.w	8008fec <_dtoa_r+0x934>
 800925a:	9d00      	ldr	r5, [sp, #0]
 800925c:	4631      	mov	r1, r6
 800925e:	4658      	mov	r0, fp
 8009260:	f7ff f99e 	bl	80085a0 <quorem>
 8009264:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009268:	f805 3b01 	strb.w	r3, [r5], #1
 800926c:	9a00      	ldr	r2, [sp, #0]
 800926e:	1aaa      	subs	r2, r5, r2
 8009270:	4591      	cmp	r9, r2
 8009272:	ddba      	ble.n	80091ea <_dtoa_r+0xb32>
 8009274:	4659      	mov	r1, fp
 8009276:	2300      	movs	r3, #0
 8009278:	220a      	movs	r2, #10
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f876 	bl	800936c <__multadd>
 8009280:	4683      	mov	fp, r0
 8009282:	e7eb      	b.n	800925c <_dtoa_r+0xba4>
 8009284:	0800ab9b 	.word	0x0800ab9b
 8009288:	0800aaf4 	.word	0x0800aaf4
 800928c:	0800ab18 	.word	0x0800ab18

08009290 <_localeconv_r>:
 8009290:	4800      	ldr	r0, [pc, #0]	; (8009294 <_localeconv_r+0x4>)
 8009292:	4770      	bx	lr
 8009294:	200001a8 	.word	0x200001a8

08009298 <malloc>:
 8009298:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <malloc+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f000 bbe1 	b.w	8009a64 <_malloc_r>
 80092a2:	bf00      	nop
 80092a4:	20000054 	.word	0x20000054

080092a8 <_Balloc>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	b976      	cbnz	r6, 80092d0 <_Balloc+0x28>
 80092b2:	2010      	movs	r0, #16
 80092b4:	f7ff fff0 	bl	8009298 <malloc>
 80092b8:	4602      	mov	r2, r0
 80092ba:	6260      	str	r0, [r4, #36]	; 0x24
 80092bc:	b920      	cbnz	r0, 80092c8 <_Balloc+0x20>
 80092be:	4b18      	ldr	r3, [pc, #96]	; (8009320 <_Balloc+0x78>)
 80092c0:	4818      	ldr	r0, [pc, #96]	; (8009324 <_Balloc+0x7c>)
 80092c2:	2166      	movs	r1, #102	; 0x66
 80092c4:	f000 fd94 	bl	8009df0 <__assert_func>
 80092c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092cc:	6006      	str	r6, [r0, #0]
 80092ce:	60c6      	str	r6, [r0, #12]
 80092d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092d2:	68f3      	ldr	r3, [r6, #12]
 80092d4:	b183      	cbz	r3, 80092f8 <_Balloc+0x50>
 80092d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092de:	b9b8      	cbnz	r0, 8009310 <_Balloc+0x68>
 80092e0:	2101      	movs	r1, #1
 80092e2:	fa01 f605 	lsl.w	r6, r1, r5
 80092e6:	1d72      	adds	r2, r6, #5
 80092e8:	0092      	lsls	r2, r2, #2
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fb5a 	bl	80099a4 <_calloc_r>
 80092f0:	b160      	cbz	r0, 800930c <_Balloc+0x64>
 80092f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092f6:	e00e      	b.n	8009316 <_Balloc+0x6e>
 80092f8:	2221      	movs	r2, #33	; 0x21
 80092fa:	2104      	movs	r1, #4
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fb51 	bl	80099a4 <_calloc_r>
 8009302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009304:	60f0      	str	r0, [r6, #12]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e4      	bne.n	80092d6 <_Balloc+0x2e>
 800930c:	2000      	movs	r0, #0
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	6802      	ldr	r2, [r0, #0]
 8009312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009316:	2300      	movs	r3, #0
 8009318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800931c:	e7f7      	b.n	800930e <_Balloc+0x66>
 800931e:	bf00      	nop
 8009320:	0800ab25 	.word	0x0800ab25
 8009324:	0800abac 	.word	0x0800abac

08009328 <_Bfree>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800932c:	4605      	mov	r5, r0
 800932e:	460c      	mov	r4, r1
 8009330:	b976      	cbnz	r6, 8009350 <_Bfree+0x28>
 8009332:	2010      	movs	r0, #16
 8009334:	f7ff ffb0 	bl	8009298 <malloc>
 8009338:	4602      	mov	r2, r0
 800933a:	6268      	str	r0, [r5, #36]	; 0x24
 800933c:	b920      	cbnz	r0, 8009348 <_Bfree+0x20>
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <_Bfree+0x3c>)
 8009340:	4809      	ldr	r0, [pc, #36]	; (8009368 <_Bfree+0x40>)
 8009342:	218a      	movs	r1, #138	; 0x8a
 8009344:	f000 fd54 	bl	8009df0 <__assert_func>
 8009348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800934c:	6006      	str	r6, [r0, #0]
 800934e:	60c6      	str	r6, [r0, #12]
 8009350:	b13c      	cbz	r4, 8009362 <_Bfree+0x3a>
 8009352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009354:	6862      	ldr	r2, [r4, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800935c:	6021      	str	r1, [r4, #0]
 800935e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	0800ab25 	.word	0x0800ab25
 8009368:	0800abac 	.word	0x0800abac

0800936c <__multadd>:
 800936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	690e      	ldr	r6, [r1, #16]
 8009372:	4607      	mov	r7, r0
 8009374:	4698      	mov	r8, r3
 8009376:	460c      	mov	r4, r1
 8009378:	f101 0014 	add.w	r0, r1, #20
 800937c:	2300      	movs	r3, #0
 800937e:	6805      	ldr	r5, [r0, #0]
 8009380:	b2a9      	uxth	r1, r5
 8009382:	fb02 8101 	mla	r1, r2, r1, r8
 8009386:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800938a:	0c2d      	lsrs	r5, r5, #16
 800938c:	fb02 c505 	mla	r5, r2, r5, ip
 8009390:	b289      	uxth	r1, r1
 8009392:	3301      	adds	r3, #1
 8009394:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009398:	429e      	cmp	r6, r3
 800939a:	f840 1b04 	str.w	r1, [r0], #4
 800939e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80093a2:	dcec      	bgt.n	800937e <__multadd+0x12>
 80093a4:	f1b8 0f00 	cmp.w	r8, #0
 80093a8:	d022      	beq.n	80093f0 <__multadd+0x84>
 80093aa:	68a3      	ldr	r3, [r4, #8]
 80093ac:	42b3      	cmp	r3, r6
 80093ae:	dc19      	bgt.n	80093e4 <__multadd+0x78>
 80093b0:	6861      	ldr	r1, [r4, #4]
 80093b2:	4638      	mov	r0, r7
 80093b4:	3101      	adds	r1, #1
 80093b6:	f7ff ff77 	bl	80092a8 <_Balloc>
 80093ba:	4605      	mov	r5, r0
 80093bc:	b928      	cbnz	r0, 80093ca <__multadd+0x5e>
 80093be:	4602      	mov	r2, r0
 80093c0:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <__multadd+0x8c>)
 80093c2:	480e      	ldr	r0, [pc, #56]	; (80093fc <__multadd+0x90>)
 80093c4:	21b5      	movs	r1, #181	; 0xb5
 80093c6:	f000 fd13 	bl	8009df0 <__assert_func>
 80093ca:	6922      	ldr	r2, [r4, #16]
 80093cc:	3202      	adds	r2, #2
 80093ce:	f104 010c 	add.w	r1, r4, #12
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	300c      	adds	r0, #12
 80093d6:	f7fe fc43 	bl	8007c60 <memcpy>
 80093da:	4621      	mov	r1, r4
 80093dc:	4638      	mov	r0, r7
 80093de:	f7ff ffa3 	bl	8009328 <_Bfree>
 80093e2:	462c      	mov	r4, r5
 80093e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80093e8:	3601      	adds	r6, #1
 80093ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80093ee:	6126      	str	r6, [r4, #16]
 80093f0:	4620      	mov	r0, r4
 80093f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f6:	bf00      	nop
 80093f8:	0800ab9b 	.word	0x0800ab9b
 80093fc:	0800abac 	.word	0x0800abac

08009400 <__hi0bits>:
 8009400:	0c03      	lsrs	r3, r0, #16
 8009402:	041b      	lsls	r3, r3, #16
 8009404:	b9d3      	cbnz	r3, 800943c <__hi0bits+0x3c>
 8009406:	0400      	lsls	r0, r0, #16
 8009408:	2310      	movs	r3, #16
 800940a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800940e:	bf04      	itt	eq
 8009410:	0200      	lsleq	r0, r0, #8
 8009412:	3308      	addeq	r3, #8
 8009414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009418:	bf04      	itt	eq
 800941a:	0100      	lsleq	r0, r0, #4
 800941c:	3304      	addeq	r3, #4
 800941e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009422:	bf04      	itt	eq
 8009424:	0080      	lsleq	r0, r0, #2
 8009426:	3302      	addeq	r3, #2
 8009428:	2800      	cmp	r0, #0
 800942a:	db05      	blt.n	8009438 <__hi0bits+0x38>
 800942c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009430:	f103 0301 	add.w	r3, r3, #1
 8009434:	bf08      	it	eq
 8009436:	2320      	moveq	r3, #32
 8009438:	4618      	mov	r0, r3
 800943a:	4770      	bx	lr
 800943c:	2300      	movs	r3, #0
 800943e:	e7e4      	b.n	800940a <__hi0bits+0xa>

08009440 <__lo0bits>:
 8009440:	6803      	ldr	r3, [r0, #0]
 8009442:	f013 0207 	ands.w	r2, r3, #7
 8009446:	4601      	mov	r1, r0
 8009448:	d00b      	beq.n	8009462 <__lo0bits+0x22>
 800944a:	07da      	lsls	r2, r3, #31
 800944c:	d424      	bmi.n	8009498 <__lo0bits+0x58>
 800944e:	0798      	lsls	r0, r3, #30
 8009450:	bf49      	itett	mi
 8009452:	085b      	lsrmi	r3, r3, #1
 8009454:	089b      	lsrpl	r3, r3, #2
 8009456:	2001      	movmi	r0, #1
 8009458:	600b      	strmi	r3, [r1, #0]
 800945a:	bf5c      	itt	pl
 800945c:	600b      	strpl	r3, [r1, #0]
 800945e:	2002      	movpl	r0, #2
 8009460:	4770      	bx	lr
 8009462:	b298      	uxth	r0, r3
 8009464:	b9b0      	cbnz	r0, 8009494 <__lo0bits+0x54>
 8009466:	0c1b      	lsrs	r3, r3, #16
 8009468:	2010      	movs	r0, #16
 800946a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800946e:	bf04      	itt	eq
 8009470:	0a1b      	lsreq	r3, r3, #8
 8009472:	3008      	addeq	r0, #8
 8009474:	071a      	lsls	r2, r3, #28
 8009476:	bf04      	itt	eq
 8009478:	091b      	lsreq	r3, r3, #4
 800947a:	3004      	addeq	r0, #4
 800947c:	079a      	lsls	r2, r3, #30
 800947e:	bf04      	itt	eq
 8009480:	089b      	lsreq	r3, r3, #2
 8009482:	3002      	addeq	r0, #2
 8009484:	07da      	lsls	r2, r3, #31
 8009486:	d403      	bmi.n	8009490 <__lo0bits+0x50>
 8009488:	085b      	lsrs	r3, r3, #1
 800948a:	f100 0001 	add.w	r0, r0, #1
 800948e:	d005      	beq.n	800949c <__lo0bits+0x5c>
 8009490:	600b      	str	r3, [r1, #0]
 8009492:	4770      	bx	lr
 8009494:	4610      	mov	r0, r2
 8009496:	e7e8      	b.n	800946a <__lo0bits+0x2a>
 8009498:	2000      	movs	r0, #0
 800949a:	4770      	bx	lr
 800949c:	2020      	movs	r0, #32
 800949e:	4770      	bx	lr

080094a0 <__i2b>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	460c      	mov	r4, r1
 80094a4:	2101      	movs	r1, #1
 80094a6:	f7ff feff 	bl	80092a8 <_Balloc>
 80094aa:	4602      	mov	r2, r0
 80094ac:	b928      	cbnz	r0, 80094ba <__i2b+0x1a>
 80094ae:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <__i2b+0x24>)
 80094b0:	4805      	ldr	r0, [pc, #20]	; (80094c8 <__i2b+0x28>)
 80094b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094b6:	f000 fc9b 	bl	8009df0 <__assert_func>
 80094ba:	2301      	movs	r3, #1
 80094bc:	6144      	str	r4, [r0, #20]
 80094be:	6103      	str	r3, [r0, #16]
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	bf00      	nop
 80094c4:	0800ab9b 	.word	0x0800ab9b
 80094c8:	0800abac 	.word	0x0800abac

080094cc <__multiply>:
 80094cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	4614      	mov	r4, r2
 80094d2:	690a      	ldr	r2, [r1, #16]
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	bfb8      	it	lt
 80094da:	460b      	movlt	r3, r1
 80094dc:	460d      	mov	r5, r1
 80094de:	bfbc      	itt	lt
 80094e0:	4625      	movlt	r5, r4
 80094e2:	461c      	movlt	r4, r3
 80094e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80094e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80094ec:	68ab      	ldr	r3, [r5, #8]
 80094ee:	6869      	ldr	r1, [r5, #4]
 80094f0:	eb0a 0709 	add.w	r7, sl, r9
 80094f4:	42bb      	cmp	r3, r7
 80094f6:	b085      	sub	sp, #20
 80094f8:	bfb8      	it	lt
 80094fa:	3101      	addlt	r1, #1
 80094fc:	f7ff fed4 	bl	80092a8 <_Balloc>
 8009500:	b930      	cbnz	r0, 8009510 <__multiply+0x44>
 8009502:	4602      	mov	r2, r0
 8009504:	4b42      	ldr	r3, [pc, #264]	; (8009610 <__multiply+0x144>)
 8009506:	4843      	ldr	r0, [pc, #268]	; (8009614 <__multiply+0x148>)
 8009508:	f240 115d 	movw	r1, #349	; 0x15d
 800950c:	f000 fc70 	bl	8009df0 <__assert_func>
 8009510:	f100 0614 	add.w	r6, r0, #20
 8009514:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009518:	4633      	mov	r3, r6
 800951a:	2200      	movs	r2, #0
 800951c:	4543      	cmp	r3, r8
 800951e:	d31e      	bcc.n	800955e <__multiply+0x92>
 8009520:	f105 0c14 	add.w	ip, r5, #20
 8009524:	f104 0314 	add.w	r3, r4, #20
 8009528:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800952c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009530:	9202      	str	r2, [sp, #8]
 8009532:	ebac 0205 	sub.w	r2, ip, r5
 8009536:	3a15      	subs	r2, #21
 8009538:	f022 0203 	bic.w	r2, r2, #3
 800953c:	3204      	adds	r2, #4
 800953e:	f105 0115 	add.w	r1, r5, #21
 8009542:	458c      	cmp	ip, r1
 8009544:	bf38      	it	cc
 8009546:	2204      	movcc	r2, #4
 8009548:	9201      	str	r2, [sp, #4]
 800954a:	9a02      	ldr	r2, [sp, #8]
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	429a      	cmp	r2, r3
 8009550:	d808      	bhi.n	8009564 <__multiply+0x98>
 8009552:	2f00      	cmp	r7, #0
 8009554:	dc55      	bgt.n	8009602 <__multiply+0x136>
 8009556:	6107      	str	r7, [r0, #16]
 8009558:	b005      	add	sp, #20
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955e:	f843 2b04 	str.w	r2, [r3], #4
 8009562:	e7db      	b.n	800951c <__multiply+0x50>
 8009564:	f8b3 a000 	ldrh.w	sl, [r3]
 8009568:	f1ba 0f00 	cmp.w	sl, #0
 800956c:	d020      	beq.n	80095b0 <__multiply+0xe4>
 800956e:	f105 0e14 	add.w	lr, r5, #20
 8009572:	46b1      	mov	r9, r6
 8009574:	2200      	movs	r2, #0
 8009576:	f85e 4b04 	ldr.w	r4, [lr], #4
 800957a:	f8d9 b000 	ldr.w	fp, [r9]
 800957e:	b2a1      	uxth	r1, r4
 8009580:	fa1f fb8b 	uxth.w	fp, fp
 8009584:	fb0a b101 	mla	r1, sl, r1, fp
 8009588:	4411      	add	r1, r2
 800958a:	f8d9 2000 	ldr.w	r2, [r9]
 800958e:	0c24      	lsrs	r4, r4, #16
 8009590:	0c12      	lsrs	r2, r2, #16
 8009592:	fb0a 2404 	mla	r4, sl, r4, r2
 8009596:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800959a:	b289      	uxth	r1, r1
 800959c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095a0:	45f4      	cmp	ip, lr
 80095a2:	f849 1b04 	str.w	r1, [r9], #4
 80095a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80095aa:	d8e4      	bhi.n	8009576 <__multiply+0xaa>
 80095ac:	9901      	ldr	r1, [sp, #4]
 80095ae:	5072      	str	r2, [r6, r1]
 80095b0:	9a03      	ldr	r2, [sp, #12]
 80095b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095b6:	3304      	adds	r3, #4
 80095b8:	f1b9 0f00 	cmp.w	r9, #0
 80095bc:	d01f      	beq.n	80095fe <__multiply+0x132>
 80095be:	6834      	ldr	r4, [r6, #0]
 80095c0:	f105 0114 	add.w	r1, r5, #20
 80095c4:	46b6      	mov	lr, r6
 80095c6:	f04f 0a00 	mov.w	sl, #0
 80095ca:	880a      	ldrh	r2, [r1, #0]
 80095cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80095d0:	fb09 b202 	mla	r2, r9, r2, fp
 80095d4:	4492      	add	sl, r2
 80095d6:	b2a4      	uxth	r4, r4
 80095d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80095dc:	f84e 4b04 	str.w	r4, [lr], #4
 80095e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80095e4:	f8be 2000 	ldrh.w	r2, [lr]
 80095e8:	0c24      	lsrs	r4, r4, #16
 80095ea:	fb09 2404 	mla	r4, r9, r4, r2
 80095ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80095f2:	458c      	cmp	ip, r1
 80095f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80095f8:	d8e7      	bhi.n	80095ca <__multiply+0xfe>
 80095fa:	9a01      	ldr	r2, [sp, #4]
 80095fc:	50b4      	str	r4, [r6, r2]
 80095fe:	3604      	adds	r6, #4
 8009600:	e7a3      	b.n	800954a <__multiply+0x7e>
 8009602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1a5      	bne.n	8009556 <__multiply+0x8a>
 800960a:	3f01      	subs	r7, #1
 800960c:	e7a1      	b.n	8009552 <__multiply+0x86>
 800960e:	bf00      	nop
 8009610:	0800ab9b 	.word	0x0800ab9b
 8009614:	0800abac 	.word	0x0800abac

08009618 <__pow5mult>:
 8009618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800961c:	4615      	mov	r5, r2
 800961e:	f012 0203 	ands.w	r2, r2, #3
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	d007      	beq.n	8009638 <__pow5mult+0x20>
 8009628:	4c25      	ldr	r4, [pc, #148]	; (80096c0 <__pow5mult+0xa8>)
 800962a:	3a01      	subs	r2, #1
 800962c:	2300      	movs	r3, #0
 800962e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009632:	f7ff fe9b 	bl	800936c <__multadd>
 8009636:	4607      	mov	r7, r0
 8009638:	10ad      	asrs	r5, r5, #2
 800963a:	d03d      	beq.n	80096b8 <__pow5mult+0xa0>
 800963c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800963e:	b97c      	cbnz	r4, 8009660 <__pow5mult+0x48>
 8009640:	2010      	movs	r0, #16
 8009642:	f7ff fe29 	bl	8009298 <malloc>
 8009646:	4602      	mov	r2, r0
 8009648:	6270      	str	r0, [r6, #36]	; 0x24
 800964a:	b928      	cbnz	r0, 8009658 <__pow5mult+0x40>
 800964c:	4b1d      	ldr	r3, [pc, #116]	; (80096c4 <__pow5mult+0xac>)
 800964e:	481e      	ldr	r0, [pc, #120]	; (80096c8 <__pow5mult+0xb0>)
 8009650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009654:	f000 fbcc 	bl	8009df0 <__assert_func>
 8009658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800965c:	6004      	str	r4, [r0, #0]
 800965e:	60c4      	str	r4, [r0, #12]
 8009660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009668:	b94c      	cbnz	r4, 800967e <__pow5mult+0x66>
 800966a:	f240 2171 	movw	r1, #625	; 0x271
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ff16 	bl	80094a0 <__i2b>
 8009674:	2300      	movs	r3, #0
 8009676:	f8c8 0008 	str.w	r0, [r8, #8]
 800967a:	4604      	mov	r4, r0
 800967c:	6003      	str	r3, [r0, #0]
 800967e:	f04f 0900 	mov.w	r9, #0
 8009682:	07eb      	lsls	r3, r5, #31
 8009684:	d50a      	bpl.n	800969c <__pow5mult+0x84>
 8009686:	4639      	mov	r1, r7
 8009688:	4622      	mov	r2, r4
 800968a:	4630      	mov	r0, r6
 800968c:	f7ff ff1e 	bl	80094cc <__multiply>
 8009690:	4639      	mov	r1, r7
 8009692:	4680      	mov	r8, r0
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff fe47 	bl	8009328 <_Bfree>
 800969a:	4647      	mov	r7, r8
 800969c:	106d      	asrs	r5, r5, #1
 800969e:	d00b      	beq.n	80096b8 <__pow5mult+0xa0>
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	b938      	cbnz	r0, 80096b4 <__pow5mult+0x9c>
 80096a4:	4622      	mov	r2, r4
 80096a6:	4621      	mov	r1, r4
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff ff0f 	bl	80094cc <__multiply>
 80096ae:	6020      	str	r0, [r4, #0]
 80096b0:	f8c0 9000 	str.w	r9, [r0]
 80096b4:	4604      	mov	r4, r0
 80096b6:	e7e4      	b.n	8009682 <__pow5mult+0x6a>
 80096b8:	4638      	mov	r0, r7
 80096ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096be:	bf00      	nop
 80096c0:	0800ad00 	.word	0x0800ad00
 80096c4:	0800ab25 	.word	0x0800ab25
 80096c8:	0800abac 	.word	0x0800abac

080096cc <__lshift>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	460c      	mov	r4, r1
 80096d2:	6849      	ldr	r1, [r1, #4]
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096da:	68a3      	ldr	r3, [r4, #8]
 80096dc:	4607      	mov	r7, r0
 80096de:	4691      	mov	r9, r2
 80096e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096e4:	f108 0601 	add.w	r6, r8, #1
 80096e8:	42b3      	cmp	r3, r6
 80096ea:	db0b      	blt.n	8009704 <__lshift+0x38>
 80096ec:	4638      	mov	r0, r7
 80096ee:	f7ff fddb 	bl	80092a8 <_Balloc>
 80096f2:	4605      	mov	r5, r0
 80096f4:	b948      	cbnz	r0, 800970a <__lshift+0x3e>
 80096f6:	4602      	mov	r2, r0
 80096f8:	4b28      	ldr	r3, [pc, #160]	; (800979c <__lshift+0xd0>)
 80096fa:	4829      	ldr	r0, [pc, #164]	; (80097a0 <__lshift+0xd4>)
 80096fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009700:	f000 fb76 	bl	8009df0 <__assert_func>
 8009704:	3101      	adds	r1, #1
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	e7ee      	b.n	80096e8 <__lshift+0x1c>
 800970a:	2300      	movs	r3, #0
 800970c:	f100 0114 	add.w	r1, r0, #20
 8009710:	f100 0210 	add.w	r2, r0, #16
 8009714:	4618      	mov	r0, r3
 8009716:	4553      	cmp	r3, sl
 8009718:	db33      	blt.n	8009782 <__lshift+0xb6>
 800971a:	6920      	ldr	r0, [r4, #16]
 800971c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009720:	f104 0314 	add.w	r3, r4, #20
 8009724:	f019 091f 	ands.w	r9, r9, #31
 8009728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800972c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009730:	d02b      	beq.n	800978a <__lshift+0xbe>
 8009732:	f1c9 0e20 	rsb	lr, r9, #32
 8009736:	468a      	mov	sl, r1
 8009738:	2200      	movs	r2, #0
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	fa00 f009 	lsl.w	r0, r0, r9
 8009740:	4302      	orrs	r2, r0
 8009742:	f84a 2b04 	str.w	r2, [sl], #4
 8009746:	f853 2b04 	ldr.w	r2, [r3], #4
 800974a:	459c      	cmp	ip, r3
 800974c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009750:	d8f3      	bhi.n	800973a <__lshift+0x6e>
 8009752:	ebac 0304 	sub.w	r3, ip, r4
 8009756:	3b15      	subs	r3, #21
 8009758:	f023 0303 	bic.w	r3, r3, #3
 800975c:	3304      	adds	r3, #4
 800975e:	f104 0015 	add.w	r0, r4, #21
 8009762:	4584      	cmp	ip, r0
 8009764:	bf38      	it	cc
 8009766:	2304      	movcc	r3, #4
 8009768:	50ca      	str	r2, [r1, r3]
 800976a:	b10a      	cbz	r2, 8009770 <__lshift+0xa4>
 800976c:	f108 0602 	add.w	r6, r8, #2
 8009770:	3e01      	subs	r6, #1
 8009772:	4638      	mov	r0, r7
 8009774:	612e      	str	r6, [r5, #16]
 8009776:	4621      	mov	r1, r4
 8009778:	f7ff fdd6 	bl	8009328 <_Bfree>
 800977c:	4628      	mov	r0, r5
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	f842 0f04 	str.w	r0, [r2, #4]!
 8009786:	3301      	adds	r3, #1
 8009788:	e7c5      	b.n	8009716 <__lshift+0x4a>
 800978a:	3904      	subs	r1, #4
 800978c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009790:	f841 2f04 	str.w	r2, [r1, #4]!
 8009794:	459c      	cmp	ip, r3
 8009796:	d8f9      	bhi.n	800978c <__lshift+0xc0>
 8009798:	e7ea      	b.n	8009770 <__lshift+0xa4>
 800979a:	bf00      	nop
 800979c:	0800ab9b 	.word	0x0800ab9b
 80097a0:	0800abac 	.word	0x0800abac

080097a4 <__mcmp>:
 80097a4:	b530      	push	{r4, r5, lr}
 80097a6:	6902      	ldr	r2, [r0, #16]
 80097a8:	690c      	ldr	r4, [r1, #16]
 80097aa:	1b12      	subs	r2, r2, r4
 80097ac:	d10e      	bne.n	80097cc <__mcmp+0x28>
 80097ae:	f100 0314 	add.w	r3, r0, #20
 80097b2:	3114      	adds	r1, #20
 80097b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097c4:	42a5      	cmp	r5, r4
 80097c6:	d003      	beq.n	80097d0 <__mcmp+0x2c>
 80097c8:	d305      	bcc.n	80097d6 <__mcmp+0x32>
 80097ca:	2201      	movs	r2, #1
 80097cc:	4610      	mov	r0, r2
 80097ce:	bd30      	pop	{r4, r5, pc}
 80097d0:	4283      	cmp	r3, r0
 80097d2:	d3f3      	bcc.n	80097bc <__mcmp+0x18>
 80097d4:	e7fa      	b.n	80097cc <__mcmp+0x28>
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295
 80097da:	e7f7      	b.n	80097cc <__mcmp+0x28>

080097dc <__mdiff>:
 80097dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	460c      	mov	r4, r1
 80097e2:	4606      	mov	r6, r0
 80097e4:	4611      	mov	r1, r2
 80097e6:	4620      	mov	r0, r4
 80097e8:	4617      	mov	r7, r2
 80097ea:	f7ff ffdb 	bl	80097a4 <__mcmp>
 80097ee:	1e05      	subs	r5, r0, #0
 80097f0:	d110      	bne.n	8009814 <__mdiff+0x38>
 80097f2:	4629      	mov	r1, r5
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff fd57 	bl	80092a8 <_Balloc>
 80097fa:	b930      	cbnz	r0, 800980a <__mdiff+0x2e>
 80097fc:	4b39      	ldr	r3, [pc, #228]	; (80098e4 <__mdiff+0x108>)
 80097fe:	4602      	mov	r2, r0
 8009800:	f240 2132 	movw	r1, #562	; 0x232
 8009804:	4838      	ldr	r0, [pc, #224]	; (80098e8 <__mdiff+0x10c>)
 8009806:	f000 faf3 	bl	8009df0 <__assert_func>
 800980a:	2301      	movs	r3, #1
 800980c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	bfa4      	itt	ge
 8009816:	463b      	movge	r3, r7
 8009818:	4627      	movge	r7, r4
 800981a:	4630      	mov	r0, r6
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	bfa6      	itte	ge
 8009820:	461c      	movge	r4, r3
 8009822:	2500      	movge	r5, #0
 8009824:	2501      	movlt	r5, #1
 8009826:	f7ff fd3f 	bl	80092a8 <_Balloc>
 800982a:	b920      	cbnz	r0, 8009836 <__mdiff+0x5a>
 800982c:	4b2d      	ldr	r3, [pc, #180]	; (80098e4 <__mdiff+0x108>)
 800982e:	4602      	mov	r2, r0
 8009830:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009834:	e7e6      	b.n	8009804 <__mdiff+0x28>
 8009836:	693e      	ldr	r6, [r7, #16]
 8009838:	60c5      	str	r5, [r0, #12]
 800983a:	6925      	ldr	r5, [r4, #16]
 800983c:	f107 0114 	add.w	r1, r7, #20
 8009840:	f104 0914 	add.w	r9, r4, #20
 8009844:	f100 0e14 	add.w	lr, r0, #20
 8009848:	f107 0210 	add.w	r2, r7, #16
 800984c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009850:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009854:	46f2      	mov	sl, lr
 8009856:	2700      	movs	r7, #0
 8009858:	f859 3b04 	ldr.w	r3, [r9], #4
 800985c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009860:	fa1f f883 	uxth.w	r8, r3
 8009864:	fa17 f78b 	uxtah	r7, r7, fp
 8009868:	0c1b      	lsrs	r3, r3, #16
 800986a:	eba7 0808 	sub.w	r8, r7, r8
 800986e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009876:	fa1f f888 	uxth.w	r8, r8
 800987a:	141f      	asrs	r7, r3, #16
 800987c:	454d      	cmp	r5, r9
 800987e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009882:	f84a 3b04 	str.w	r3, [sl], #4
 8009886:	d8e7      	bhi.n	8009858 <__mdiff+0x7c>
 8009888:	1b2b      	subs	r3, r5, r4
 800988a:	3b15      	subs	r3, #21
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	3304      	adds	r3, #4
 8009892:	3415      	adds	r4, #21
 8009894:	42a5      	cmp	r5, r4
 8009896:	bf38      	it	cc
 8009898:	2304      	movcc	r3, #4
 800989a:	4419      	add	r1, r3
 800989c:	4473      	add	r3, lr
 800989e:	469e      	mov	lr, r3
 80098a0:	460d      	mov	r5, r1
 80098a2:	4565      	cmp	r5, ip
 80098a4:	d30e      	bcc.n	80098c4 <__mdiff+0xe8>
 80098a6:	f10c 0203 	add.w	r2, ip, #3
 80098aa:	1a52      	subs	r2, r2, r1
 80098ac:	f022 0203 	bic.w	r2, r2, #3
 80098b0:	3903      	subs	r1, #3
 80098b2:	458c      	cmp	ip, r1
 80098b4:	bf38      	it	cc
 80098b6:	2200      	movcc	r2, #0
 80098b8:	441a      	add	r2, r3
 80098ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098be:	b17b      	cbz	r3, 80098e0 <__mdiff+0x104>
 80098c0:	6106      	str	r6, [r0, #16]
 80098c2:	e7a5      	b.n	8009810 <__mdiff+0x34>
 80098c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80098c8:	fa17 f488 	uxtah	r4, r7, r8
 80098cc:	1422      	asrs	r2, r4, #16
 80098ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80098d2:	b2a4      	uxth	r4, r4
 80098d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80098d8:	f84e 4b04 	str.w	r4, [lr], #4
 80098dc:	1417      	asrs	r7, r2, #16
 80098de:	e7e0      	b.n	80098a2 <__mdiff+0xc6>
 80098e0:	3e01      	subs	r6, #1
 80098e2:	e7ea      	b.n	80098ba <__mdiff+0xde>
 80098e4:	0800ab9b 	.word	0x0800ab9b
 80098e8:	0800abac 	.word	0x0800abac

080098ec <__d2b>:
 80098ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098f0:	4689      	mov	r9, r1
 80098f2:	2101      	movs	r1, #1
 80098f4:	ec57 6b10 	vmov	r6, r7, d0
 80098f8:	4690      	mov	r8, r2
 80098fa:	f7ff fcd5 	bl	80092a8 <_Balloc>
 80098fe:	4604      	mov	r4, r0
 8009900:	b930      	cbnz	r0, 8009910 <__d2b+0x24>
 8009902:	4602      	mov	r2, r0
 8009904:	4b25      	ldr	r3, [pc, #148]	; (800999c <__d2b+0xb0>)
 8009906:	4826      	ldr	r0, [pc, #152]	; (80099a0 <__d2b+0xb4>)
 8009908:	f240 310a 	movw	r1, #778	; 0x30a
 800990c:	f000 fa70 	bl	8009df0 <__assert_func>
 8009910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009918:	bb35      	cbnz	r5, 8009968 <__d2b+0x7c>
 800991a:	2e00      	cmp	r6, #0
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	d028      	beq.n	8009972 <__d2b+0x86>
 8009920:	4668      	mov	r0, sp
 8009922:	9600      	str	r6, [sp, #0]
 8009924:	f7ff fd8c 	bl	8009440 <__lo0bits>
 8009928:	9900      	ldr	r1, [sp, #0]
 800992a:	b300      	cbz	r0, 800996e <__d2b+0x82>
 800992c:	9a01      	ldr	r2, [sp, #4]
 800992e:	f1c0 0320 	rsb	r3, r0, #32
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	430b      	orrs	r3, r1
 8009938:	40c2      	lsrs	r2, r0
 800993a:	6163      	str	r3, [r4, #20]
 800993c:	9201      	str	r2, [sp, #4]
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	61a3      	str	r3, [r4, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	bf14      	ite	ne
 8009946:	2202      	movne	r2, #2
 8009948:	2201      	moveq	r2, #1
 800994a:	6122      	str	r2, [r4, #16]
 800994c:	b1d5      	cbz	r5, 8009984 <__d2b+0x98>
 800994e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009952:	4405      	add	r5, r0
 8009954:	f8c9 5000 	str.w	r5, [r9]
 8009958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800995c:	f8c8 0000 	str.w	r0, [r8]
 8009960:	4620      	mov	r0, r4
 8009962:	b003      	add	sp, #12
 8009964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800996c:	e7d5      	b.n	800991a <__d2b+0x2e>
 800996e:	6161      	str	r1, [r4, #20]
 8009970:	e7e5      	b.n	800993e <__d2b+0x52>
 8009972:	a801      	add	r0, sp, #4
 8009974:	f7ff fd64 	bl	8009440 <__lo0bits>
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	6163      	str	r3, [r4, #20]
 800997c:	2201      	movs	r2, #1
 800997e:	6122      	str	r2, [r4, #16]
 8009980:	3020      	adds	r0, #32
 8009982:	e7e3      	b.n	800994c <__d2b+0x60>
 8009984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800998c:	f8c9 0000 	str.w	r0, [r9]
 8009990:	6918      	ldr	r0, [r3, #16]
 8009992:	f7ff fd35 	bl	8009400 <__hi0bits>
 8009996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800999a:	e7df      	b.n	800995c <__d2b+0x70>
 800999c:	0800ab9b 	.word	0x0800ab9b
 80099a0:	0800abac 	.word	0x0800abac

080099a4 <_calloc_r>:
 80099a4:	b513      	push	{r0, r1, r4, lr}
 80099a6:	434a      	muls	r2, r1
 80099a8:	4611      	mov	r1, r2
 80099aa:	9201      	str	r2, [sp, #4]
 80099ac:	f000 f85a 	bl	8009a64 <_malloc_r>
 80099b0:	4604      	mov	r4, r0
 80099b2:	b118      	cbz	r0, 80099bc <_calloc_r+0x18>
 80099b4:	9a01      	ldr	r2, [sp, #4]
 80099b6:	2100      	movs	r1, #0
 80099b8:	f7fe f960 	bl	8007c7c <memset>
 80099bc:	4620      	mov	r0, r4
 80099be:	b002      	add	sp, #8
 80099c0:	bd10      	pop	{r4, pc}
	...

080099c4 <_free_r>:
 80099c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099c6:	2900      	cmp	r1, #0
 80099c8:	d048      	beq.n	8009a5c <_free_r+0x98>
 80099ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ce:	9001      	str	r0, [sp, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f1a1 0404 	sub.w	r4, r1, #4
 80099d6:	bfb8      	it	lt
 80099d8:	18e4      	addlt	r4, r4, r3
 80099da:	f000 fa65 	bl	8009ea8 <__malloc_lock>
 80099de:	4a20      	ldr	r2, [pc, #128]	; (8009a60 <_free_r+0x9c>)
 80099e0:	9801      	ldr	r0, [sp, #4]
 80099e2:	6813      	ldr	r3, [r2, #0]
 80099e4:	4615      	mov	r5, r2
 80099e6:	b933      	cbnz	r3, 80099f6 <_free_r+0x32>
 80099e8:	6063      	str	r3, [r4, #4]
 80099ea:	6014      	str	r4, [r2, #0]
 80099ec:	b003      	add	sp, #12
 80099ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099f2:	f000 ba5f 	b.w	8009eb4 <__malloc_unlock>
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	d90b      	bls.n	8009a12 <_free_r+0x4e>
 80099fa:	6821      	ldr	r1, [r4, #0]
 80099fc:	1862      	adds	r2, r4, r1
 80099fe:	4293      	cmp	r3, r2
 8009a00:	bf04      	itt	eq
 8009a02:	681a      	ldreq	r2, [r3, #0]
 8009a04:	685b      	ldreq	r3, [r3, #4]
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	bf04      	itt	eq
 8009a0a:	1852      	addeq	r2, r2, r1
 8009a0c:	6022      	streq	r2, [r4, #0]
 8009a0e:	602c      	str	r4, [r5, #0]
 8009a10:	e7ec      	b.n	80099ec <_free_r+0x28>
 8009a12:	461a      	mov	r2, r3
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b10b      	cbz	r3, 8009a1c <_free_r+0x58>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d9fa      	bls.n	8009a12 <_free_r+0x4e>
 8009a1c:	6811      	ldr	r1, [r2, #0]
 8009a1e:	1855      	adds	r5, r2, r1
 8009a20:	42a5      	cmp	r5, r4
 8009a22:	d10b      	bne.n	8009a3c <_free_r+0x78>
 8009a24:	6824      	ldr	r4, [r4, #0]
 8009a26:	4421      	add	r1, r4
 8009a28:	1854      	adds	r4, r2, r1
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	d1dd      	bne.n	80099ec <_free_r+0x28>
 8009a30:	681c      	ldr	r4, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	6053      	str	r3, [r2, #4]
 8009a36:	4421      	add	r1, r4
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	e7d7      	b.n	80099ec <_free_r+0x28>
 8009a3c:	d902      	bls.n	8009a44 <_free_r+0x80>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	e7d3      	b.n	80099ec <_free_r+0x28>
 8009a44:	6825      	ldr	r5, [r4, #0]
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf04      	itt	eq
 8009a4c:	6819      	ldreq	r1, [r3, #0]
 8009a4e:	685b      	ldreq	r3, [r3, #4]
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	bf04      	itt	eq
 8009a54:	1949      	addeq	r1, r1, r5
 8009a56:	6021      	streq	r1, [r4, #0]
 8009a58:	6054      	str	r4, [r2, #4]
 8009a5a:	e7c7      	b.n	80099ec <_free_r+0x28>
 8009a5c:	b003      	add	sp, #12
 8009a5e:	bd30      	pop	{r4, r5, pc}
 8009a60:	200011e8 	.word	0x200011e8

08009a64 <_malloc_r>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	1ccd      	adds	r5, r1, #3
 8009a68:	f025 0503 	bic.w	r5, r5, #3
 8009a6c:	3508      	adds	r5, #8
 8009a6e:	2d0c      	cmp	r5, #12
 8009a70:	bf38      	it	cc
 8009a72:	250c      	movcc	r5, #12
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	4606      	mov	r6, r0
 8009a78:	db01      	blt.n	8009a7e <_malloc_r+0x1a>
 8009a7a:	42a9      	cmp	r1, r5
 8009a7c:	d903      	bls.n	8009a86 <_malloc_r+0x22>
 8009a7e:	230c      	movs	r3, #12
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	2000      	movs	r0, #0
 8009a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a86:	f000 fa0f 	bl	8009ea8 <__malloc_lock>
 8009a8a:	4921      	ldr	r1, [pc, #132]	; (8009b10 <_malloc_r+0xac>)
 8009a8c:	680a      	ldr	r2, [r1, #0]
 8009a8e:	4614      	mov	r4, r2
 8009a90:	b99c      	cbnz	r4, 8009aba <_malloc_r+0x56>
 8009a92:	4f20      	ldr	r7, [pc, #128]	; (8009b14 <_malloc_r+0xb0>)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	b923      	cbnz	r3, 8009aa2 <_malloc_r+0x3e>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f998 	bl	8009dd0 <_sbrk_r>
 8009aa0:	6038      	str	r0, [r7, #0]
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 f993 	bl	8009dd0 <_sbrk_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d123      	bne.n	8009af6 <_malloc_r+0x92>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	6033      	str	r3, [r6, #0]
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 f9fe 	bl	8009eb4 <__malloc_unlock>
 8009ab8:	e7e3      	b.n	8009a82 <_malloc_r+0x1e>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	1b5b      	subs	r3, r3, r5
 8009abe:	d417      	bmi.n	8009af0 <_malloc_r+0x8c>
 8009ac0:	2b0b      	cmp	r3, #11
 8009ac2:	d903      	bls.n	8009acc <_malloc_r+0x68>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	441c      	add	r4, r3
 8009ac8:	6025      	str	r5, [r4, #0]
 8009aca:	e004      	b.n	8009ad6 <_malloc_r+0x72>
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	42a2      	cmp	r2, r4
 8009ad0:	bf0c      	ite	eq
 8009ad2:	600b      	streq	r3, [r1, #0]
 8009ad4:	6053      	strne	r3, [r2, #4]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f000 f9ec 	bl	8009eb4 <__malloc_unlock>
 8009adc:	f104 000b 	add.w	r0, r4, #11
 8009ae0:	1d23      	adds	r3, r4, #4
 8009ae2:	f020 0007 	bic.w	r0, r0, #7
 8009ae6:	1ac2      	subs	r2, r0, r3
 8009ae8:	d0cc      	beq.n	8009a84 <_malloc_r+0x20>
 8009aea:	1a1b      	subs	r3, r3, r0
 8009aec:	50a3      	str	r3, [r4, r2]
 8009aee:	e7c9      	b.n	8009a84 <_malloc_r+0x20>
 8009af0:	4622      	mov	r2, r4
 8009af2:	6864      	ldr	r4, [r4, #4]
 8009af4:	e7cc      	b.n	8009a90 <_malloc_r+0x2c>
 8009af6:	1cc4      	adds	r4, r0, #3
 8009af8:	f024 0403 	bic.w	r4, r4, #3
 8009afc:	42a0      	cmp	r0, r4
 8009afe:	d0e3      	beq.n	8009ac8 <_malloc_r+0x64>
 8009b00:	1a21      	subs	r1, r4, r0
 8009b02:	4630      	mov	r0, r6
 8009b04:	f000 f964 	bl	8009dd0 <_sbrk_r>
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d1dd      	bne.n	8009ac8 <_malloc_r+0x64>
 8009b0c:	e7cf      	b.n	8009aae <_malloc_r+0x4a>
 8009b0e:	bf00      	nop
 8009b10:	200011e8 	.word	0x200011e8
 8009b14:	200011ec 	.word	0x200011ec

08009b18 <__ssputs_r>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	688e      	ldr	r6, [r1, #8]
 8009b1e:	429e      	cmp	r6, r3
 8009b20:	4682      	mov	sl, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	4690      	mov	r8, r2
 8009b26:	461f      	mov	r7, r3
 8009b28:	d838      	bhi.n	8009b9c <__ssputs_r+0x84>
 8009b2a:	898a      	ldrh	r2, [r1, #12]
 8009b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b30:	d032      	beq.n	8009b98 <__ssputs_r+0x80>
 8009b32:	6825      	ldr	r5, [r4, #0]
 8009b34:	6909      	ldr	r1, [r1, #16]
 8009b36:	eba5 0901 	sub.w	r9, r5, r1
 8009b3a:	6965      	ldr	r5, [r4, #20]
 8009b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b44:	3301      	adds	r3, #1
 8009b46:	444b      	add	r3, r9
 8009b48:	106d      	asrs	r5, r5, #1
 8009b4a:	429d      	cmp	r5, r3
 8009b4c:	bf38      	it	cc
 8009b4e:	461d      	movcc	r5, r3
 8009b50:	0553      	lsls	r3, r2, #21
 8009b52:	d531      	bpl.n	8009bb8 <__ssputs_r+0xa0>
 8009b54:	4629      	mov	r1, r5
 8009b56:	f7ff ff85 	bl	8009a64 <_malloc_r>
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	b950      	cbnz	r0, 8009b74 <__ssputs_r+0x5c>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	f8ca 3000 	str.w	r3, [sl]
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b74:	6921      	ldr	r1, [r4, #16]
 8009b76:	464a      	mov	r2, r9
 8009b78:	f7fe f872 	bl	8007c60 <memcpy>
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	6126      	str	r6, [r4, #16]
 8009b8a:	6165      	str	r5, [r4, #20]
 8009b8c:	444e      	add	r6, r9
 8009b8e:	eba5 0509 	sub.w	r5, r5, r9
 8009b92:	6026      	str	r6, [r4, #0]
 8009b94:	60a5      	str	r5, [r4, #8]
 8009b96:	463e      	mov	r6, r7
 8009b98:	42be      	cmp	r6, r7
 8009b9a:	d900      	bls.n	8009b9e <__ssputs_r+0x86>
 8009b9c:	463e      	mov	r6, r7
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	6820      	ldr	r0, [r4, #0]
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	f000 f966 	bl	8009e74 <memmove>
 8009ba8:	68a3      	ldr	r3, [r4, #8]
 8009baa:	6822      	ldr	r2, [r4, #0]
 8009bac:	1b9b      	subs	r3, r3, r6
 8009bae:	4432      	add	r2, r6
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7db      	b.n	8009b70 <__ssputs_r+0x58>
 8009bb8:	462a      	mov	r2, r5
 8009bba:	f000 f981 	bl	8009ec0 <_realloc_r>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d1e1      	bne.n	8009b88 <__ssputs_r+0x70>
 8009bc4:	6921      	ldr	r1, [r4, #16]
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f7ff fefc 	bl	80099c4 <_free_r>
 8009bcc:	e7c7      	b.n	8009b5e <__ssputs_r+0x46>
	...

08009bd0 <_svfiprintf_r>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	4698      	mov	r8, r3
 8009bd6:	898b      	ldrh	r3, [r1, #12]
 8009bd8:	061b      	lsls	r3, r3, #24
 8009bda:	b09d      	sub	sp, #116	; 0x74
 8009bdc:	4607      	mov	r7, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	d50e      	bpl.n	8009c02 <_svfiprintf_r+0x32>
 8009be4:	690b      	ldr	r3, [r1, #16]
 8009be6:	b963      	cbnz	r3, 8009c02 <_svfiprintf_r+0x32>
 8009be8:	2140      	movs	r1, #64	; 0x40
 8009bea:	f7ff ff3b 	bl	8009a64 <_malloc_r>
 8009bee:	6028      	str	r0, [r5, #0]
 8009bf0:	6128      	str	r0, [r5, #16]
 8009bf2:	b920      	cbnz	r0, 8009bfe <_svfiprintf_r+0x2e>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e0d1      	b.n	8009da2 <_svfiprintf_r+0x1d2>
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	616b      	str	r3, [r5, #20]
 8009c02:	2300      	movs	r3, #0
 8009c04:	9309      	str	r3, [sp, #36]	; 0x24
 8009c06:	2320      	movs	r3, #32
 8009c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c10:	2330      	movs	r3, #48	; 0x30
 8009c12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dbc <_svfiprintf_r+0x1ec>
 8009c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c1a:	f04f 0901 	mov.w	r9, #1
 8009c1e:	4623      	mov	r3, r4
 8009c20:	469a      	mov	sl, r3
 8009c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c26:	b10a      	cbz	r2, 8009c2c <_svfiprintf_r+0x5c>
 8009c28:	2a25      	cmp	r2, #37	; 0x25
 8009c2a:	d1f9      	bne.n	8009c20 <_svfiprintf_r+0x50>
 8009c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c30:	d00b      	beq.n	8009c4a <_svfiprintf_r+0x7a>
 8009c32:	465b      	mov	r3, fp
 8009c34:	4622      	mov	r2, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff ff6d 	bl	8009b18 <__ssputs_r>
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f000 80aa 	beq.w	8009d98 <_svfiprintf_r+0x1c8>
 8009c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c46:	445a      	add	r2, fp
 8009c48:	9209      	str	r2, [sp, #36]	; 0x24
 8009c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 80a2 	beq.w	8009d98 <_svfiprintf_r+0x1c8>
 8009c54:	2300      	movs	r3, #0
 8009c56:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c5e:	f10a 0a01 	add.w	sl, sl, #1
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	9307      	str	r3, [sp, #28]
 8009c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c6c:	4654      	mov	r4, sl
 8009c6e:	2205      	movs	r2, #5
 8009c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c74:	4851      	ldr	r0, [pc, #324]	; (8009dbc <_svfiprintf_r+0x1ec>)
 8009c76:	f7f6 fab3 	bl	80001e0 <memchr>
 8009c7a:	9a04      	ldr	r2, [sp, #16]
 8009c7c:	b9d8      	cbnz	r0, 8009cb6 <_svfiprintf_r+0xe6>
 8009c7e:	06d0      	lsls	r0, r2, #27
 8009c80:	bf44      	itt	mi
 8009c82:	2320      	movmi	r3, #32
 8009c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c88:	0711      	lsls	r1, r2, #28
 8009c8a:	bf44      	itt	mi
 8009c8c:	232b      	movmi	r3, #43	; 0x2b
 8009c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c92:	f89a 3000 	ldrb.w	r3, [sl]
 8009c96:	2b2a      	cmp	r3, #42	; 0x2a
 8009c98:	d015      	beq.n	8009cc6 <_svfiprintf_r+0xf6>
 8009c9a:	9a07      	ldr	r2, [sp, #28]
 8009c9c:	4654      	mov	r4, sl
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	f04f 0c0a 	mov.w	ip, #10
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009caa:	3b30      	subs	r3, #48	; 0x30
 8009cac:	2b09      	cmp	r3, #9
 8009cae:	d94e      	bls.n	8009d4e <_svfiprintf_r+0x17e>
 8009cb0:	b1b0      	cbz	r0, 8009ce0 <_svfiprintf_r+0x110>
 8009cb2:	9207      	str	r2, [sp, #28]
 8009cb4:	e014      	b.n	8009ce0 <_svfiprintf_r+0x110>
 8009cb6:	eba0 0308 	sub.w	r3, r0, r8
 8009cba:	fa09 f303 	lsl.w	r3, r9, r3
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	46a2      	mov	sl, r4
 8009cc4:	e7d2      	b.n	8009c6c <_svfiprintf_r+0x9c>
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	1d19      	adds	r1, r3, #4
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	9103      	str	r1, [sp, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfbb      	ittet	lt
 8009cd2:	425b      	neglt	r3, r3
 8009cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8009cd8:	9307      	strge	r3, [sp, #28]
 8009cda:	9307      	strlt	r3, [sp, #28]
 8009cdc:	bfb8      	it	lt
 8009cde:	9204      	strlt	r2, [sp, #16]
 8009ce0:	7823      	ldrb	r3, [r4, #0]
 8009ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce4:	d10c      	bne.n	8009d00 <_svfiprintf_r+0x130>
 8009ce6:	7863      	ldrb	r3, [r4, #1]
 8009ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cea:	d135      	bne.n	8009d58 <_svfiprintf_r+0x188>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	1d1a      	adds	r2, r3, #4
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	9203      	str	r2, [sp, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfb8      	it	lt
 8009cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cfc:	3402      	adds	r4, #2
 8009cfe:	9305      	str	r3, [sp, #20]
 8009d00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009dcc <_svfiprintf_r+0x1fc>
 8009d04:	7821      	ldrb	r1, [r4, #0]
 8009d06:	2203      	movs	r2, #3
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f7f6 fa69 	bl	80001e0 <memchr>
 8009d0e:	b140      	cbz	r0, 8009d22 <_svfiprintf_r+0x152>
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	eba0 000a 	sub.w	r0, r0, sl
 8009d16:	fa03 f000 	lsl.w	r0, r3, r0
 8009d1a:	9b04      	ldr	r3, [sp, #16]
 8009d1c:	4303      	orrs	r3, r0
 8009d1e:	3401      	adds	r4, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d26:	4826      	ldr	r0, [pc, #152]	; (8009dc0 <_svfiprintf_r+0x1f0>)
 8009d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d2c:	2206      	movs	r2, #6
 8009d2e:	f7f6 fa57 	bl	80001e0 <memchr>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d038      	beq.n	8009da8 <_svfiprintf_r+0x1d8>
 8009d36:	4b23      	ldr	r3, [pc, #140]	; (8009dc4 <_svfiprintf_r+0x1f4>)
 8009d38:	bb1b      	cbnz	r3, 8009d82 <_svfiprintf_r+0x1b2>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	3307      	adds	r3, #7
 8009d3e:	f023 0307 	bic.w	r3, r3, #7
 8009d42:	3308      	adds	r3, #8
 8009d44:	9303      	str	r3, [sp, #12]
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	4433      	add	r3, r6
 8009d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4c:	e767      	b.n	8009c1e <_svfiprintf_r+0x4e>
 8009d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d52:	460c      	mov	r4, r1
 8009d54:	2001      	movs	r0, #1
 8009d56:	e7a5      	b.n	8009ca4 <_svfiprintf_r+0xd4>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	3401      	adds	r4, #1
 8009d5c:	9305      	str	r3, [sp, #20]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	f04f 0c0a 	mov.w	ip, #10
 8009d64:	4620      	mov	r0, r4
 8009d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6a:	3a30      	subs	r2, #48	; 0x30
 8009d6c:	2a09      	cmp	r2, #9
 8009d6e:	d903      	bls.n	8009d78 <_svfiprintf_r+0x1a8>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0c5      	beq.n	8009d00 <_svfiprintf_r+0x130>
 8009d74:	9105      	str	r1, [sp, #20]
 8009d76:	e7c3      	b.n	8009d00 <_svfiprintf_r+0x130>
 8009d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e7f0      	b.n	8009d64 <_svfiprintf_r+0x194>
 8009d82:	ab03      	add	r3, sp, #12
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	462a      	mov	r2, r5
 8009d88:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <_svfiprintf_r+0x1f8>)
 8009d8a:	a904      	add	r1, sp, #16
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7fe f81d 	bl	8007dcc <_printf_float>
 8009d92:	1c42      	adds	r2, r0, #1
 8009d94:	4606      	mov	r6, r0
 8009d96:	d1d6      	bne.n	8009d46 <_svfiprintf_r+0x176>
 8009d98:	89ab      	ldrh	r3, [r5, #12]
 8009d9a:	065b      	lsls	r3, r3, #25
 8009d9c:	f53f af2c 	bmi.w	8009bf8 <_svfiprintf_r+0x28>
 8009da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da2:	b01d      	add	sp, #116	; 0x74
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	ab03      	add	r3, sp, #12
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	462a      	mov	r2, r5
 8009dae:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <_svfiprintf_r+0x1f8>)
 8009db0:	a904      	add	r1, sp, #16
 8009db2:	4638      	mov	r0, r7
 8009db4:	f7fe faae 	bl	8008314 <_printf_i>
 8009db8:	e7eb      	b.n	8009d92 <_svfiprintf_r+0x1c2>
 8009dba:	bf00      	nop
 8009dbc:	0800ad0c 	.word	0x0800ad0c
 8009dc0:	0800ad16 	.word	0x0800ad16
 8009dc4:	08007dcd 	.word	0x08007dcd
 8009dc8:	08009b19 	.word	0x08009b19
 8009dcc:	0800ad12 	.word	0x0800ad12

08009dd0 <_sbrk_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d06      	ldr	r5, [pc, #24]	; (8009dec <_sbrk_r+0x1c>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	602b      	str	r3, [r5, #0]
 8009ddc:	f7f8 fa7a 	bl	80022d4 <_sbrk>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_sbrk_r+0x1a>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_sbrk_r+0x1a>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	20001944 	.word	0x20001944

08009df0 <__assert_func>:
 8009df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009df2:	4614      	mov	r4, r2
 8009df4:	461a      	mov	r2, r3
 8009df6:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <__assert_func+0x2c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	68d8      	ldr	r0, [r3, #12]
 8009dfe:	b14c      	cbz	r4, 8009e14 <__assert_func+0x24>
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <__assert_func+0x30>)
 8009e02:	9100      	str	r1, [sp, #0]
 8009e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e08:	4906      	ldr	r1, [pc, #24]	; (8009e24 <__assert_func+0x34>)
 8009e0a:	462b      	mov	r3, r5
 8009e0c:	f000 f80e 	bl	8009e2c <fiprintf>
 8009e10:	f000 faa4 	bl	800a35c <abort>
 8009e14:	4b04      	ldr	r3, [pc, #16]	; (8009e28 <__assert_func+0x38>)
 8009e16:	461c      	mov	r4, r3
 8009e18:	e7f3      	b.n	8009e02 <__assert_func+0x12>
 8009e1a:	bf00      	nop
 8009e1c:	20000054 	.word	0x20000054
 8009e20:	0800ad1d 	.word	0x0800ad1d
 8009e24:	0800ad2a 	.word	0x0800ad2a
 8009e28:	0800ad58 	.word	0x0800ad58

08009e2c <fiprintf>:
 8009e2c:	b40e      	push	{r1, r2, r3}
 8009e2e:	b503      	push	{r0, r1, lr}
 8009e30:	4601      	mov	r1, r0
 8009e32:	ab03      	add	r3, sp, #12
 8009e34:	4805      	ldr	r0, [pc, #20]	; (8009e4c <fiprintf+0x20>)
 8009e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	f000 f88f 	bl	8009f60 <_vfiprintf_r>
 8009e42:	b002      	add	sp, #8
 8009e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e48:	b003      	add	sp, #12
 8009e4a:	4770      	bx	lr
 8009e4c:	20000054 	.word	0x20000054

08009e50 <__ascii_mbtowc>:
 8009e50:	b082      	sub	sp, #8
 8009e52:	b901      	cbnz	r1, 8009e56 <__ascii_mbtowc+0x6>
 8009e54:	a901      	add	r1, sp, #4
 8009e56:	b142      	cbz	r2, 8009e6a <__ascii_mbtowc+0x1a>
 8009e58:	b14b      	cbz	r3, 8009e6e <__ascii_mbtowc+0x1e>
 8009e5a:	7813      	ldrb	r3, [r2, #0]
 8009e5c:	600b      	str	r3, [r1, #0]
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	1e10      	subs	r0, r2, #0
 8009e62:	bf18      	it	ne
 8009e64:	2001      	movne	r0, #1
 8009e66:	b002      	add	sp, #8
 8009e68:	4770      	bx	lr
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	e7fb      	b.n	8009e66 <__ascii_mbtowc+0x16>
 8009e6e:	f06f 0001 	mvn.w	r0, #1
 8009e72:	e7f8      	b.n	8009e66 <__ascii_mbtowc+0x16>

08009e74 <memmove>:
 8009e74:	4288      	cmp	r0, r1
 8009e76:	b510      	push	{r4, lr}
 8009e78:	eb01 0402 	add.w	r4, r1, r2
 8009e7c:	d902      	bls.n	8009e84 <memmove+0x10>
 8009e7e:	4284      	cmp	r4, r0
 8009e80:	4623      	mov	r3, r4
 8009e82:	d807      	bhi.n	8009e94 <memmove+0x20>
 8009e84:	1e43      	subs	r3, r0, #1
 8009e86:	42a1      	cmp	r1, r4
 8009e88:	d008      	beq.n	8009e9c <memmove+0x28>
 8009e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e92:	e7f8      	b.n	8009e86 <memmove+0x12>
 8009e94:	4402      	add	r2, r0
 8009e96:	4601      	mov	r1, r0
 8009e98:	428a      	cmp	r2, r1
 8009e9a:	d100      	bne.n	8009e9e <memmove+0x2a>
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ea6:	e7f7      	b.n	8009e98 <memmove+0x24>

08009ea8 <__malloc_lock>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__malloc_lock+0x8>)
 8009eaa:	f000 bc17 	b.w	800a6dc <__retarget_lock_acquire_recursive>
 8009eae:	bf00      	nop
 8009eb0:	2000194c 	.word	0x2000194c

08009eb4 <__malloc_unlock>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__malloc_unlock+0x8>)
 8009eb6:	f000 bc12 	b.w	800a6de <__retarget_lock_release_recursive>
 8009eba:	bf00      	nop
 8009ebc:	2000194c 	.word	0x2000194c

08009ec0 <_realloc_r>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	4607      	mov	r7, r0
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	460e      	mov	r6, r1
 8009ec8:	b921      	cbnz	r1, 8009ed4 <_realloc_r+0x14>
 8009eca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ece:	4611      	mov	r1, r2
 8009ed0:	f7ff bdc8 	b.w	8009a64 <_malloc_r>
 8009ed4:	b922      	cbnz	r2, 8009ee0 <_realloc_r+0x20>
 8009ed6:	f7ff fd75 	bl	80099c4 <_free_r>
 8009eda:	4625      	mov	r5, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee0:	f000 fc62 	bl	800a7a8 <_malloc_usable_size_r>
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d20f      	bcs.n	8009f08 <_realloc_r+0x48>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4638      	mov	r0, r7
 8009eec:	f7ff fdba 	bl	8009a64 <_malloc_r>
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0f2      	beq.n	8009edc <_realloc_r+0x1c>
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4622      	mov	r2, r4
 8009efa:	f7fd feb1 	bl	8007c60 <memcpy>
 8009efe:	4631      	mov	r1, r6
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff fd5f 	bl	80099c4 <_free_r>
 8009f06:	e7e9      	b.n	8009edc <_realloc_r+0x1c>
 8009f08:	4635      	mov	r5, r6
 8009f0a:	e7e7      	b.n	8009edc <_realloc_r+0x1c>

08009f0c <__sfputc_r>:
 8009f0c:	6893      	ldr	r3, [r2, #8]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	b410      	push	{r4}
 8009f14:	6093      	str	r3, [r2, #8]
 8009f16:	da08      	bge.n	8009f2a <__sfputc_r+0x1e>
 8009f18:	6994      	ldr	r4, [r2, #24]
 8009f1a:	42a3      	cmp	r3, r4
 8009f1c:	db01      	blt.n	8009f22 <__sfputc_r+0x16>
 8009f1e:	290a      	cmp	r1, #10
 8009f20:	d103      	bne.n	8009f2a <__sfputc_r+0x1e>
 8009f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f26:	f000 b94b 	b.w	800a1c0 <__swbuf_r>
 8009f2a:	6813      	ldr	r3, [r2, #0]
 8009f2c:	1c58      	adds	r0, r3, #1
 8009f2e:	6010      	str	r0, [r2, #0]
 8009f30:	7019      	strb	r1, [r3, #0]
 8009f32:	4608      	mov	r0, r1
 8009f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <__sfputs_r>:
 8009f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	18d5      	adds	r5, r2, r3
 8009f44:	42ac      	cmp	r4, r5
 8009f46:	d101      	bne.n	8009f4c <__sfputs_r+0x12>
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e007      	b.n	8009f5c <__sfputs_r+0x22>
 8009f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f50:	463a      	mov	r2, r7
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7ff ffda 	bl	8009f0c <__sfputc_r>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d1f3      	bne.n	8009f44 <__sfputs_r+0xa>
 8009f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f60 <_vfiprintf_r>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	460d      	mov	r5, r1
 8009f66:	b09d      	sub	sp, #116	; 0x74
 8009f68:	4614      	mov	r4, r2
 8009f6a:	4698      	mov	r8, r3
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	b118      	cbz	r0, 8009f78 <_vfiprintf_r+0x18>
 8009f70:	6983      	ldr	r3, [r0, #24]
 8009f72:	b90b      	cbnz	r3, 8009f78 <_vfiprintf_r+0x18>
 8009f74:	f000 fb14 	bl	800a5a0 <__sinit>
 8009f78:	4b89      	ldr	r3, [pc, #548]	; (800a1a0 <_vfiprintf_r+0x240>)
 8009f7a:	429d      	cmp	r5, r3
 8009f7c:	d11b      	bne.n	8009fb6 <_vfiprintf_r+0x56>
 8009f7e:	6875      	ldr	r5, [r6, #4]
 8009f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f82:	07d9      	lsls	r1, r3, #31
 8009f84:	d405      	bmi.n	8009f92 <_vfiprintf_r+0x32>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	059a      	lsls	r2, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_vfiprintf_r+0x32>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f000 fba5 	bl	800a6dc <__retarget_lock_acquire_recursive>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	071b      	lsls	r3, r3, #28
 8009f96:	d501      	bpl.n	8009f9c <_vfiprintf_r+0x3c>
 8009f98:	692b      	ldr	r3, [r5, #16]
 8009f9a:	b9eb      	cbnz	r3, 8009fd8 <_vfiprintf_r+0x78>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f000 f96e 	bl	800a280 <__swsetup_r>
 8009fa4:	b1c0      	cbz	r0, 8009fd8 <_vfiprintf_r+0x78>
 8009fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa8:	07dc      	lsls	r4, r3, #31
 8009faa:	d50e      	bpl.n	8009fca <_vfiprintf_r+0x6a>
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	b01d      	add	sp, #116	; 0x74
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	4b7b      	ldr	r3, [pc, #492]	; (800a1a4 <_vfiprintf_r+0x244>)
 8009fb8:	429d      	cmp	r5, r3
 8009fba:	d101      	bne.n	8009fc0 <_vfiprintf_r+0x60>
 8009fbc:	68b5      	ldr	r5, [r6, #8]
 8009fbe:	e7df      	b.n	8009f80 <_vfiprintf_r+0x20>
 8009fc0:	4b79      	ldr	r3, [pc, #484]	; (800a1a8 <_vfiprintf_r+0x248>)
 8009fc2:	429d      	cmp	r5, r3
 8009fc4:	bf08      	it	eq
 8009fc6:	68f5      	ldreq	r5, [r6, #12]
 8009fc8:	e7da      	b.n	8009f80 <_vfiprintf_r+0x20>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	0598      	lsls	r0, r3, #22
 8009fce:	d4ed      	bmi.n	8009fac <_vfiprintf_r+0x4c>
 8009fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fd2:	f000 fb84 	bl	800a6de <__retarget_lock_release_recursive>
 8009fd6:	e7e9      	b.n	8009fac <_vfiprintf_r+0x4c>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9309      	str	r3, [sp, #36]	; 0x24
 8009fdc:	2320      	movs	r3, #32
 8009fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe6:	2330      	movs	r3, #48	; 0x30
 8009fe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1ac <_vfiprintf_r+0x24c>
 8009fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ff0:	f04f 0901 	mov.w	r9, #1
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	469a      	mov	sl, r3
 8009ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffc:	b10a      	cbz	r2, 800a002 <_vfiprintf_r+0xa2>
 8009ffe:	2a25      	cmp	r2, #37	; 0x25
 800a000:	d1f9      	bne.n	8009ff6 <_vfiprintf_r+0x96>
 800a002:	ebba 0b04 	subs.w	fp, sl, r4
 800a006:	d00b      	beq.n	800a020 <_vfiprintf_r+0xc0>
 800a008:	465b      	mov	r3, fp
 800a00a:	4622      	mov	r2, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff ff93 	bl	8009f3a <__sfputs_r>
 800a014:	3001      	adds	r0, #1
 800a016:	f000 80aa 	beq.w	800a16e <_vfiprintf_r+0x20e>
 800a01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a01c:	445a      	add	r2, fp
 800a01e:	9209      	str	r2, [sp, #36]	; 0x24
 800a020:	f89a 3000 	ldrb.w	r3, [sl]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80a2 	beq.w	800a16e <_vfiprintf_r+0x20e>
 800a02a:	2300      	movs	r3, #0
 800a02c:	f04f 32ff 	mov.w	r2, #4294967295
 800a030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a034:	f10a 0a01 	add.w	sl, sl, #1
 800a038:	9304      	str	r3, [sp, #16]
 800a03a:	9307      	str	r3, [sp, #28]
 800a03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a040:	931a      	str	r3, [sp, #104]	; 0x68
 800a042:	4654      	mov	r4, sl
 800a044:	2205      	movs	r2, #5
 800a046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04a:	4858      	ldr	r0, [pc, #352]	; (800a1ac <_vfiprintf_r+0x24c>)
 800a04c:	f7f6 f8c8 	bl	80001e0 <memchr>
 800a050:	9a04      	ldr	r2, [sp, #16]
 800a052:	b9d8      	cbnz	r0, 800a08c <_vfiprintf_r+0x12c>
 800a054:	06d1      	lsls	r1, r2, #27
 800a056:	bf44      	itt	mi
 800a058:	2320      	movmi	r3, #32
 800a05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05e:	0713      	lsls	r3, r2, #28
 800a060:	bf44      	itt	mi
 800a062:	232b      	movmi	r3, #43	; 0x2b
 800a064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a068:	f89a 3000 	ldrb.w	r3, [sl]
 800a06c:	2b2a      	cmp	r3, #42	; 0x2a
 800a06e:	d015      	beq.n	800a09c <_vfiprintf_r+0x13c>
 800a070:	9a07      	ldr	r2, [sp, #28]
 800a072:	4654      	mov	r4, sl
 800a074:	2000      	movs	r0, #0
 800a076:	f04f 0c0a 	mov.w	ip, #10
 800a07a:	4621      	mov	r1, r4
 800a07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a080:	3b30      	subs	r3, #48	; 0x30
 800a082:	2b09      	cmp	r3, #9
 800a084:	d94e      	bls.n	800a124 <_vfiprintf_r+0x1c4>
 800a086:	b1b0      	cbz	r0, 800a0b6 <_vfiprintf_r+0x156>
 800a088:	9207      	str	r2, [sp, #28]
 800a08a:	e014      	b.n	800a0b6 <_vfiprintf_r+0x156>
 800a08c:	eba0 0308 	sub.w	r3, r0, r8
 800a090:	fa09 f303 	lsl.w	r3, r9, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	9304      	str	r3, [sp, #16]
 800a098:	46a2      	mov	sl, r4
 800a09a:	e7d2      	b.n	800a042 <_vfiprintf_r+0xe2>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	1d19      	adds	r1, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	9103      	str	r1, [sp, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfbb      	ittet	lt
 800a0a8:	425b      	neglt	r3, r3
 800a0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ae:	9307      	strge	r3, [sp, #28]
 800a0b0:	9307      	strlt	r3, [sp, #28]
 800a0b2:	bfb8      	it	lt
 800a0b4:	9204      	strlt	r2, [sp, #16]
 800a0b6:	7823      	ldrb	r3, [r4, #0]
 800a0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ba:	d10c      	bne.n	800a0d6 <_vfiprintf_r+0x176>
 800a0bc:	7863      	ldrb	r3, [r4, #1]
 800a0be:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c0:	d135      	bne.n	800a12e <_vfiprintf_r+0x1ce>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	1d1a      	adds	r2, r3, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	9203      	str	r2, [sp, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bfb8      	it	lt
 800a0ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0d2:	3402      	adds	r4, #2
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1bc <_vfiprintf_r+0x25c>
 800a0da:	7821      	ldrb	r1, [r4, #0]
 800a0dc:	2203      	movs	r2, #3
 800a0de:	4650      	mov	r0, sl
 800a0e0:	f7f6 f87e 	bl	80001e0 <memchr>
 800a0e4:	b140      	cbz	r0, 800a0f8 <_vfiprintf_r+0x198>
 800a0e6:	2340      	movs	r3, #64	; 0x40
 800a0e8:	eba0 000a 	sub.w	r0, r0, sl
 800a0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800a0f0:	9b04      	ldr	r3, [sp, #16]
 800a0f2:	4303      	orrs	r3, r0
 800a0f4:	3401      	adds	r4, #1
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fc:	482c      	ldr	r0, [pc, #176]	; (800a1b0 <_vfiprintf_r+0x250>)
 800a0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a102:	2206      	movs	r2, #6
 800a104:	f7f6 f86c 	bl	80001e0 <memchr>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d03f      	beq.n	800a18c <_vfiprintf_r+0x22c>
 800a10c:	4b29      	ldr	r3, [pc, #164]	; (800a1b4 <_vfiprintf_r+0x254>)
 800a10e:	bb1b      	cbnz	r3, 800a158 <_vfiprintf_r+0x1f8>
 800a110:	9b03      	ldr	r3, [sp, #12]
 800a112:	3307      	adds	r3, #7
 800a114:	f023 0307 	bic.w	r3, r3, #7
 800a118:	3308      	adds	r3, #8
 800a11a:	9303      	str	r3, [sp, #12]
 800a11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11e:	443b      	add	r3, r7
 800a120:	9309      	str	r3, [sp, #36]	; 0x24
 800a122:	e767      	b.n	8009ff4 <_vfiprintf_r+0x94>
 800a124:	fb0c 3202 	mla	r2, ip, r2, r3
 800a128:	460c      	mov	r4, r1
 800a12a:	2001      	movs	r0, #1
 800a12c:	e7a5      	b.n	800a07a <_vfiprintf_r+0x11a>
 800a12e:	2300      	movs	r3, #0
 800a130:	3401      	adds	r4, #1
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	4619      	mov	r1, r3
 800a136:	f04f 0c0a 	mov.w	ip, #10
 800a13a:	4620      	mov	r0, r4
 800a13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a140:	3a30      	subs	r2, #48	; 0x30
 800a142:	2a09      	cmp	r2, #9
 800a144:	d903      	bls.n	800a14e <_vfiprintf_r+0x1ee>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0c5      	beq.n	800a0d6 <_vfiprintf_r+0x176>
 800a14a:	9105      	str	r1, [sp, #20]
 800a14c:	e7c3      	b.n	800a0d6 <_vfiprintf_r+0x176>
 800a14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a152:	4604      	mov	r4, r0
 800a154:	2301      	movs	r3, #1
 800a156:	e7f0      	b.n	800a13a <_vfiprintf_r+0x1da>
 800a158:	ab03      	add	r3, sp, #12
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	462a      	mov	r2, r5
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <_vfiprintf_r+0x258>)
 800a160:	a904      	add	r1, sp, #16
 800a162:	4630      	mov	r0, r6
 800a164:	f7fd fe32 	bl	8007dcc <_printf_float>
 800a168:	4607      	mov	r7, r0
 800a16a:	1c78      	adds	r0, r7, #1
 800a16c:	d1d6      	bne.n	800a11c <_vfiprintf_r+0x1bc>
 800a16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a170:	07d9      	lsls	r1, r3, #31
 800a172:	d405      	bmi.n	800a180 <_vfiprintf_r+0x220>
 800a174:	89ab      	ldrh	r3, [r5, #12]
 800a176:	059a      	lsls	r2, r3, #22
 800a178:	d402      	bmi.n	800a180 <_vfiprintf_r+0x220>
 800a17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a17c:	f000 faaf 	bl	800a6de <__retarget_lock_release_recursive>
 800a180:	89ab      	ldrh	r3, [r5, #12]
 800a182:	065b      	lsls	r3, r3, #25
 800a184:	f53f af12 	bmi.w	8009fac <_vfiprintf_r+0x4c>
 800a188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a18a:	e711      	b.n	8009fb0 <_vfiprintf_r+0x50>
 800a18c:	ab03      	add	r3, sp, #12
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	462a      	mov	r2, r5
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <_vfiprintf_r+0x258>)
 800a194:	a904      	add	r1, sp, #16
 800a196:	4630      	mov	r0, r6
 800a198:	f7fe f8bc 	bl	8008314 <_printf_i>
 800a19c:	e7e4      	b.n	800a168 <_vfiprintf_r+0x208>
 800a19e:	bf00      	nop
 800a1a0:	0800ae84 	.word	0x0800ae84
 800a1a4:	0800aea4 	.word	0x0800aea4
 800a1a8:	0800ae64 	.word	0x0800ae64
 800a1ac:	0800ad0c 	.word	0x0800ad0c
 800a1b0:	0800ad16 	.word	0x0800ad16
 800a1b4:	08007dcd 	.word	0x08007dcd
 800a1b8:	08009f3b 	.word	0x08009f3b
 800a1bc:	0800ad12 	.word	0x0800ad12

0800a1c0 <__swbuf_r>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	460e      	mov	r6, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	b118      	cbz	r0, 800a1d2 <__swbuf_r+0x12>
 800a1ca:	6983      	ldr	r3, [r0, #24]
 800a1cc:	b90b      	cbnz	r3, 800a1d2 <__swbuf_r+0x12>
 800a1ce:	f000 f9e7 	bl	800a5a0 <__sinit>
 800a1d2:	4b21      	ldr	r3, [pc, #132]	; (800a258 <__swbuf_r+0x98>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	d12b      	bne.n	800a230 <__swbuf_r+0x70>
 800a1d8:	686c      	ldr	r4, [r5, #4]
 800a1da:	69a3      	ldr	r3, [r4, #24]
 800a1dc:	60a3      	str	r3, [r4, #8]
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	071a      	lsls	r2, r3, #28
 800a1e2:	d52f      	bpl.n	800a244 <__swbuf_r+0x84>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	b36b      	cbz	r3, 800a244 <__swbuf_r+0x84>
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	6820      	ldr	r0, [r4, #0]
 800a1ec:	1ac0      	subs	r0, r0, r3
 800a1ee:	6963      	ldr	r3, [r4, #20]
 800a1f0:	b2f6      	uxtb	r6, r6
 800a1f2:	4283      	cmp	r3, r0
 800a1f4:	4637      	mov	r7, r6
 800a1f6:	dc04      	bgt.n	800a202 <__swbuf_r+0x42>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f000 f93c 	bl	800a478 <_fflush_r>
 800a200:	bb30      	cbnz	r0, 800a250 <__swbuf_r+0x90>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	3b01      	subs	r3, #1
 800a206:	60a3      	str	r3, [r4, #8]
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	6022      	str	r2, [r4, #0]
 800a20e:	701e      	strb	r6, [r3, #0]
 800a210:	6963      	ldr	r3, [r4, #20]
 800a212:	3001      	adds	r0, #1
 800a214:	4283      	cmp	r3, r0
 800a216:	d004      	beq.n	800a222 <__swbuf_r+0x62>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	07db      	lsls	r3, r3, #31
 800a21c:	d506      	bpl.n	800a22c <__swbuf_r+0x6c>
 800a21e:	2e0a      	cmp	r6, #10
 800a220:	d104      	bne.n	800a22c <__swbuf_r+0x6c>
 800a222:	4621      	mov	r1, r4
 800a224:	4628      	mov	r0, r5
 800a226:	f000 f927 	bl	800a478 <_fflush_r>
 800a22a:	b988      	cbnz	r0, 800a250 <__swbuf_r+0x90>
 800a22c:	4638      	mov	r0, r7
 800a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <__swbuf_r+0x9c>)
 800a232:	429c      	cmp	r4, r3
 800a234:	d101      	bne.n	800a23a <__swbuf_r+0x7a>
 800a236:	68ac      	ldr	r4, [r5, #8]
 800a238:	e7cf      	b.n	800a1da <__swbuf_r+0x1a>
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <__swbuf_r+0xa0>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	bf08      	it	eq
 800a240:	68ec      	ldreq	r4, [r5, #12]
 800a242:	e7ca      	b.n	800a1da <__swbuf_r+0x1a>
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f000 f81a 	bl	800a280 <__swsetup_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d0cb      	beq.n	800a1e8 <__swbuf_r+0x28>
 800a250:	f04f 37ff 	mov.w	r7, #4294967295
 800a254:	e7ea      	b.n	800a22c <__swbuf_r+0x6c>
 800a256:	bf00      	nop
 800a258:	0800ae84 	.word	0x0800ae84
 800a25c:	0800aea4 	.word	0x0800aea4
 800a260:	0800ae64 	.word	0x0800ae64

0800a264 <__ascii_wctomb>:
 800a264:	b149      	cbz	r1, 800a27a <__ascii_wctomb+0x16>
 800a266:	2aff      	cmp	r2, #255	; 0xff
 800a268:	bf85      	ittet	hi
 800a26a:	238a      	movhi	r3, #138	; 0x8a
 800a26c:	6003      	strhi	r3, [r0, #0]
 800a26e:	700a      	strbls	r2, [r1, #0]
 800a270:	f04f 30ff 	movhi.w	r0, #4294967295
 800a274:	bf98      	it	ls
 800a276:	2001      	movls	r0, #1
 800a278:	4770      	bx	lr
 800a27a:	4608      	mov	r0, r1
 800a27c:	4770      	bx	lr
	...

0800a280 <__swsetup_r>:
 800a280:	4b32      	ldr	r3, [pc, #200]	; (800a34c <__swsetup_r+0xcc>)
 800a282:	b570      	push	{r4, r5, r6, lr}
 800a284:	681d      	ldr	r5, [r3, #0]
 800a286:	4606      	mov	r6, r0
 800a288:	460c      	mov	r4, r1
 800a28a:	b125      	cbz	r5, 800a296 <__swsetup_r+0x16>
 800a28c:	69ab      	ldr	r3, [r5, #24]
 800a28e:	b913      	cbnz	r3, 800a296 <__swsetup_r+0x16>
 800a290:	4628      	mov	r0, r5
 800a292:	f000 f985 	bl	800a5a0 <__sinit>
 800a296:	4b2e      	ldr	r3, [pc, #184]	; (800a350 <__swsetup_r+0xd0>)
 800a298:	429c      	cmp	r4, r3
 800a29a:	d10f      	bne.n	800a2bc <__swsetup_r+0x3c>
 800a29c:	686c      	ldr	r4, [r5, #4]
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a4:	0719      	lsls	r1, r3, #28
 800a2a6:	d42c      	bmi.n	800a302 <__swsetup_r+0x82>
 800a2a8:	06dd      	lsls	r5, r3, #27
 800a2aa:	d411      	bmi.n	800a2d0 <__swsetup_r+0x50>
 800a2ac:	2309      	movs	r3, #9
 800a2ae:	6033      	str	r3, [r6, #0]
 800a2b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2b4:	81a3      	strh	r3, [r4, #12]
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	e03e      	b.n	800a33a <__swsetup_r+0xba>
 800a2bc:	4b25      	ldr	r3, [pc, #148]	; (800a354 <__swsetup_r+0xd4>)
 800a2be:	429c      	cmp	r4, r3
 800a2c0:	d101      	bne.n	800a2c6 <__swsetup_r+0x46>
 800a2c2:	68ac      	ldr	r4, [r5, #8]
 800a2c4:	e7eb      	b.n	800a29e <__swsetup_r+0x1e>
 800a2c6:	4b24      	ldr	r3, [pc, #144]	; (800a358 <__swsetup_r+0xd8>)
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	bf08      	it	eq
 800a2cc:	68ec      	ldreq	r4, [r5, #12]
 800a2ce:	e7e6      	b.n	800a29e <__swsetup_r+0x1e>
 800a2d0:	0758      	lsls	r0, r3, #29
 800a2d2:	d512      	bpl.n	800a2fa <__swsetup_r+0x7a>
 800a2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2d6:	b141      	cbz	r1, 800a2ea <__swsetup_r+0x6a>
 800a2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2dc:	4299      	cmp	r1, r3
 800a2de:	d002      	beq.n	800a2e6 <__swsetup_r+0x66>
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff fb6f 	bl	80099c4 <_free_r>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f043 0308 	orr.w	r3, r3, #8
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	b94b      	cbnz	r3, 800a31a <__swsetup_r+0x9a>
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a310:	d003      	beq.n	800a31a <__swsetup_r+0x9a>
 800a312:	4621      	mov	r1, r4
 800a314:	4630      	mov	r0, r6
 800a316:	f000 fa07 	bl	800a728 <__smakebuf_r>
 800a31a:	89a0      	ldrh	r0, [r4, #12]
 800a31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a320:	f010 0301 	ands.w	r3, r0, #1
 800a324:	d00a      	beq.n	800a33c <__swsetup_r+0xbc>
 800a326:	2300      	movs	r3, #0
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	6963      	ldr	r3, [r4, #20]
 800a32c:	425b      	negs	r3, r3
 800a32e:	61a3      	str	r3, [r4, #24]
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	b943      	cbnz	r3, 800a346 <__swsetup_r+0xc6>
 800a334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a338:	d1ba      	bne.n	800a2b0 <__swsetup_r+0x30>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	0781      	lsls	r1, r0, #30
 800a33e:	bf58      	it	pl
 800a340:	6963      	ldrpl	r3, [r4, #20]
 800a342:	60a3      	str	r3, [r4, #8]
 800a344:	e7f4      	b.n	800a330 <__swsetup_r+0xb0>
 800a346:	2000      	movs	r0, #0
 800a348:	e7f7      	b.n	800a33a <__swsetup_r+0xba>
 800a34a:	bf00      	nop
 800a34c:	20000054 	.word	0x20000054
 800a350:	0800ae84 	.word	0x0800ae84
 800a354:	0800aea4 	.word	0x0800aea4
 800a358:	0800ae64 	.word	0x0800ae64

0800a35c <abort>:
 800a35c:	b508      	push	{r3, lr}
 800a35e:	2006      	movs	r0, #6
 800a360:	f000 fa52 	bl	800a808 <raise>
 800a364:	2001      	movs	r0, #1
 800a366:	f7f7 ff3d 	bl	80021e4 <_exit>
	...

0800a36c <__sflush_r>:
 800a36c:	898a      	ldrh	r2, [r1, #12]
 800a36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a372:	4605      	mov	r5, r0
 800a374:	0710      	lsls	r0, r2, #28
 800a376:	460c      	mov	r4, r1
 800a378:	d458      	bmi.n	800a42c <__sflush_r+0xc0>
 800a37a:	684b      	ldr	r3, [r1, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc05      	bgt.n	800a38c <__sflush_r+0x20>
 800a380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	dc02      	bgt.n	800a38c <__sflush_r+0x20>
 800a386:	2000      	movs	r0, #0
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a38e:	2e00      	cmp	r6, #0
 800a390:	d0f9      	beq.n	800a386 <__sflush_r+0x1a>
 800a392:	2300      	movs	r3, #0
 800a394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a398:	682f      	ldr	r7, [r5, #0]
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	d032      	beq.n	800a404 <__sflush_r+0x98>
 800a39e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	075a      	lsls	r2, r3, #29
 800a3a4:	d505      	bpl.n	800a3b2 <__sflush_r+0x46>
 800a3a6:	6863      	ldr	r3, [r4, #4]
 800a3a8:	1ac0      	subs	r0, r0, r3
 800a3aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3ac:	b10b      	cbz	r3, 800a3b2 <__sflush_r+0x46>
 800a3ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3b0:	1ac0      	subs	r0, r0, r3
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3b8:	6a21      	ldr	r1, [r4, #32]
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b0      	blx	r6
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	d106      	bne.n	800a3d2 <__sflush_r+0x66>
 800a3c4:	6829      	ldr	r1, [r5, #0]
 800a3c6:	291d      	cmp	r1, #29
 800a3c8:	d82c      	bhi.n	800a424 <__sflush_r+0xb8>
 800a3ca:	4a2a      	ldr	r2, [pc, #168]	; (800a474 <__sflush_r+0x108>)
 800a3cc:	40ca      	lsrs	r2, r1
 800a3ce:	07d6      	lsls	r6, r2, #31
 800a3d0:	d528      	bpl.n	800a424 <__sflush_r+0xb8>
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	6062      	str	r2, [r4, #4]
 800a3d6:	04d9      	lsls	r1, r3, #19
 800a3d8:	6922      	ldr	r2, [r4, #16]
 800a3da:	6022      	str	r2, [r4, #0]
 800a3dc:	d504      	bpl.n	800a3e8 <__sflush_r+0x7c>
 800a3de:	1c42      	adds	r2, r0, #1
 800a3e0:	d101      	bne.n	800a3e6 <__sflush_r+0x7a>
 800a3e2:	682b      	ldr	r3, [r5, #0]
 800a3e4:	b903      	cbnz	r3, 800a3e8 <__sflush_r+0x7c>
 800a3e6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ea:	602f      	str	r7, [r5, #0]
 800a3ec:	2900      	cmp	r1, #0
 800a3ee:	d0ca      	beq.n	800a386 <__sflush_r+0x1a>
 800a3f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	d002      	beq.n	800a3fe <__sflush_r+0x92>
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f7ff fae3 	bl	80099c4 <_free_r>
 800a3fe:	2000      	movs	r0, #0
 800a400:	6360      	str	r0, [r4, #52]	; 0x34
 800a402:	e7c1      	b.n	800a388 <__sflush_r+0x1c>
 800a404:	6a21      	ldr	r1, [r4, #32]
 800a406:	2301      	movs	r3, #1
 800a408:	4628      	mov	r0, r5
 800a40a:	47b0      	blx	r6
 800a40c:	1c41      	adds	r1, r0, #1
 800a40e:	d1c7      	bne.n	800a3a0 <__sflush_r+0x34>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0c4      	beq.n	800a3a0 <__sflush_r+0x34>
 800a416:	2b1d      	cmp	r3, #29
 800a418:	d001      	beq.n	800a41e <__sflush_r+0xb2>
 800a41a:	2b16      	cmp	r3, #22
 800a41c:	d101      	bne.n	800a422 <__sflush_r+0xb6>
 800a41e:	602f      	str	r7, [r5, #0]
 800a420:	e7b1      	b.n	800a386 <__sflush_r+0x1a>
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	e7ad      	b.n	800a388 <__sflush_r+0x1c>
 800a42c:	690f      	ldr	r7, [r1, #16]
 800a42e:	2f00      	cmp	r7, #0
 800a430:	d0a9      	beq.n	800a386 <__sflush_r+0x1a>
 800a432:	0793      	lsls	r3, r2, #30
 800a434:	680e      	ldr	r6, [r1, #0]
 800a436:	bf08      	it	eq
 800a438:	694b      	ldreq	r3, [r1, #20]
 800a43a:	600f      	str	r7, [r1, #0]
 800a43c:	bf18      	it	ne
 800a43e:	2300      	movne	r3, #0
 800a440:	eba6 0807 	sub.w	r8, r6, r7
 800a444:	608b      	str	r3, [r1, #8]
 800a446:	f1b8 0f00 	cmp.w	r8, #0
 800a44a:	dd9c      	ble.n	800a386 <__sflush_r+0x1a>
 800a44c:	6a21      	ldr	r1, [r4, #32]
 800a44e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a450:	4643      	mov	r3, r8
 800a452:	463a      	mov	r2, r7
 800a454:	4628      	mov	r0, r5
 800a456:	47b0      	blx	r6
 800a458:	2800      	cmp	r0, #0
 800a45a:	dc06      	bgt.n	800a46a <__sflush_r+0xfe>
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	e78e      	b.n	800a388 <__sflush_r+0x1c>
 800a46a:	4407      	add	r7, r0
 800a46c:	eba8 0800 	sub.w	r8, r8, r0
 800a470:	e7e9      	b.n	800a446 <__sflush_r+0xda>
 800a472:	bf00      	nop
 800a474:	20400001 	.word	0x20400001

0800a478 <_fflush_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	690b      	ldr	r3, [r1, #16]
 800a47c:	4605      	mov	r5, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	b913      	cbnz	r3, 800a488 <_fflush_r+0x10>
 800a482:	2500      	movs	r5, #0
 800a484:	4628      	mov	r0, r5
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	b118      	cbz	r0, 800a492 <_fflush_r+0x1a>
 800a48a:	6983      	ldr	r3, [r0, #24]
 800a48c:	b90b      	cbnz	r3, 800a492 <_fflush_r+0x1a>
 800a48e:	f000 f887 	bl	800a5a0 <__sinit>
 800a492:	4b14      	ldr	r3, [pc, #80]	; (800a4e4 <_fflush_r+0x6c>)
 800a494:	429c      	cmp	r4, r3
 800a496:	d11b      	bne.n	800a4d0 <_fflush_r+0x58>
 800a498:	686c      	ldr	r4, [r5, #4]
 800a49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0ef      	beq.n	800a482 <_fflush_r+0xa>
 800a4a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4a4:	07d0      	lsls	r0, r2, #31
 800a4a6:	d404      	bmi.n	800a4b2 <_fflush_r+0x3a>
 800a4a8:	0599      	lsls	r1, r3, #22
 800a4aa:	d402      	bmi.n	800a4b2 <_fflush_r+0x3a>
 800a4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ae:	f000 f915 	bl	800a6dc <__retarget_lock_acquire_recursive>
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	f7ff ff59 	bl	800a36c <__sflush_r>
 800a4ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4bc:	07da      	lsls	r2, r3, #31
 800a4be:	4605      	mov	r5, r0
 800a4c0:	d4e0      	bmi.n	800a484 <_fflush_r+0xc>
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	059b      	lsls	r3, r3, #22
 800a4c6:	d4dd      	bmi.n	800a484 <_fflush_r+0xc>
 800a4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ca:	f000 f908 	bl	800a6de <__retarget_lock_release_recursive>
 800a4ce:	e7d9      	b.n	800a484 <_fflush_r+0xc>
 800a4d0:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <_fflush_r+0x70>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <_fflush_r+0x62>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7df      	b.n	800a49a <_fflush_r+0x22>
 800a4da:	4b04      	ldr	r3, [pc, #16]	; (800a4ec <_fflush_r+0x74>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7da      	b.n	800a49a <_fflush_r+0x22>
 800a4e4:	0800ae84 	.word	0x0800ae84
 800a4e8:	0800aea4 	.word	0x0800aea4
 800a4ec:	0800ae64 	.word	0x0800ae64

0800a4f0 <std>:
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4fe:	6083      	str	r3, [r0, #8]
 800a500:	8181      	strh	r1, [r0, #12]
 800a502:	6643      	str	r3, [r0, #100]	; 0x64
 800a504:	81c2      	strh	r2, [r0, #14]
 800a506:	6183      	str	r3, [r0, #24]
 800a508:	4619      	mov	r1, r3
 800a50a:	2208      	movs	r2, #8
 800a50c:	305c      	adds	r0, #92	; 0x5c
 800a50e:	f7fd fbb5 	bl	8007c7c <memset>
 800a512:	4b05      	ldr	r3, [pc, #20]	; (800a528 <std+0x38>)
 800a514:	6263      	str	r3, [r4, #36]	; 0x24
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <std+0x3c>)
 800a518:	62a3      	str	r3, [r4, #40]	; 0x28
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <std+0x40>)
 800a51c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <std+0x44>)
 800a520:	6224      	str	r4, [r4, #32]
 800a522:	6323      	str	r3, [r4, #48]	; 0x30
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	0800a841 	.word	0x0800a841
 800a52c:	0800a863 	.word	0x0800a863
 800a530:	0800a89b 	.word	0x0800a89b
 800a534:	0800a8bf 	.word	0x0800a8bf

0800a538 <_cleanup_r>:
 800a538:	4901      	ldr	r1, [pc, #4]	; (800a540 <_cleanup_r+0x8>)
 800a53a:	f000 b8af 	b.w	800a69c <_fwalk_reent>
 800a53e:	bf00      	nop
 800a540:	0800a479 	.word	0x0800a479

0800a544 <__sfmoreglue>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	1e4a      	subs	r2, r1, #1
 800a548:	2568      	movs	r5, #104	; 0x68
 800a54a:	4355      	muls	r5, r2
 800a54c:	460e      	mov	r6, r1
 800a54e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a552:	f7ff fa87 	bl	8009a64 <_malloc_r>
 800a556:	4604      	mov	r4, r0
 800a558:	b140      	cbz	r0, 800a56c <__sfmoreglue+0x28>
 800a55a:	2100      	movs	r1, #0
 800a55c:	e9c0 1600 	strd	r1, r6, [r0]
 800a560:	300c      	adds	r0, #12
 800a562:	60a0      	str	r0, [r4, #8]
 800a564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a568:	f7fd fb88 	bl	8007c7c <memset>
 800a56c:	4620      	mov	r0, r4
 800a56e:	bd70      	pop	{r4, r5, r6, pc}

0800a570 <__sfp_lock_acquire>:
 800a570:	4801      	ldr	r0, [pc, #4]	; (800a578 <__sfp_lock_acquire+0x8>)
 800a572:	f000 b8b3 	b.w	800a6dc <__retarget_lock_acquire_recursive>
 800a576:	bf00      	nop
 800a578:	20001950 	.word	0x20001950

0800a57c <__sfp_lock_release>:
 800a57c:	4801      	ldr	r0, [pc, #4]	; (800a584 <__sfp_lock_release+0x8>)
 800a57e:	f000 b8ae 	b.w	800a6de <__retarget_lock_release_recursive>
 800a582:	bf00      	nop
 800a584:	20001950 	.word	0x20001950

0800a588 <__sinit_lock_acquire>:
 800a588:	4801      	ldr	r0, [pc, #4]	; (800a590 <__sinit_lock_acquire+0x8>)
 800a58a:	f000 b8a7 	b.w	800a6dc <__retarget_lock_acquire_recursive>
 800a58e:	bf00      	nop
 800a590:	2000194b 	.word	0x2000194b

0800a594 <__sinit_lock_release>:
 800a594:	4801      	ldr	r0, [pc, #4]	; (800a59c <__sinit_lock_release+0x8>)
 800a596:	f000 b8a2 	b.w	800a6de <__retarget_lock_release_recursive>
 800a59a:	bf00      	nop
 800a59c:	2000194b 	.word	0x2000194b

0800a5a0 <__sinit>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	f7ff fff0 	bl	800a588 <__sinit_lock_acquire>
 800a5a8:	69a3      	ldr	r3, [r4, #24]
 800a5aa:	b11b      	cbz	r3, 800a5b4 <__sinit+0x14>
 800a5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b0:	f7ff bff0 	b.w	800a594 <__sinit_lock_release>
 800a5b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a5ba:	4b13      	ldr	r3, [pc, #76]	; (800a608 <__sinit+0x68>)
 800a5bc:	4a13      	ldr	r2, [pc, #76]	; (800a60c <__sinit+0x6c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5c2:	42a3      	cmp	r3, r4
 800a5c4:	bf04      	itt	eq
 800a5c6:	2301      	moveq	r3, #1
 800a5c8:	61a3      	streq	r3, [r4, #24]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 f820 	bl	800a610 <__sfp>
 800a5d0:	6060      	str	r0, [r4, #4]
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 f81c 	bl	800a610 <__sfp>
 800a5d8:	60a0      	str	r0, [r4, #8]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 f818 	bl	800a610 <__sfp>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	60e0      	str	r0, [r4, #12]
 800a5e4:	2104      	movs	r1, #4
 800a5e6:	6860      	ldr	r0, [r4, #4]
 800a5e8:	f7ff ff82 	bl	800a4f0 <std>
 800a5ec:	68a0      	ldr	r0, [r4, #8]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	2109      	movs	r1, #9
 800a5f2:	f7ff ff7d 	bl	800a4f0 <std>
 800a5f6:	68e0      	ldr	r0, [r4, #12]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	2112      	movs	r1, #18
 800a5fc:	f7ff ff78 	bl	800a4f0 <std>
 800a600:	2301      	movs	r3, #1
 800a602:	61a3      	str	r3, [r4, #24]
 800a604:	e7d2      	b.n	800a5ac <__sinit+0xc>
 800a606:	bf00      	nop
 800a608:	0800aae0 	.word	0x0800aae0
 800a60c:	0800a539 	.word	0x0800a539

0800a610 <__sfp>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	4607      	mov	r7, r0
 800a614:	f7ff ffac 	bl	800a570 <__sfp_lock_acquire>
 800a618:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <__sfp+0x84>)
 800a61a:	681e      	ldr	r6, [r3, #0]
 800a61c:	69b3      	ldr	r3, [r6, #24]
 800a61e:	b913      	cbnz	r3, 800a626 <__sfp+0x16>
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff ffbd 	bl	800a5a0 <__sinit>
 800a626:	3648      	adds	r6, #72	; 0x48
 800a628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	d503      	bpl.n	800a638 <__sfp+0x28>
 800a630:	6833      	ldr	r3, [r6, #0]
 800a632:	b30b      	cbz	r3, 800a678 <__sfp+0x68>
 800a634:	6836      	ldr	r6, [r6, #0]
 800a636:	e7f7      	b.n	800a628 <__sfp+0x18>
 800a638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a63c:	b9d5      	cbnz	r5, 800a674 <__sfp+0x64>
 800a63e:	4b16      	ldr	r3, [pc, #88]	; (800a698 <__sfp+0x88>)
 800a640:	60e3      	str	r3, [r4, #12]
 800a642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a646:	6665      	str	r5, [r4, #100]	; 0x64
 800a648:	f000 f847 	bl	800a6da <__retarget_lock_init_recursive>
 800a64c:	f7ff ff96 	bl	800a57c <__sfp_lock_release>
 800a650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a658:	6025      	str	r5, [r4, #0]
 800a65a:	61a5      	str	r5, [r4, #24]
 800a65c:	2208      	movs	r2, #8
 800a65e:	4629      	mov	r1, r5
 800a660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a664:	f7fd fb0a 	bl	8007c7c <memset>
 800a668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a66c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a670:	4620      	mov	r0, r4
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	3468      	adds	r4, #104	; 0x68
 800a676:	e7d9      	b.n	800a62c <__sfp+0x1c>
 800a678:	2104      	movs	r1, #4
 800a67a:	4638      	mov	r0, r7
 800a67c:	f7ff ff62 	bl	800a544 <__sfmoreglue>
 800a680:	4604      	mov	r4, r0
 800a682:	6030      	str	r0, [r6, #0]
 800a684:	2800      	cmp	r0, #0
 800a686:	d1d5      	bne.n	800a634 <__sfp+0x24>
 800a688:	f7ff ff78 	bl	800a57c <__sfp_lock_release>
 800a68c:	230c      	movs	r3, #12
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	e7ee      	b.n	800a670 <__sfp+0x60>
 800a692:	bf00      	nop
 800a694:	0800aae0 	.word	0x0800aae0
 800a698:	ffff0001 	.word	0xffff0001

0800a69c <_fwalk_reent>:
 800a69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	4688      	mov	r8, r1
 800a6a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6a8:	2700      	movs	r7, #0
 800a6aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6ae:	f1b9 0901 	subs.w	r9, r9, #1
 800a6b2:	d505      	bpl.n	800a6c0 <_fwalk_reent+0x24>
 800a6b4:	6824      	ldr	r4, [r4, #0]
 800a6b6:	2c00      	cmp	r4, #0
 800a6b8:	d1f7      	bne.n	800a6aa <_fwalk_reent+0xe>
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c0:	89ab      	ldrh	r3, [r5, #12]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d907      	bls.n	800a6d6 <_fwalk_reent+0x3a>
 800a6c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	d003      	beq.n	800a6d6 <_fwalk_reent+0x3a>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	47c0      	blx	r8
 800a6d4:	4307      	orrs	r7, r0
 800a6d6:	3568      	adds	r5, #104	; 0x68
 800a6d8:	e7e9      	b.n	800a6ae <_fwalk_reent+0x12>

0800a6da <__retarget_lock_init_recursive>:
 800a6da:	4770      	bx	lr

0800a6dc <__retarget_lock_acquire_recursive>:
 800a6dc:	4770      	bx	lr

0800a6de <__retarget_lock_release_recursive>:
 800a6de:	4770      	bx	lr

0800a6e0 <__swhatbuf_r>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	460e      	mov	r6, r1
 800a6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	b096      	sub	sp, #88	; 0x58
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	461d      	mov	r5, r3
 800a6f0:	da07      	bge.n	800a702 <__swhatbuf_r+0x22>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	89b3      	ldrh	r3, [r6, #12]
 800a6f8:	061a      	lsls	r2, r3, #24
 800a6fa:	d410      	bmi.n	800a71e <__swhatbuf_r+0x3e>
 800a6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a700:	e00e      	b.n	800a720 <__swhatbuf_r+0x40>
 800a702:	466a      	mov	r2, sp
 800a704:	f000 f902 	bl	800a90c <_fstat_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dbf2      	blt.n	800a6f2 <__swhatbuf_r+0x12>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a716:	425a      	negs	r2, r3
 800a718:	415a      	adcs	r2, r3
 800a71a:	602a      	str	r2, [r5, #0]
 800a71c:	e7ee      	b.n	800a6fc <__swhatbuf_r+0x1c>
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	2000      	movs	r0, #0
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	b016      	add	sp, #88	; 0x58
 800a726:	bd70      	pop	{r4, r5, r6, pc}

0800a728 <__smakebuf_r>:
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a72c:	079d      	lsls	r5, r3, #30
 800a72e:	4606      	mov	r6, r0
 800a730:	460c      	mov	r4, r1
 800a732:	d507      	bpl.n	800a744 <__smakebuf_r+0x1c>
 800a734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	2301      	movs	r3, #1
 800a73e:	6163      	str	r3, [r4, #20]
 800a740:	b002      	add	sp, #8
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	ab01      	add	r3, sp, #4
 800a746:	466a      	mov	r2, sp
 800a748:	f7ff ffca 	bl	800a6e0 <__swhatbuf_r>
 800a74c:	9900      	ldr	r1, [sp, #0]
 800a74e:	4605      	mov	r5, r0
 800a750:	4630      	mov	r0, r6
 800a752:	f7ff f987 	bl	8009a64 <_malloc_r>
 800a756:	b948      	cbnz	r0, 800a76c <__smakebuf_r+0x44>
 800a758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75c:	059a      	lsls	r2, r3, #22
 800a75e:	d4ef      	bmi.n	800a740 <__smakebuf_r+0x18>
 800a760:	f023 0303 	bic.w	r3, r3, #3
 800a764:	f043 0302 	orr.w	r3, r3, #2
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	e7e3      	b.n	800a734 <__smakebuf_r+0xc>
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <__smakebuf_r+0x7c>)
 800a76e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	6020      	str	r0, [r4, #0]
 800a774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	6163      	str	r3, [r4, #20]
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	6120      	str	r0, [r4, #16]
 800a782:	b15b      	cbz	r3, 800a79c <__smakebuf_r+0x74>
 800a784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a788:	4630      	mov	r0, r6
 800a78a:	f000 f8d1 	bl	800a930 <_isatty_r>
 800a78e:	b128      	cbz	r0, 800a79c <__smakebuf_r+0x74>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	89a0      	ldrh	r0, [r4, #12]
 800a79e:	4305      	orrs	r5, r0
 800a7a0:	81a5      	strh	r5, [r4, #12]
 800a7a2:	e7cd      	b.n	800a740 <__smakebuf_r+0x18>
 800a7a4:	0800a539 	.word	0x0800a539

0800a7a8 <_malloc_usable_size_r>:
 800a7a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ac:	1f18      	subs	r0, r3, #4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bfbc      	itt	lt
 800a7b2:	580b      	ldrlt	r3, [r1, r0]
 800a7b4:	18c0      	addlt	r0, r0, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <_raise_r>:
 800a7b8:	291f      	cmp	r1, #31
 800a7ba:	b538      	push	{r3, r4, r5, lr}
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	d904      	bls.n	800a7cc <_raise_r+0x14>
 800a7c2:	2316      	movs	r3, #22
 800a7c4:	6003      	str	r3, [r0, #0]
 800a7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7ce:	b112      	cbz	r2, 800a7d6 <_raise_r+0x1e>
 800a7d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7d4:	b94b      	cbnz	r3, 800a7ea <_raise_r+0x32>
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 f830 	bl	800a83c <_getpid_r>
 800a7dc:	462a      	mov	r2, r5
 800a7de:	4601      	mov	r1, r0
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e6:	f000 b817 	b.w	800a818 <_kill_r>
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d00a      	beq.n	800a804 <_raise_r+0x4c>
 800a7ee:	1c59      	adds	r1, r3, #1
 800a7f0:	d103      	bne.n	800a7fa <_raise_r+0x42>
 800a7f2:	2316      	movs	r3, #22
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	e7e7      	b.n	800a7ca <_raise_r+0x12>
 800a7fa:	2400      	movs	r4, #0
 800a7fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a800:	4628      	mov	r0, r5
 800a802:	4798      	blx	r3
 800a804:	2000      	movs	r0, #0
 800a806:	e7e0      	b.n	800a7ca <_raise_r+0x12>

0800a808 <raise>:
 800a808:	4b02      	ldr	r3, [pc, #8]	; (800a814 <raise+0xc>)
 800a80a:	4601      	mov	r1, r0
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	f7ff bfd3 	b.w	800a7b8 <_raise_r>
 800a812:	bf00      	nop
 800a814:	20000054 	.word	0x20000054

0800a818 <_kill_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d07      	ldr	r5, [pc, #28]	; (800a838 <_kill_r+0x20>)
 800a81c:	2300      	movs	r3, #0
 800a81e:	4604      	mov	r4, r0
 800a820:	4608      	mov	r0, r1
 800a822:	4611      	mov	r1, r2
 800a824:	602b      	str	r3, [r5, #0]
 800a826:	f7f7 fccd 	bl	80021c4 <_kill>
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	d102      	bne.n	800a834 <_kill_r+0x1c>
 800a82e:	682b      	ldr	r3, [r5, #0]
 800a830:	b103      	cbz	r3, 800a834 <_kill_r+0x1c>
 800a832:	6023      	str	r3, [r4, #0]
 800a834:	bd38      	pop	{r3, r4, r5, pc}
 800a836:	bf00      	nop
 800a838:	20001944 	.word	0x20001944

0800a83c <_getpid_r>:
 800a83c:	f7f7 bcba 	b.w	80021b4 <_getpid>

0800a840 <__sread>:
 800a840:	b510      	push	{r4, lr}
 800a842:	460c      	mov	r4, r1
 800a844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a848:	f000 f894 	bl	800a974 <_read_r>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	bfab      	itete	ge
 800a850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a852:	89a3      	ldrhlt	r3, [r4, #12]
 800a854:	181b      	addge	r3, r3, r0
 800a856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a85a:	bfac      	ite	ge
 800a85c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a85e:	81a3      	strhlt	r3, [r4, #12]
 800a860:	bd10      	pop	{r4, pc}

0800a862 <__swrite>:
 800a862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a866:	461f      	mov	r7, r3
 800a868:	898b      	ldrh	r3, [r1, #12]
 800a86a:	05db      	lsls	r3, r3, #23
 800a86c:	4605      	mov	r5, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	4616      	mov	r6, r2
 800a872:	d505      	bpl.n	800a880 <__swrite+0x1e>
 800a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a878:	2302      	movs	r3, #2
 800a87a:	2200      	movs	r2, #0
 800a87c:	f000 f868 	bl	800a950 <_lseek_r>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	4628      	mov	r0, r5
 800a892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	f000 b817 	b.w	800a8c8 <_write_r>

0800a89a <__sseek>:
 800a89a:	b510      	push	{r4, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a2:	f000 f855 	bl	800a950 <_lseek_r>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	bf15      	itete	ne
 800a8ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8b6:	81a3      	strheq	r3, [r4, #12]
 800a8b8:	bf18      	it	ne
 800a8ba:	81a3      	strhne	r3, [r4, #12]
 800a8bc:	bd10      	pop	{r4, pc}

0800a8be <__sclose>:
 800a8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c2:	f000 b813 	b.w	800a8ec <_close_r>
	...

0800a8c8 <_write_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d07      	ldr	r5, [pc, #28]	; (800a8e8 <_write_r+0x20>)
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	602a      	str	r2, [r5, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f7f7 fcab 	bl	8002232 <_write>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d102      	bne.n	800a8e6 <_write_r+0x1e>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	b103      	cbz	r3, 800a8e6 <_write_r+0x1e>
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	20001944 	.word	0x20001944

0800a8ec <_close_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4d06      	ldr	r5, [pc, #24]	; (800a908 <_close_r+0x1c>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7f7 fcb7 	bl	800226a <_close>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d102      	bne.n	800a906 <_close_r+0x1a>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	b103      	cbz	r3, 800a906 <_close_r+0x1a>
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	20001944 	.word	0x20001944

0800a90c <_fstat_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	; (800a92c <_fstat_r+0x20>)
 800a910:	2300      	movs	r3, #0
 800a912:	4604      	mov	r4, r0
 800a914:	4608      	mov	r0, r1
 800a916:	4611      	mov	r1, r2
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	f7f7 fcb2 	bl	8002282 <_fstat>
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	d102      	bne.n	800a928 <_fstat_r+0x1c>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	b103      	cbz	r3, 800a928 <_fstat_r+0x1c>
 800a926:	6023      	str	r3, [r4, #0]
 800a928:	bd38      	pop	{r3, r4, r5, pc}
 800a92a:	bf00      	nop
 800a92c:	20001944 	.word	0x20001944

0800a930 <_isatty_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d06      	ldr	r5, [pc, #24]	; (800a94c <_isatty_r+0x1c>)
 800a934:	2300      	movs	r3, #0
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	f7f7 fcb1 	bl	80022a2 <_isatty>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_isatty_r+0x1a>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_isatty_r+0x1a>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20001944 	.word	0x20001944

0800a950 <_lseek_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d07      	ldr	r5, [pc, #28]	; (800a970 <_lseek_r+0x20>)
 800a954:	4604      	mov	r4, r0
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	2200      	movs	r2, #0
 800a95c:	602a      	str	r2, [r5, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	f7f7 fcaa 	bl	80022b8 <_lseek>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_lseek_r+0x1e>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_lseek_r+0x1e>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	20001944 	.word	0x20001944

0800a974 <_read_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4d07      	ldr	r5, [pc, #28]	; (800a994 <_read_r+0x20>)
 800a978:	4604      	mov	r4, r0
 800a97a:	4608      	mov	r0, r1
 800a97c:	4611      	mov	r1, r2
 800a97e:	2200      	movs	r2, #0
 800a980:	602a      	str	r2, [r5, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	f7f7 fc38 	bl	80021f8 <_read>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_read_r+0x1e>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_read_r+0x1e>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20001944 	.word	0x20001944

0800a998 <_init>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	bf00      	nop
 800a99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99e:	bc08      	pop	{r3}
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	4770      	bx	lr

0800a9a4 <_fini>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	bf00      	nop
 800a9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9aa:	bc08      	pop	{r3}
 800a9ac:	469e      	mov	lr, r3
 800a9ae:	4770      	bx	lr
