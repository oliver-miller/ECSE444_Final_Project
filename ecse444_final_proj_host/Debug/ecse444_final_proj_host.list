
ecse444_final_proj_host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b14  08005b14  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b1c  08005b1c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000a0  08005bc4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005bc4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001109b  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215d  00000000  00000000  0003116b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000341f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279d6  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010325  00000000  00000000  0005ca26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4310  00000000  00000000  0006cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016105b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a98  00000000  00000000  001610b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800564c 	.word	0x0800564c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800564c 	.word	0x0800564c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fe99 	bl	80012b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f85e 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f92c 	bl	80007e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000588:	f000 f8ac 	bl	80006e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800058c:	f000 f8f8 	bl	8000780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <main+0xa8>)
 8000598:	f001 f9e0 	bl	800195c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	4820      	ldr	r0, [pc, #128]	; (8000624 <main+0xac>)
 80005a2:	f001 f9db 	bl	800195c <HAL_GPIO_WritePin>

  waitForGameStart();
 80005a6:	f000 fa45 	bl	8000a34 <waitForGameStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  isRoundOver = 0;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0xb0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
	  currentDirective = rand() % NUMBER_OF_DIRECTIVES;
 80005b0:	f003 fe78 	bl	80042a4 <rand>
 80005b4:	4601      	mov	r1, r0
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <main+0xb4>)
 80005b8:	fb83 3201 	smull	r3, r2, r3, r1
 80005bc:	17cb      	asrs	r3, r1, #31
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	1aca      	subs	r2, r1, r3
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <main+0xb8>)
 80005ca:	601a      	str	r2, [r3, #0]

	  startNextRound(currentDirective);
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <main+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 facf 	bl	8000b74 <startNextRound>

	  while(!isRoundOver);
 80005d6:	bf00      	nop
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <main+0xb0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0fb      	beq.n	80005d8 <main+0x60>

	  decideWinner();
 80005e0:	f000 fb74 	bl	8000ccc <decideWinner>

	  HAL_Delay(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f000 fed8 	bl	800139c <HAL_Delay>

	  updateScoreboard();
 80005ec:	f000 fbec 	bl	8000dc8 <updateScoreboard>

	  HAL_Delay(1000);
 80005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f4:	f000 fed2 	bl	800139c <HAL_Delay>

	  sprintf(msg_buffer, "Setting up next round...\r\n");
 80005f8:	490e      	ldr	r1, [pc, #56]	; (8000634 <main+0xbc>)
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <main+0xc0>)
 80005fc:	f003 fe92 	bl	8004324 <siprintf>
	  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0xc0>)
 8000602:	f7ff fde5 	bl	80001d0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	490a      	ldr	r1, [pc, #40]	; (8000638 <main+0xc0>)
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <main+0xc4>)
 8000610:	f003 f990 	bl	8003934 <HAL_UART_Transmit>

	  HAL_Delay(5000);
 8000614:	f241 3088 	movw	r0, #5000	; 0x1388
 8000618:	f000 fec0 	bl	800139c <HAL_Delay>
	  isRoundOver = 0;
 800061c:	e7c5      	b.n	80005aa <main+0x32>
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400
 8000624:	48001000 	.word	0x48001000
 8000628:	200000bc 	.word	0x200000bc
 800062c:	55555556 	.word	0x55555556
 8000630:	200001a8 	.word	0x200001a8
 8000634:	08005664 	.word	0x08005664
 8000638:	200000dc 	.word	0x200000dc
 800063c:	200001ac 	.word	0x200001ac

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2244      	movs	r2, #68	; 0x44
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fe20 	bl	8004294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000666:	f001 f9d1 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000670:	f000 fbec 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000674:	2310      	movs	r3, #16
 8000676:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000680:	2360      	movs	r3, #96	; 0x60
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000688:	2301      	movs	r3, #1
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000690:	2328      	movs	r3, #40	; 0x28
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fa07 	bl	8001ab8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006b0:	f000 fbcc 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2303      	movs	r3, #3
 80006ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fdd9 	bl	8002284 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d8:	f000 fbb8 	bl	8000e4c <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3758      	adds	r7, #88	; 0x58
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM2_Init+0x98>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0x98>)
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM2_Init+0x98>)
 800072c:	f002 fc6c 	bl	8003008 <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000736:	f000 fb89 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM2_Init+0x98>)
 8000748:	f002 fdd4 	bl	80032f4 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 fb7b 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM2_Init+0x98>)
 8000764:	f002 fff2 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 fb6d 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000230 	.word	0x20000230

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART1_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 800078c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART1_UART_Init+0x58>)
 80007c4:	f003 f868 	bl	8003898 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 fb3d 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001ac 	.word	0x200001ac
 80007dc:	40013800 	.word	0x40013800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	4b56      	ldr	r3, [pc, #344]	; (8000950 <MX_GPIO_Init+0x170>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a55      	ldr	r2, [pc, #340]	; (8000950 <MX_GPIO_Init+0x170>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <MX_GPIO_Init+0x170>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <MX_GPIO_Init+0x170>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a4f      	ldr	r2, [pc, #316]	; (8000950 <MX_GPIO_Init+0x170>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <MX_GPIO_Init+0x170>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <MX_GPIO_Init+0x170>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a49      	ldr	r2, [pc, #292]	; (8000950 <MX_GPIO_Init+0x170>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_GPIO_Init+0x170>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_GPIO_Init+0x170>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a43      	ldr	r2, [pc, #268]	; (8000950 <MX_GPIO_Init+0x170>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_GPIO_Init+0x170>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	483e      	ldr	r0, [pc, #248]	; (8000954 <MX_GPIO_Init+0x174>)
 800085c:	f001 f87e 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|RESET_P1_Pin|RESET_P2_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8000866:	483c      	ldr	r0, [pc, #240]	; (8000958 <MX_GPIO_Init+0x178>)
 8000868:	f001 f878 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800086c:	2308      	movs	r3, #8
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4834      	ldr	r0, [pc, #208]	; (8000954 <MX_GPIO_Init+0x174>)
 8000884:	f000 fec0 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_GPIO_Init+0x17c>)
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4830      	ldr	r0, [pc, #192]	; (8000960 <MX_GPIO_Init+0x180>)
 800089e:	f000 feb3 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_IN_2_Pin MIC_IN_2_Pin ACC_IN_2_Pin BUTTON_IN_1_Pin
                           MIC_IN_1_Pin ACC_IN_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_IN_2_Pin|MIC_IN_2_Pin|ACC_IN_2_Pin|BUTTON_IN_1_Pin
 80008a2:	233f      	movs	r3, #63	; 0x3f
 80008a4:	617b      	str	r3, [r7, #20]
                          |MIC_IN_1_Pin|ACC_IN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_GPIO_Init+0x184>)
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x180>)
 80008b6:	f000 fea7 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin RESET_P1_Pin RESET_P2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|RESET_P1_Pin|RESET_P2_Pin;
 80008ba:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4821      	ldr	r0, [pc, #132]	; (8000958 <MX_GPIO_Init+0x178>)
 80008d4:	f000 fe98 	bl	8001608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2006      	movs	r0, #6
 80008de:	f000 fe5c 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008e2:	2006      	movs	r0, #6
 80008e4:	f000 fe75 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2007      	movs	r0, #7
 80008ee:	f000 fe54 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008f2:	2007      	movs	r0, #7
 80008f4:	f000 fe6d 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2008      	movs	r0, #8
 80008fe:	f000 fe4c 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000902:	2008      	movs	r0, #8
 8000904:	f000 fe65 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2009      	movs	r0, #9
 800090e:	f000 fe44 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000912:	2009      	movs	r0, #9
 8000914:	f000 fe5d 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	200a      	movs	r0, #10
 800091e:	f000 fe3c 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000922:	200a      	movs	r0, #10
 8000924:	f000 fe55 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	2017      	movs	r0, #23
 800092e:	f000 fe34 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000932:	2017      	movs	r0, #23
 8000934:	f000 fe4d 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f000 fe2c 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000942:	2028      	movs	r0, #40	; 0x28
 8000944:	f000 fe45 	bl	80015d2 <HAL_NVIC_EnableIRQ>

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	48001000 	.word	0x48001000
 8000958:	48000400 	.word	0x48000400
 800095c:	10110000 	.word	0x10110000
 8000960:	48000800 	.word	0x48000800
 8000964:	10310000 	.word	0x10310000

08000968 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	 * 		2 Player 1 - Say
	 * 		3 Player 2 - Press
	 * 		4 Player 2 - Twist
	 * 		5 Player 2 - Say
	 */
	isRoundOver = 1;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]

	if (GPIO_Pin == ACC_IN_1_Pin)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	2b20      	cmp	r3, #32
 800097c:	d107      	bne.n	800098e <HAL_GPIO_EXTI_Callback+0x26>
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	4828      	ldr	r0, [pc, #160]	; (8000a24 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000984:	f001 f802 	bl	800198c <HAL_GPIO_TogglePin>
		roundState = 1;
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_GPIO_EXTI_Callback+0xc0>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == ACC_IN_2_Pin)
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d106      	bne.n	80009a2 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000994:	2108      	movs	r1, #8
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000998:	f000 fff8 	bl	800198c <HAL_GPIO_TogglePin>
		roundState = 4;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_GPIO_EXTI_Callback+0xc0>)
 800099e:	2204      	movs	r2, #4
 80009a0:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == BUTTON_IN_1_Pin){
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d107      	bne.n	80009b8 <HAL_GPIO_EXTI_Callback+0x50>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ac:	481d      	ldr	r0, [pc, #116]	; (8000a24 <HAL_GPIO_EXTI_Callback+0xbc>)
 80009ae:	f000 ffed 	bl	800198c <HAL_GPIO_TogglePin>
		roundState = 0;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == BUTTON_IN_2_Pin){
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d106      	bne.n	80009cc <HAL_GPIO_EXTI_Callback+0x64>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80009be:	2108      	movs	r1, #8
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <HAL_GPIO_EXTI_Callback+0xc4>)
 80009c2:	f000 ffe3 	bl	800198c <HAL_GPIO_TogglePin>
		roundState = 3;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == MIC_IN_1_Pin){
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d107      	bne.n	80009e2 <HAL_GPIO_EXTI_Callback+0x7a>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d6:	4813      	ldr	r0, [pc, #76]	; (8000a24 <HAL_GPIO_EXTI_Callback+0xbc>)
 80009d8:	f000 ffd8 	bl	800198c <HAL_GPIO_TogglePin>
		roundState = 2;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009de:	2202      	movs	r2, #2
 80009e0:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == MIC_IN_2_Pin){
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d106      	bne.n	80009f6 <HAL_GPIO_EXTI_Callback+0x8e>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80009e8:	2108      	movs	r1, #8
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <HAL_GPIO_EXTI_Callback+0xc4>)
 80009ec:	f000 ffce 	bl	800198c <HAL_GPIO_TogglePin>
		roundState = 5;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009f2:	2205      	movs	r2, #5
 80009f4:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == Button_Pin){
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fc:	d102      	bne.n	8000a04 <HAL_GPIO_EXTI_Callback+0x9c>
		gameStart = 1;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
	}


	HAL_GPIO_TogglePin(RESET_P1_GPIO_Port, RESET_P1_Pin);
 8000a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a0a:	f000 ffbf 	bl	800198c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RESET_P2_GPIO_Port, RESET_P2_Pin);
 8000a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a14:	f000 ffba 	bl	800198c <HAL_GPIO_TogglePin>

//	HAL_Delay(1000);
//	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000bc 	.word	0x200000bc
 8000a24:	48000400 	.word	0x48000400
 8000a28:	200001a4 	.word	0x200001a4
 8000a2c:	48001000 	.word	0x48001000
 8000a30:	200000c0 	.word	0x200000c0

08000a34 <waitForGameStart>:

void waitForGameStart(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	sprintf(msg_buffer, "\n\n\n==================================================\r\n");
 8000a38:	4942      	ldr	r1, [pc, #264]	; (8000b44 <waitForGameStart+0x110>)
 8000a3a:	4843      	ldr	r0, [pc, #268]	; (8000b48 <waitForGameStart+0x114>)
 8000a3c:	f003 fc72 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000a40:	4841      	ldr	r0, [pc, #260]	; (8000b48 <waitForGameStart+0x114>)
 8000a42:	f7ff fbc5 	bl	80001d0 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	2364      	movs	r3, #100	; 0x64
 8000a4c:	493e      	ldr	r1, [pc, #248]	; (8000b48 <waitForGameStart+0x114>)
 8000a4e:	483f      	ldr	r0, [pc, #252]	; (8000b4c <waitForGameStart+0x118>)
 8000a50:	f002 ff70 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "WELCOME TO COMPETITIVE BOP IT\r\n");
 8000a54:	493e      	ldr	r1, [pc, #248]	; (8000b50 <waitForGameStart+0x11c>)
 8000a56:	483c      	ldr	r0, [pc, #240]	; (8000b48 <waitForGameStart+0x114>)
 8000a58:	f003 fc64 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000a5c:	483a      	ldr	r0, [pc, #232]	; (8000b48 <waitForGameStart+0x114>)
 8000a5e:	f7ff fbb7 	bl	80001d0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	2364      	movs	r3, #100	; 0x64
 8000a68:	4937      	ldr	r1, [pc, #220]	; (8000b48 <waitForGameStart+0x114>)
 8000a6a:	4838      	ldr	r0, [pc, #224]	; (8000b4c <waitForGameStart+0x118>)
 8000a6c:	f002 ff62 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "==================================================\r\n");
 8000a70:	4938      	ldr	r1, [pc, #224]	; (8000b54 <waitForGameStart+0x120>)
 8000a72:	4835      	ldr	r0, [pc, #212]	; (8000b48 <waitForGameStart+0x114>)
 8000a74:	f003 fc56 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000a78:	4833      	ldr	r0, [pc, #204]	; (8000b48 <waitForGameStart+0x114>)
 8000a7a:	f7ff fba9 	bl	80001d0 <strlen>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	4930      	ldr	r1, [pc, #192]	; (8000b48 <waitForGameStart+0x114>)
 8000a86:	4831      	ldr	r0, [pc, #196]	; (8000b4c <waitForGameStart+0x118>)
 8000a88:	f002 ff54 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "Here are the rules of the game:\r\n");
 8000a8c:	4932      	ldr	r1, [pc, #200]	; (8000b58 <waitForGameStart+0x124>)
 8000a8e:	482e      	ldr	r0, [pc, #184]	; (8000b48 <waitForGameStart+0x114>)
 8000a90:	f003 fc48 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <waitForGameStart+0x114>)
 8000a96:	f7ff fb9b 	bl	80001d0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	4929      	ldr	r1, [pc, #164]	; (8000b48 <waitForGameStart+0x114>)
 8000aa2:	482a      	ldr	r0, [pc, #168]	; (8000b4c <waitForGameStart+0x118>)
 8000aa4:	f002 ff46 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "\t1. When prompted, press the blue button on the host board to start the game.\r\n");
 8000aa8:	492c      	ldr	r1, [pc, #176]	; (8000b5c <waitForGameStart+0x128>)
 8000aaa:	4827      	ldr	r0, [pc, #156]	; (8000b48 <waitForGameStart+0x114>)
 8000aac:	f003 fc3a 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ab0:	4825      	ldr	r0, [pc, #148]	; (8000b48 <waitForGameStart+0x114>)
 8000ab2:	f7ff fb8d 	bl	80001d0 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	4922      	ldr	r1, [pc, #136]	; (8000b48 <waitForGameStart+0x114>)
 8000abe:	4823      	ldr	r0, [pc, #140]	; (8000b4c <waitForGameStart+0x118>)
 8000ac0:	f002 ff38 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "\t2. Perform the directives print to the screen as quickly as possible.\r\n");
 8000ac4:	4926      	ldr	r1, [pc, #152]	; (8000b60 <waitForGameStart+0x12c>)
 8000ac6:	4820      	ldr	r0, [pc, #128]	; (8000b48 <waitForGameStart+0x114>)
 8000ac8:	f003 fc2c 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000acc:	481e      	ldr	r0, [pc, #120]	; (8000b48 <waitForGameStart+0x114>)
 8000ace:	f7ff fb7f 	bl	80001d0 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	491b      	ldr	r1, [pc, #108]	; (8000b48 <waitForGameStart+0x114>)
 8000ada:	481c      	ldr	r0, [pc, #112]	; (8000b4c <waitForGameStart+0x118>)
 8000adc:	f002 ff2a 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "\t3. First person to complete the action wins the round.\r\n");
 8000ae0:	4920      	ldr	r1, [pc, #128]	; (8000b64 <waitForGameStart+0x130>)
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <waitForGameStart+0x114>)
 8000ae4:	f003 fc1e 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <waitForGameStart+0x114>)
 8000aea:	f7ff fb71 	bl	80001d0 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	4914      	ldr	r1, [pc, #80]	; (8000b48 <waitForGameStart+0x114>)
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <waitForGameStart+0x118>)
 8000af8:	f002 ff1c 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "\n\nPress button when you are ready to start...\r\n");
 8000afc:	491a      	ldr	r1, [pc, #104]	; (8000b68 <waitForGameStart+0x134>)
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <waitForGameStart+0x114>)
 8000b00:	f003 fc10 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <waitForGameStart+0x114>)
 8000b06:	f7ff fb63 	bl	80001d0 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	490d      	ldr	r1, [pc, #52]	; (8000b48 <waitForGameStart+0x114>)
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <waitForGameStart+0x118>)
 8000b14:	f002 ff0e 	bl	8003934 <HAL_UART_Transmit>

	while(!gameStart);
 8000b18:	bf00      	nop
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <waitForGameStart+0x138>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0fb      	beq.n	8000b1a <waitForGameStart+0xe6>

	sprintf(msg_buffer, "GAME STARTED! ENJOY!\r\n");
 8000b22:	4913      	ldr	r1, [pc, #76]	; (8000b70 <waitForGameStart+0x13c>)
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <waitForGameStart+0x114>)
 8000b26:	f003 fbfd 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <waitForGameStart+0x114>)
 8000b2c:	f7ff fb50 	bl	80001d0 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	4904      	ldr	r1, [pc, #16]	; (8000b48 <waitForGameStart+0x114>)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <waitForGameStart+0x118>)
 8000b3a:	f002 fefb 	bl	8003934 <HAL_UART_Transmit>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	08005680 	.word	0x08005680
 8000b48:	200000dc 	.word	0x200000dc
 8000b4c:	200001ac 	.word	0x200001ac
 8000b50:	080056b8 	.word	0x080056b8
 8000b54:	080056d8 	.word	0x080056d8
 8000b58:	08005710 	.word	0x08005710
 8000b5c:	08005734 	.word	0x08005734
 8000b60:	08005784 	.word	0x08005784
 8000b64:	080057d0 	.word	0x080057d0
 8000b68:	0800580c 	.word	0x0800580c
 8000b6c:	200000c0 	.word	0x200000c0
 8000b70:	0800583c 	.word	0x0800583c

08000b74 <startNextRound>:

void startNextRound(int dir) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	roundNumber ++;
 8000b7c:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <startNextRound+0x128>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a46      	ldr	r2, [pc, #280]	; (8000c9c <startNextRound+0x128>)
 8000b84:	6013      	str	r3, [r2, #0]

	sprintf(msg_buffer, "\n\n==================================================\r\n");
 8000b86:	4946      	ldr	r1, [pc, #280]	; (8000ca0 <startNextRound+0x12c>)
 8000b88:	4846      	ldr	r0, [pc, #280]	; (8000ca4 <startNextRound+0x130>)
 8000b8a:	f003 fbcb 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000b8e:	4845      	ldr	r0, [pc, #276]	; (8000ca4 <startNextRound+0x130>)
 8000b90:	f7ff fb1e 	bl	80001d0 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	4942      	ldr	r1, [pc, #264]	; (8000ca4 <startNextRound+0x130>)
 8000b9c:	4842      	ldr	r0, [pc, #264]	; (8000ca8 <startNextRound+0x134>)
 8000b9e:	f002 fec9 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "ROUND #%d\r\n", roundNumber);
 8000ba2:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <startNextRound+0x128>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4940      	ldr	r1, [pc, #256]	; (8000cac <startNextRound+0x138>)
 8000baa:	483e      	ldr	r0, [pc, #248]	; (8000ca4 <startNextRound+0x130>)
 8000bac:	f003 fbba 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000bb0:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <startNextRound+0x130>)
 8000bb2:	f7ff fb0d 	bl	80001d0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	4939      	ldr	r1, [pc, #228]	; (8000ca4 <startNextRound+0x130>)
 8000bbe:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <startNextRound+0x134>)
 8000bc0:	f002 feb8 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "==================================================\r\n");
 8000bc4:	493a      	ldr	r1, [pc, #232]	; (8000cb0 <startNextRound+0x13c>)
 8000bc6:	4837      	ldr	r0, [pc, #220]	; (8000ca4 <startNextRound+0x130>)
 8000bc8:	f003 fbac 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <startNextRound+0x130>)
 8000bce:	f7ff faff 	bl	80001d0 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	4932      	ldr	r1, [pc, #200]	; (8000ca4 <startNextRound+0x130>)
 8000bda:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <startNextRound+0x134>)
 8000bdc:	f002 feaa 	bl	8003934 <HAL_UART_Transmit>

	sprintf(msg_buffer, "The next round will begin in:\r\n");
 8000be0:	4934      	ldr	r1, [pc, #208]	; (8000cb4 <startNextRound+0x140>)
 8000be2:	4830      	ldr	r0, [pc, #192]	; (8000ca4 <startNextRound+0x130>)
 8000be4:	f003 fb9e 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000be8:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <startNextRound+0x130>)
 8000bea:	f7ff faf1 	bl	80001d0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	492b      	ldr	r1, [pc, #172]	; (8000ca4 <startNextRound+0x130>)
 8000bf6:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <startNextRound+0x134>)
 8000bf8:	f002 fe9c 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "3...\r\n");
 8000bfc:	492e      	ldr	r1, [pc, #184]	; (8000cb8 <startNextRound+0x144>)
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <startNextRound+0x130>)
 8000c00:	f003 fb90 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000c04:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <startNextRound+0x130>)
 8000c06:	f7ff fae3 	bl	80001d0 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	4924      	ldr	r1, [pc, #144]	; (8000ca4 <startNextRound+0x130>)
 8000c12:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <startNextRound+0x134>)
 8000c14:	f002 fe8e 	bl	8003934 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f000 fbbe 	bl	800139c <HAL_Delay>
	sprintf(msg_buffer, "2...\r\n");
 8000c20:	4926      	ldr	r1, [pc, #152]	; (8000cbc <startNextRound+0x148>)
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <startNextRound+0x130>)
 8000c24:	f003 fb7e 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000c28:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <startNextRound+0x130>)
 8000c2a:	f7ff fad1 	bl	80001d0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	491b      	ldr	r1, [pc, #108]	; (8000ca4 <startNextRound+0x130>)
 8000c36:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <startNextRound+0x134>)
 8000c38:	f002 fe7c 	bl	8003934 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c40:	f000 fbac 	bl	800139c <HAL_Delay>
	sprintf(msg_buffer, "1...\r\n");
 8000c44:	491e      	ldr	r1, [pc, #120]	; (8000cc0 <startNextRound+0x14c>)
 8000c46:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <startNextRound+0x130>)
 8000c48:	f003 fb6c 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <startNextRound+0x130>)
 8000c4e:	f7ff fabf 	bl	80001d0 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	4912      	ldr	r1, [pc, #72]	; (8000ca4 <startNextRound+0x130>)
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <startNextRound+0x134>)
 8000c5c:	f002 fe6a 	bl	8003934 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f000 fb9a 	bl	800139c <HAL_Delay>

	sprintf(msg_buffer, "%s\r\n", directives[dir]);
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <startNextRound+0x150>)
 8000c72:	4413      	add	r3, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <startNextRound+0x154>)
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <startNextRound+0x130>)
 8000c7a:	f003 fb53 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <startNextRound+0x130>)
 8000c80:	f7ff faa6 	bl	80001d0 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	4906      	ldr	r1, [pc, #24]	; (8000ca4 <startNextRound+0x130>)
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <startNextRound+0x134>)
 8000c8e:	f002 fe51 	bl	8003934 <HAL_UART_Transmit>

}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c4 	.word	0x200000c4
 8000ca0:	08005854 	.word	0x08005854
 8000ca4:	200000dc 	.word	0x200000dc
 8000ca8:	200001ac 	.word	0x200001ac
 8000cac:	0800588c 	.word	0x0800588c
 8000cb0:	080056d8 	.word	0x080056d8
 8000cb4:	08005898 	.word	0x08005898
 8000cb8:	080058b8 	.word	0x080058b8
 8000cbc:	080058c0 	.word	0x080058c0
 8000cc0:	080058c8 	.word	0x080058c8
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	080058d0 	.word	0x080058d0

08000ccc <decideWinner>:

void decideWinner(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	if(roundState % NUMBER_OF_DIRECTIVES == currentDirective) {
 8000cd0:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <decideWinner+0xd4>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <decideWinner+0xd8>)
 8000cd6:	fb83 3201 	smull	r3, r2, r3, r1
 8000cda:	17cb      	asrs	r3, r1, #31
 8000cdc:	1ad2      	subs	r2, r2, r3
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	1aca      	subs	r2, r1, r3
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <decideWinner+0xdc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d12b      	bne.n	8000d46 <decideWinner+0x7a>
		// Right input
		if(roundState < 3) {
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <decideWinner+0xd4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dc13      	bgt.n	8000d1e <decideWinner+0x52>
			// P1 wins point
			p1Score++;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <decideWinner+0xe0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <decideWinner+0xe0>)
 8000cfe:	6013      	str	r3, [r2, #0]

			sprintf(msg_buffer, "Player 1 has scored the point!\r\n");
 8000d00:	492b      	ldr	r1, [pc, #172]	; (8000db0 <decideWinner+0xe4>)
 8000d02:	482c      	ldr	r0, [pc, #176]	; (8000db4 <decideWinner+0xe8>)
 8000d04:	f003 fb0e 	bl	8004324 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d08:	482a      	ldr	r0, [pc, #168]	; (8000db4 <decideWinner+0xe8>)
 8000d0a:	f7ff fa61 	bl	80001d0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	4927      	ldr	r1, [pc, #156]	; (8000db4 <decideWinner+0xe8>)
 8000d16:	4828      	ldr	r0, [pc, #160]	; (8000db8 <decideWinner+0xec>)
 8000d18:	f002 fe0c 	bl	8003934 <HAL_UART_Transmit>

			sprintf(msg_buffer, "Player 1 has done the wrong action. -1 point.\r\n");
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
		}
	}
}
 8000d1c:	e03e      	b.n	8000d9c <decideWinner+0xd0>
			p2Score++;
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <decideWinner+0xf0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <decideWinner+0xf0>)
 8000d26:	6013      	str	r3, [r2, #0]
			sprintf(msg_buffer, "Player 2 has scored the point!\r\n");
 8000d28:	4925      	ldr	r1, [pc, #148]	; (8000dc0 <decideWinner+0xf4>)
 8000d2a:	4822      	ldr	r0, [pc, #136]	; (8000db4 <decideWinner+0xe8>)
 8000d2c:	f003 fafa 	bl	8004324 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d30:	4820      	ldr	r0, [pc, #128]	; (8000db4 <decideWinner+0xe8>)
 8000d32:	f7ff fa4d 	bl	80001d0 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	2364      	movs	r3, #100	; 0x64
 8000d3c:	491d      	ldr	r1, [pc, #116]	; (8000db4 <decideWinner+0xe8>)
 8000d3e:	481e      	ldr	r0, [pc, #120]	; (8000db8 <decideWinner+0xec>)
 8000d40:	f002 fdf8 	bl	8003934 <HAL_UART_Transmit>
}
 8000d44:	e02a      	b.n	8000d9c <decideWinner+0xd0>
		if(roundState < 3) {
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <decideWinner+0xd4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	dc13      	bgt.n	8000d76 <decideWinner+0xaa>
			p1Score--;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <decideWinner+0xe0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a15      	ldr	r2, [pc, #84]	; (8000dac <decideWinner+0xe0>)
 8000d56:	6013      	str	r3, [r2, #0]
			sprintf(msg_buffer, "Player 1 has done the wrong action. -1 point.\r\n");
 8000d58:	491a      	ldr	r1, [pc, #104]	; (8000dc4 <decideWinner+0xf8>)
 8000d5a:	4816      	ldr	r0, [pc, #88]	; (8000db4 <decideWinner+0xe8>)
 8000d5c:	f003 fae2 	bl	8004324 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d60:	4814      	ldr	r0, [pc, #80]	; (8000db4 <decideWinner+0xe8>)
 8000d62:	f7ff fa35 	bl	80001d0 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	4911      	ldr	r1, [pc, #68]	; (8000db4 <decideWinner+0xe8>)
 8000d6e:	4812      	ldr	r0, [pc, #72]	; (8000db8 <decideWinner+0xec>)
 8000d70:	f002 fde0 	bl	8003934 <HAL_UART_Transmit>
}
 8000d74:	e012      	b.n	8000d9c <decideWinner+0xd0>
			p2Score--;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <decideWinner+0xf0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <decideWinner+0xf0>)
 8000d7e:	6013      	str	r3, [r2, #0]
			sprintf(msg_buffer, "Player 1 has done the wrong action. -1 point.\r\n");
 8000d80:	4910      	ldr	r1, [pc, #64]	; (8000dc4 <decideWinner+0xf8>)
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <decideWinner+0xe8>)
 8000d84:	f003 face 	bl	8004324 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000d88:	480a      	ldr	r0, [pc, #40]	; (8000db4 <decideWinner+0xe8>)
 8000d8a:	f7ff fa21 	bl	80001d0 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	2364      	movs	r3, #100	; 0x64
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <decideWinner+0xe8>)
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <decideWinner+0xec>)
 8000d98:	f002 fdcc 	bl	8003934 <HAL_UART_Transmit>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001a4 	.word	0x200001a4
 8000da4:	55555556 	.word	0x55555556
 8000da8:	200001a8 	.word	0x200001a8
 8000dac:	200000c8 	.word	0x200000c8
 8000db0:	080058d8 	.word	0x080058d8
 8000db4:	200000dc 	.word	0x200000dc
 8000db8:	200001ac 	.word	0x200001ac
 8000dbc:	200000cc 	.word	0x200000cc
 8000dc0:	080058fc 	.word	0x080058fc
 8000dc4:	08005920 	.word	0x08005920

08000dc8 <updateScoreboard>:

void updateScoreboard(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	sprintf(msg_buffer, "Scoreboard:\r\n");
 8000dcc:	4918      	ldr	r1, [pc, #96]	; (8000e30 <updateScoreboard+0x68>)
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <updateScoreboard+0x6c>)
 8000dd0:	f003 faa8 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <updateScoreboard+0x6c>)
 8000dd6:	f7ff f9fb 	bl	80001d0 <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	2364      	movs	r3, #100	; 0x64
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <updateScoreboard+0x6c>)
 8000de2:	4815      	ldr	r0, [pc, #84]	; (8000e38 <updateScoreboard+0x70>)
 8000de4:	f002 fda6 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "\tPlayer 1: %d\r\n", p1Score);
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <updateScoreboard+0x74>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4914      	ldr	r1, [pc, #80]	; (8000e40 <updateScoreboard+0x78>)
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <updateScoreboard+0x6c>)
 8000df2:	f003 fa97 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000df6:	480f      	ldr	r0, [pc, #60]	; (8000e34 <updateScoreboard+0x6c>)
 8000df8:	f7ff f9ea 	bl	80001d0 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <updateScoreboard+0x6c>)
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <updateScoreboard+0x70>)
 8000e06:	f002 fd95 	bl	8003934 <HAL_UART_Transmit>
	sprintf(msg_buffer, "\tPlayer 2: %d\r\n", p2Score);
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <updateScoreboard+0x7c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	490d      	ldr	r1, [pc, #52]	; (8000e48 <updateScoreboard+0x80>)
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <updateScoreboard+0x6c>)
 8000e14:	f003 fa86 	bl	8004324 <siprintf>
	HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *) msg_buffer), TIMEOUT);
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <updateScoreboard+0x6c>)
 8000e1a:	f7ff f9d9 	bl	80001d0 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	4903      	ldr	r1, [pc, #12]	; (8000e34 <updateScoreboard+0x6c>)
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <updateScoreboard+0x70>)
 8000e28:	f002 fd84 	bl	8003934 <HAL_UART_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08005950 	.word	0x08005950
 8000e34:	200000dc 	.word	0x200000dc
 8000e38:	200001ac 	.word	0x200001ac
 8000e3c:	200000c8 	.word	0x200000c8
 8000e40:	08005960 	.word	0x08005960
 8000e44:	200000cc 	.word	0x200000cc
 8000e48:	08005970 	.word	0x08005970

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x44>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x44>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d113      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 fb63 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed4:	201c      	movs	r0, #28
 8000ed6:	f000 fb7c 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ac      	sub	sp, #176	; 0xb0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2288      	movs	r2, #136	; 0x88
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 f9c3 	bl	8004294 <memset>
  if(huart->Instance==USART1)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <HAL_UART_MspInit+0xb0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d13a      	bne.n	8000f8e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fbb3 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f30:	f7ff ff8c 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f8a:	f000 fb3d 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	37b0      	adds	r7, #176	; 0xb0
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f9b4 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fcdf 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}

08001006 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800100a:	2002      	movs	r0, #2
 800100c:	f000 fcd8 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001018:	2004      	movs	r0, #4
 800101a:	f000 fcd1 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001026:	2008      	movs	r0, #8
 8001028:	f000 fcca 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001034:	2010      	movs	r0, #16
 8001036:	f000 fcc3 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001042:	2020      	movs	r0, #32
 8001044:	f000 fcbc 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f002 f830 	bl	80030b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000230 	.word	0x20000230

08001060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001064:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001068:	f000 fcaa 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	return 1;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_kill>:

int _kill(int pid, int sig)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800108a:	f003 f8d9 	bl	8004240 <__errno>
 800108e:	4603      	mov	r3, r0
 8001090:	2216      	movs	r2, #22
 8001092:	601a      	str	r2, [r3, #0]
	return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_exit>:

void _exit (int status)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffe7 	bl	8001080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010b2:	e7fe      	b.n	80010b2 <_exit+0x12>

080010b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00a      	b.n	80010dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010c6:	f3af 8000 	nop.w
 80010ca:	4601      	mov	r1, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf0      	blt.n	80010c6 <_read+0x12>
	}

return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e009      	b.n	8001114 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf1      	blt.n	8001100 <_write+0x12>
	}
	return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	605a      	str	r2, [r3, #4]
	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f003 f83e 	bl	8004240 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20018000 	.word	0x20018000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	200000d0 	.word	0x200000d0
 80011f8:	20000290 	.word	0x20000290

080011fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <SystemInit+0x5c>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <SystemInit+0x5c>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <SystemInit+0x60>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <SystemInit+0x60>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <SystemInit+0x60>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <SystemInit+0x60>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0d      	ldr	r2, [pc, #52]	; (800125c <SystemInit+0x60>)
 8001228:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800122c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001230:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SystemInit+0x60>)
 8001234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001238:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <SystemInit+0x60>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <SystemInit+0x60>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <SystemInit+0x60>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00
 800125c:	40021000 	.word	0x40021000

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff ffca 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001268:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800126a:	e003      	b.n	8001274 <LoopCopyDataInit>

0800126c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800126e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001270:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001272:	3104      	adds	r1, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001278:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800127a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800127c:	d3f6      	bcc.n	800126c <CopyDataInit>
	ldr	r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001280:	e002      	b.n	8001288 <LoopFillZerobss>

08001282 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001282:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001284:	f842 3b04 	str.w	r3, [r2], #4

08001288 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LoopForever+0x16>)
	cmp	r2, r3
 800128a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800128c:	d3f9      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f002 ffdd 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff f971 	bl	8000578 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800129c:	08005b24 	.word	0x08005b24
	ldr	r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012a4:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 80012a8:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 80012ac:	20000290 	.word	0x20000290

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>

080012b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f961 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f80e 	bl	80012e4 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e001      	b.n	80012d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d4:	f7ff fdc0 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_InitTick+0x6c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d023      	beq.n	8001340 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_InitTick+0x70>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_InitTick+0x6c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f96d 	bl	80015ee <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d809      	bhi.n	8001334 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f937 	bl	800159a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_InitTick+0x74>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e007      	b.n	8001344 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e004      	b.n	8001344 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e001      	b.n	8001344 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000038 	.word	0x20000038
 8001354:	20000030 	.word	0x20000030
 8001358:	20000034 	.word	0x20000034

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000038 	.word	0x20000038
 8001380:	2000027c 	.word	0x2000027c

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000027c 	.word	0x2000027c

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff ffee 	bl	8001384 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffde 	bl	8001384 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000038 	.word	0x20000038

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e17f      	b.n	8001918 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8171 	beq.w	8001912 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d00b      	beq.n	8001650 <HAL_GPIO_Init+0x48>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001644:	2b11      	cmp	r3, #17
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b12      	cmp	r3, #18
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001686:	2201      	movs	r2, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d118      	bne.n	80016f0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x128>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80ac 	beq.w	8001912 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6613      	str	r3, [r2, #96]	; 0x60
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d2:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_GPIO_Init+0x334>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x242>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x338>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x23e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x33c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x23a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x340>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x236>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x344>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x232>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x348>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x22e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x34c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x22a>
 800182e:	2306      	movs	r3, #6
 8001830:	e00c      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001832:	2307      	movs	r3, #7
 8001834:	e00a      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x244>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x244>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x244>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185c:	4937      	ldr	r1, [pc, #220]	; (800193c <HAL_GPIO_Init+0x334>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x350>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_GPIO_Init+0x350>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_GPIO_Init+0x350>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x350>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae78 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800
 8001948:	48000c00 	.word	0x48000c00
 800194c:	48001000 	.word	0x48001000
 8001950:	48001400 	.word	0x48001400
 8001954:	48001800 	.word	0x48001800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43d9      	mvns	r1, r3
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe ffc2 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000030 	.word	0x20000030
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3d4      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80e4 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4a>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	f040 808b 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8087 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b02:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x62>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e3ac      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_RCC_OscConfig+0x7c>
 8001b2a:	4b89      	ldr	r3, [pc, #548]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b32:	e005      	b.n	8001b40 <HAL_RCC_OscConfig+0x88>
 8001b34:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d223      	bcs.n	8001b8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd41 	bl	80025d0 <RCC_SetFlashLatencyFromMSIRange>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e38d      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b58:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4977      	ldr	r1, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4972      	ldr	r1, [pc, #456]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e025      	b.n	8001bd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	496a      	ldr	r1, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001baa:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4965      	ldr	r1, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fd01 	bl	80025d0 <RCC_SetFlashLatencyFromMSIRange>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e34d      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd8:	f000 fc36 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	495a      	ldr	r1, [pc, #360]	; (8001d54 <HAL_RCC_OscConfig+0x29c>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x2a0>)
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_RCC_OscConfig+0x2a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb71 	bl	80012e4 <HAL_InitTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d052      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	e331      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fbae 	bl	8001384 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fbaa 	bl	8001384 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e31a      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a40      	ldr	r2, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	493b      	ldr	r1, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e01a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb7b 	bl	8001384 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c92:	f7ff fb77 	bl	8001384 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2e7      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1da>
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d074      	beq.n	8001daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d10e      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d064      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d160      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e2c4      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x24a>
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e01d      	b.n	8001d3e <HAL_RCC_OscConfig+0x286>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x26e>
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e00b      	b.n	8001d3e <HAL_RCC_OscConfig+0x286>
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb1d 	bl	8001384 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4c:	e011      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08005980 	.word	0x08005980
 8001d58:	20000030 	.word	0x20000030
 8001d5c:	20000034 	.word	0x20000034
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fb10 	bl	8001384 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e280      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d72:	4baf      	ldr	r3, [pc, #700]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2a8>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fb00 	bl	8001384 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fafc 	bl	8001384 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e26c      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	4ba5      	ldr	r3, [pc, #660]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2d0>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d060      	beq.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x310>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d116      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	4b99      	ldr	r3, [pc, #612]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x328>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e249      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b93      	ldr	r3, [pc, #588]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4990      	ldr	r1, [pc, #576]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	e040      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d023      	beq.n	8001e46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfe:	4b8c      	ldr	r3, [pc, #560]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8b      	ldr	r2, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fabb 	bl	8001384 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fab7 	bl	8001384 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e227      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	497c      	ldr	r1, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fa97 	bl	8001384 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fa93 	bl	8001384 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e203      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03c      	beq.n	8001efe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	4a67      	ldr	r2, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fa72 	bl	8001384 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fa6e 	bl	8001384 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1de      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3ec>
 8001ec4:	e01b      	b.n	8001efe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fa55 	bl	8001384 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff fa51 	bl	8001384 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1c1      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ef      	bne.n	8001ede <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a6 	beq.w	8002058 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f10:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a43      	ldr	r2, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f38:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa18 	bl	8001384 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7ff fa14 	bl	8001384 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e184      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4d8>
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8e:	e024      	b.n	8001fda <HAL_RCC_OscConfig+0x522>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d110      	bne.n	8001fba <HAL_RCC_OscConfig+0x502>
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a24      	ldr	r2, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb8:	e00f      	b.n	8001fda <HAL_RCC_OscConfig+0x522>
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f9cf 	bl	8001384 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f9cb 	bl	8001384 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e139      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0ed      	beq.n	8001fea <HAL_RCC_OscConfig+0x532>
 800200e:	e01a      	b.n	8002046 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff f9b8 	bl	8001384 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002016:	e00f      	b.n	8002038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002018:	f7ff f9b4 	bl	8001384 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d906      	bls.n	8002038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e122      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	4b90      	ldr	r3, [pc, #576]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e8      	bne.n	8002018 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b8b      	ldr	r3, [pc, #556]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a8a      	ldr	r2, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8108 	beq.w	8002272 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80d0 	bne.w	800220c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800206c:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	429a      	cmp	r2, r3
 800207e:	d130      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	3b01      	subs	r3, #1
 800208c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d127      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ac:	2a07      	cmp	r2, #7
 80020ae:	bf14      	ite	ne
 80020b0:	2201      	movne	r2, #1
 80020b2:	2200      	moveq	r2, #0
 80020b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d06e      	beq.n	80021c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d069      	beq.n	80021bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e8:	4b64      	ldr	r3, [pc, #400]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f4:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b7      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5c      	ldr	r2, [pc, #368]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800210a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f938 	bl	8001384 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f934 	bl	8001384 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e0a4      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	4b54      	ldr	r3, [pc, #336]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_RCC_OscConfig+0x7c8>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002146:	3a01      	subs	r2, #1
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002150:	0212      	lsls	r2, r2, #8
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002158:	0852      	lsrs	r2, r2, #1
 800215a:	3a01      	subs	r2, #1
 800215c:	0552      	lsls	r2, r2, #21
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
 8002168:	0652      	lsls	r2, r2, #25
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002170:	0912      	lsrs	r2, r2, #4
 8002172:	0452      	lsls	r2, r2, #17
 8002174:	430a      	orrs	r2, r1
 8002176:	4941      	ldr	r1, [pc, #260]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3e      	ldr	r2, [pc, #248]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a3b      	ldr	r2, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002194:	f7ff f8f6 	bl	8001384 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f8f2 	bl	8001384 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e062      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ba:	e05a      	b.n	8002272 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e059      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c0:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d152      	bne.n	8002272 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2a      	ldr	r2, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e4:	f7ff f8ce 	bl	8001384 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f8ca 	bl	8001384 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e03a      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	4b1f      	ldr	r3, [pc, #124]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x734>
 800220a:	e032      	b.n	8002272 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d02d      	beq.n	800226e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002230:	f023 0303 	bic.w	r3, r3, #3
 8002234:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800223c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7ff f89d 	bl	8001384 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff f899 	bl	8001384 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e009      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x796>
 800226c:	e001      	b.n	8002272 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	f99d808c 	.word	0xf99d808c

08002284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0c8      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d910      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4961      	ldr	r1, [pc, #388]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b0      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d04c      	beq.n	800236e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	4b56      	ldr	r3, [pc, #344]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d121      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e09e      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d115      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e092      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e086      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e07e      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 0203 	bic.w	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	493f      	ldr	r1, [pc, #252]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233e:	f7ff f821 	bl	8001384 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e00a      	b.n	800235c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7ff f81d 	bl	8001384 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e066      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 020c 	and.w	r2, r3, #12
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	429a      	cmp	r2, r3
 800236c:	d1eb      	bne.n	8002346 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	492c      	ldr	r1, [pc, #176]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d210      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4924      	ldr	r1, [pc, #144]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e036      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4910      	ldr	r1, [pc, #64]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fa:	f000 f825 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490c      	ldr	r1, [pc, #48]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe ff60 	bl	80012e4 <HAL_InitTick>
 8002424:	4603      	mov	r3, r0
 8002426:	72fb      	strb	r3, [r7, #11]

  return status;
 8002428:	7afb      	ldrb	r3, [r7, #11]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	08005980 	.word	0x08005980
 8002440:	20000030 	.word	0x20000030
 8002444:	20000034 	.word	0x20000034

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d121      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11e      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d134      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0xa6>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xac>
 80024ec:	e005      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	3301      	adds	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fb02 f203 	mul.w	r2, r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0e5b      	lsrs	r3, r3, #25
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3301      	adds	r3, #1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	08005998 	.word	0x08005998
 8002558:	00f42400 	.word	0x00f42400
 800255c:	007a1200 	.word	0x007a1200

08002560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_GetHCLKFreq+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000030 	.word	0x20000030

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800257c:	f7ff fff0 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08005990 	.word	0x08005990

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a8:	f7ff ffda 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0adb      	lsrs	r3, r3, #11
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4904      	ldr	r1, [pc, #16]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08005990 	.word	0x08005990

080025d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e8:	f7ff fa02 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 80025ec:	6178      	str	r0, [r7, #20]
 80025ee:	e014      	b.n	800261a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a24      	ldr	r2, [pc, #144]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002608:	f7ff f9f2 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 800260c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002620:	d10b      	bne.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d919      	bls.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2ba0      	cmp	r3, #160	; 0xa0
 800262c:	d902      	bls.n	8002634 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262e:	2302      	movs	r3, #2
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e013      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e010      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d902      	bls.n	8002646 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002640:	2303      	movs	r3, #3
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e00a      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d102      	bne.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800264c:	2302      	movs	r3, #2
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e004      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d101      	bne.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 0207 	bic.w	r2, r3, #7
 8002664:	4909      	ldr	r1, [pc, #36]	; (800268c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d001      	beq.n	800267e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002698:	2300      	movs	r3, #0
 800269a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800269c:	2300      	movs	r3, #0
 800269e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d041      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b4:	d02a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ba:	d824      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c6:	d81e      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d0:	d010      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026d2:	e018      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d4:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a85      	ldr	r2, [pc, #532]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e0:	e015      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fabb 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3320      	adds	r3, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fba6 	bl	8002e4c <RCCEx_PLLSAI2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	74fb      	strb	r3, [r7, #19]
      break;
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002714:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002722:	4973      	ldr	r1, [pc, #460]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d041      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002740:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002744:	d02a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800274a:	d824      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800274c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002756:	d81e      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d010      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002762:	e018      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002764:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002770:	e015      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fa73 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002782:	e00c      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3320      	adds	r3, #32
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fb5e 	bl	8002e4c <RCCEx_PLLSAI2_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	74fb      	strb	r3, [r7, #19]
      break;
 800279a:	e000      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800279c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a4:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b2:	494f      	ldr	r1, [pc, #316]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ba:	e001      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a0 	beq.w	800290e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3a      	ldr	r2, [pc, #232]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002810:	f7fe fdb8 	bl	8001384 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002816:	e009      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fe fdb4 	bl	8001384 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d902      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	74fb      	strb	r3, [r7, #19]
        break;
 800282a:	e005      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ef      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d15c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01f      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d019      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fd73 	bl	8001384 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	e00b      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fd6f 	bl	8001384 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d902      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	74fb      	strb	r3, [r7, #19]
            break;
 80028b8:	e006      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ec      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028de:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
 80028ec:	e006      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fc:	7c7b      	ldrb	r3, [r7, #17]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a9d      	ldr	r2, [pc, #628]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	4994      	ldr	r1, [pc, #592]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293c:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 020c 	bic.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	498c      	ldr	r1, [pc, #560]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295e:	4b87      	ldr	r3, [pc, #540]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4983      	ldr	r1, [pc, #524]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	497b      	ldr	r1, [pc, #492]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	4972      	ldr	r1, [pc, #456]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c4:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	496a      	ldr	r1, [pc, #424]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	4961      	ldr	r1, [pc, #388]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a08:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	4959      	ldr	r1, [pc, #356]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	4950      	ldr	r1, [pc, #320]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	4948      	ldr	r1, [pc, #288]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	493f      	ldr	r1, [pc, #252]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d028      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	4937      	ldr	r1, [pc, #220]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aae:	d106      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
 8002abc:	e011      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8c8 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d028      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	491f      	ldr	r1, [pc, #124]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0c:	d106      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b18:	60d3      	str	r3, [r2, #12]
 8002b1a:	e011      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f899 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e014      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f867 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02f      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbe:	4928      	ldr	r1, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bce:	d10d      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f844 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	74bb      	strb	r3, [r7, #18]
 8002bea:	e011      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f925 	bl	8002e4c <RCCEx_PLLSAI2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2a:	490d      	ldr	r1, [pc, #52]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c56:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000

08002c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c7e:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0203 	and.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
       ||
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c96:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d047      	beq.n	8002d3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e044      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d018      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x86>
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d825      	bhi.n	8002d08 <RCCEx_PLLSAI1_Config+0xa4>
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d002      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0x62>
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d009      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x74>
 8002cc4:	e020      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc6:	4b60      	ldr	r3, [pc, #384]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11d      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e01a      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d116      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce8:	e013      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d06:	e006      	b.n	8002d16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e004      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e002      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	430b      	orrs	r3, r1
 8002d34:	4944      	ldr	r1, [pc, #272]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d17d      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d40:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fb1a 	bl	8001384 <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d52:	e009      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d54:	f7fe fb16 	bl	8001384 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d902      	bls.n	8002d68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	73fb      	strb	r3, [r7, #15]
        break;
 8002d66:	e005      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ef      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d160      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6892      	ldr	r2, [r2, #8]
 8002d90:	0211      	lsls	r1, r2, #8
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	0912      	lsrs	r2, r2, #4
 8002d98:	0452      	lsls	r2, r2, #17
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	492a      	ldr	r1, [pc, #168]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	610b      	str	r3, [r1, #16]
 8002da2:	e027      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d112      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002db2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	0211      	lsls	r1, r2, #8
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6912      	ldr	r2, [r2, #16]
 8002dc0:	0852      	lsrs	r2, r2, #1
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	0552      	lsls	r2, r2, #21
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	491f      	ldr	r1, [pc, #124]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	610b      	str	r3, [r1, #16]
 8002dce:	e011      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6892      	ldr	r2, [r2, #8]
 8002de0:	0211      	lsls	r1, r2, #8
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6952      	ldr	r2, [r2, #20]
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0652      	lsls	r2, r2, #25
 8002dec:	430a      	orrs	r2, r1
 8002dee:	4916      	ldr	r1, [pc, #88]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fac0 	bl	8001384 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e06:	e009      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e08:	f7fe fabc 	bl	8001384 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	73fb      	strb	r3, [r7, #15]
          break;
 8002e1a:	e005      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4904      	ldr	r1, [pc, #16]	; (8002e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000

08002e4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d018      	beq.n	8002e98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10d      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
       ||
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e7e:	4b61      	ldr	r3, [pc, #388]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d047      	beq.n	8002f22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e044      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d018      	beq.n	8002ed2 <RCCEx_PLLSAI2_Config+0x86>
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d825      	bhi.n	8002ef0 <RCCEx_PLLSAI2_Config+0xa4>
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <RCCEx_PLLSAI2_Config+0x62>
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d009      	beq.n	8002ec0 <RCCEx_PLLSAI2_Config+0x74>
 8002eac:	e020      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eae:	4b55      	ldr	r3, [pc, #340]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11d      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ebe:	e01a      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d116      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e013      	b.n	8002efa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eee:	e006      	b.n	8002efe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	e004      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e002      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	4939      	ldr	r1, [pc, #228]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d167      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f28:	4b36      	ldr	r3, [pc, #216]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a35      	ldr	r2, [pc, #212]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe fa26 	bl	8001384 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f3c:	f7fe fa22 	bl	8001384 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4e:	e005      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ef      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d14a      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f68:	4b26      	ldr	r3, [pc, #152]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	0211      	lsls	r1, r2, #8
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	0912      	lsrs	r2, r2, #4
 8002f80:	0452      	lsls	r2, r2, #17
 8002f82:	430a      	orrs	r2, r1
 8002f84:	491f      	ldr	r1, [pc, #124]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	614b      	str	r3, [r1, #20]
 8002f8a:	e011      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	0211      	lsls	r1, r2, #8
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0652      	lsls	r2, r2, #25
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	4916      	ldr	r1, [pc, #88]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe f9e2 	bl	8001384 <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc2:	e009      	b.n	8002fd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fc4:	f7fe f9de 	bl	8001384 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d902      	bls.n	8002fd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd6:	e005      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ef      	beq.n	8002fc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e049      	b.n	80030ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd ff36 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 fa4c 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d122      	bne.n	8003112 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d11b      	bne.n	8003112 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0202 	mvn.w	r2, #2
 80030e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f9d5 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 80030fe:	e005      	b.n	800310c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f9c7 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f9d8 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b04      	cmp	r3, #4
 800311e:	d122      	bne.n	8003166 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d11b      	bne.n	8003166 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0204 	mvn.w	r2, #4
 8003136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f9ab 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 8003152:	e005      	b.n	8003160 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f99d 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f9ae 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d122      	bne.n	80031ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d11b      	bne.n	80031ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0208 	mvn.w	r2, #8
 800318a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f981 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 80031a6:	e005      	b.n	80031b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f973 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f984 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d122      	bne.n	800320e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d11b      	bne.n	800320e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0210 	mvn.w	r2, #16
 80031de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2208      	movs	r2, #8
 80031e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f957 	bl	80034a8 <HAL_TIM_IC_CaptureCallback>
 80031fa:	e005      	b.n	8003208 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f949 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f95a 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10e      	bne.n	800323a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0201 	mvn.w	r2, #1
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f923 	bl	8003480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d10e      	bne.n	8003266 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d107      	bne.n	8003266 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb05 	bl	8003870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 faf8 	bl	8003884 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f908 	bl	80034d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0220 	mvn.w	r2, #32
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fab8 	bl	800385c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIM_ConfigClockSource+0x18>
 8003308:	2302      	movs	r3, #2
 800330a:	e0b5      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800332e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003336:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003348:	d03e      	beq.n	80033c8 <HAL_TIM_ConfigClockSource+0xd4>
 800334a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334e:	f200 8087 	bhi.w	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	f000 8085 	beq.w	8003464 <HAL_TIM_ConfigClockSource+0x170>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d87f      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b70      	cmp	r3, #112	; 0x70
 8003362:	d01a      	beq.n	800339a <HAL_TIM_ConfigClockSource+0xa6>
 8003364:	2b70      	cmp	r3, #112	; 0x70
 8003366:	d87b      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b60      	cmp	r3, #96	; 0x60
 800336a:	d050      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x11a>
 800336c:	2b60      	cmp	r3, #96	; 0x60
 800336e:	d877      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b50      	cmp	r3, #80	; 0x50
 8003372:	d03c      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0xfa>
 8003374:	2b50      	cmp	r3, #80	; 0x50
 8003376:	d873      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d058      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x13a>
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d86f      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b30      	cmp	r3, #48	; 0x30
 8003382:	d064      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d86b      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b20      	cmp	r3, #32
 800338a:	d060      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d867      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05c      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	2b10      	cmp	r3, #16
 8003396:	d05a      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003398:	e062      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6899      	ldr	r1, [r3, #8]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f000 f9af 	bl	800370c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	609a      	str	r2, [r3, #8]
      break;
 80033c6:	e04e      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f000 f998 	bl	800370c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ea:	609a      	str	r2, [r3, #8]
      break;
 80033ec:	e03b      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 f90c 	bl	8003618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2150      	movs	r1, #80	; 0x50
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f965 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 800340c:	e02b      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 f92b 	bl	8003676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2160      	movs	r1, #96	; 0x60
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f955 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 800342c:	e01b      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	461a      	mov	r2, r3
 800343c:	f000 f8ec 	bl	8003618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f945 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 800344c:	e00b      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f000 f93c 	bl	80036d6 <TIM_ITRx_SetConfig>
        break;
 800345e:	e002      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003464:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d00f      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <TIM_Base_SetConfig+0x118>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00b      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <TIM_Base_SetConfig+0x11c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <TIM_Base_SetConfig+0x120>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3a      	ldr	r2, [pc, #232]	; (8003608 <TIM_Base_SetConfig+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d108      	bne.n	8003536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2f      	ldr	r2, [pc, #188]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d01b      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <TIM_Base_SetConfig+0x118>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d017      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <TIM_Base_SetConfig+0x11c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <TIM_Base_SetConfig+0x120>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00f      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a29      	ldr	r2, [pc, #164]	; (8003608 <TIM_Base_SetConfig+0x124>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00b      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a28      	ldr	r2, [pc, #160]	; (800360c <TIM_Base_SetConfig+0x128>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <TIM_Base_SetConfig+0x12c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <TIM_Base_SetConfig+0x130>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00f      	beq.n	80035dc <TIM_Base_SetConfig+0xf8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <TIM_Base_SetConfig+0x124>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00b      	beq.n	80035dc <TIM_Base_SetConfig+0xf8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <TIM_Base_SetConfig+0x128>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <TIM_Base_SetConfig+0x12c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_Base_SetConfig+0xf8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <TIM_Base_SetConfig+0x130>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40013400 	.word	0x40013400
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800

08003618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 030a 	bic.w	r3, r3, #10
 8003654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003676:	b480      	push	{r7}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	031b      	lsls	r3, r3, #12
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f043 0307 	orr.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	431a      	orrs	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e068      	b.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d108      	bne.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800379e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d018      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10c      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40013400 	.word	0x40013400
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40014000 	.word	0x40014000

0800385c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e040      	b.n	800392c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fb14 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8c0 	bl	8003a5c <UART_SetConfig>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e022      	b.n	800392c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fb3e 	bl	8003f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fbc5 	bl	80040b4 <UART_CheckIdleState>
 800392a:	4603      	mov	r3, r0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003948:	2b20      	cmp	r3, #32
 800394a:	f040 8082 	bne.w	8003a52 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_Transmit+0x26>
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e07a      	b.n	8003a54 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_UART_Transmit+0x38>
 8003968:	2302      	movs	r3, #2
 800396a:	e073      	b.n	8003a54 <HAL_UART_Transmit+0x120>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2221      	movs	r2, #33	; 0x21
 8003980:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003982:	f7fd fcff 	bl	8001384 <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d108      	bne.n	80039b4 <HAL_UART_Transmit+0x80>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e003      	b.n	80039bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039c4:	e02d      	b.n	8003a22 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fbb8 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e039      	b.n	8003a54 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f2:	b292      	uxth	r2, r2
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e008      	b.n	8003a10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b292      	uxth	r2, r2
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1cb      	bne.n	80039c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fb84 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e005      	b.n	8003a54 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	b5b0      	push	{r4, r5, r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4bad      	ldr	r3, [pc, #692]	; (8003d3c <UART_SetConfig+0x2e0>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	69f9      	ldr	r1, [r7, #28]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4aa2      	ldr	r2, [pc, #648]	; (8003d40 <UART_SetConfig+0x2e4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a99      	ldr	r2, [pc, #612]	; (8003d44 <UART_SetConfig+0x2e8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d121      	bne.n	8003b26 <UART_SetConfig+0xca>
 8003ae2:	4b99      	ldr	r3, [pc, #612]	; (8003d48 <UART_SetConfig+0x2ec>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d817      	bhi.n	8003b20 <UART_SetConfig+0xc4>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x9c>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b09 	.word	0x08003b09
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b0f 	.word	0x08003b0f
 8003b04:	08003b1b 	.word	0x08003b1b
 8003b08:	2301      	movs	r3, #1
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e0e7      	b.n	8003cde <UART_SetConfig+0x282>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	76fb      	strb	r3, [r7, #27]
 8003b12:	e0e4      	b.n	8003cde <UART_SetConfig+0x282>
 8003b14:	2304      	movs	r3, #4
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	e0e1      	b.n	8003cde <UART_SetConfig+0x282>
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	76fb      	strb	r3, [r7, #27]
 8003b1e:	e0de      	b.n	8003cde <UART_SetConfig+0x282>
 8003b20:	2310      	movs	r3, #16
 8003b22:	76fb      	strb	r3, [r7, #27]
 8003b24:	e0db      	b.n	8003cde <UART_SetConfig+0x282>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a88      	ldr	r2, [pc, #544]	; (8003d4c <UART_SetConfig+0x2f0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d132      	bne.n	8003b96 <UART_SetConfig+0x13a>
 8003b30:	4b85      	ldr	r3, [pc, #532]	; (8003d48 <UART_SetConfig+0x2ec>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d828      	bhi.n	8003b90 <UART_SetConfig+0x134>
 8003b3e:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0xe8>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003b91 	.word	0x08003b91
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003b91 	.word	0x08003b91
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003b91 	.word	0x08003b91
 8003b64:	08003b7f 	.word	0x08003b7f
 8003b68:	08003b91 	.word	0x08003b91
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003b91 	.word	0x08003b91
 8003b74:	08003b8b 	.word	0x08003b8b
 8003b78:	2300      	movs	r3, #0
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e0af      	b.n	8003cde <UART_SetConfig+0x282>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e0ac      	b.n	8003cde <UART_SetConfig+0x282>
 8003b84:	2304      	movs	r3, #4
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e0a9      	b.n	8003cde <UART_SetConfig+0x282>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	76fb      	strb	r3, [r7, #27]
 8003b8e:	e0a6      	b.n	8003cde <UART_SetConfig+0x282>
 8003b90:	2310      	movs	r3, #16
 8003b92:	76fb      	strb	r3, [r7, #27]
 8003b94:	e0a3      	b.n	8003cde <UART_SetConfig+0x282>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6d      	ldr	r2, [pc, #436]	; (8003d50 <UART_SetConfig+0x2f4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d120      	bne.n	8003be2 <UART_SetConfig+0x186>
 8003ba0:	4b69      	ldr	r3, [pc, #420]	; (8003d48 <UART_SetConfig+0x2ec>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003baa:	2b30      	cmp	r3, #48	; 0x30
 8003bac:	d013      	beq.n	8003bd6 <UART_SetConfig+0x17a>
 8003bae:	2b30      	cmp	r3, #48	; 0x30
 8003bb0:	d814      	bhi.n	8003bdc <UART_SetConfig+0x180>
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d009      	beq.n	8003bca <UART_SetConfig+0x16e>
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d810      	bhi.n	8003bdc <UART_SetConfig+0x180>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <UART_SetConfig+0x168>
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d006      	beq.n	8003bd0 <UART_SetConfig+0x174>
 8003bc2:	e00b      	b.n	8003bdc <UART_SetConfig+0x180>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	76fb      	strb	r3, [r7, #27]
 8003bc8:	e089      	b.n	8003cde <UART_SetConfig+0x282>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	76fb      	strb	r3, [r7, #27]
 8003bce:	e086      	b.n	8003cde <UART_SetConfig+0x282>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	76fb      	strb	r3, [r7, #27]
 8003bd4:	e083      	b.n	8003cde <UART_SetConfig+0x282>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	76fb      	strb	r3, [r7, #27]
 8003bda:	e080      	b.n	8003cde <UART_SetConfig+0x282>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	76fb      	strb	r3, [r7, #27]
 8003be0:	e07d      	b.n	8003cde <UART_SetConfig+0x282>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a5b      	ldr	r2, [pc, #364]	; (8003d54 <UART_SetConfig+0x2f8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d120      	bne.n	8003c2e <UART_SetConfig+0x1d2>
 8003bec:	4b56      	ldr	r3, [pc, #344]	; (8003d48 <UART_SetConfig+0x2ec>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf8:	d013      	beq.n	8003c22 <UART_SetConfig+0x1c6>
 8003bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8003bfc:	d814      	bhi.n	8003c28 <UART_SetConfig+0x1cc>
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d009      	beq.n	8003c16 <UART_SetConfig+0x1ba>
 8003c02:	2b80      	cmp	r3, #128	; 0x80
 8003c04:	d810      	bhi.n	8003c28 <UART_SetConfig+0x1cc>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <UART_SetConfig+0x1b4>
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d006      	beq.n	8003c1c <UART_SetConfig+0x1c0>
 8003c0e:	e00b      	b.n	8003c28 <UART_SetConfig+0x1cc>
 8003c10:	2300      	movs	r3, #0
 8003c12:	76fb      	strb	r3, [r7, #27]
 8003c14:	e063      	b.n	8003cde <UART_SetConfig+0x282>
 8003c16:	2302      	movs	r3, #2
 8003c18:	76fb      	strb	r3, [r7, #27]
 8003c1a:	e060      	b.n	8003cde <UART_SetConfig+0x282>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	e05d      	b.n	8003cde <UART_SetConfig+0x282>
 8003c22:	2308      	movs	r3, #8
 8003c24:	76fb      	strb	r3, [r7, #27]
 8003c26:	e05a      	b.n	8003cde <UART_SetConfig+0x282>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	e057      	b.n	8003cde <UART_SetConfig+0x282>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a49      	ldr	r2, [pc, #292]	; (8003d58 <UART_SetConfig+0x2fc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d125      	bne.n	8003c84 <UART_SetConfig+0x228>
 8003c38:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <UART_SetConfig+0x2ec>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c46:	d017      	beq.n	8003c78 <UART_SetConfig+0x21c>
 8003c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4c:	d817      	bhi.n	8003c7e <UART_SetConfig+0x222>
 8003c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c52:	d00b      	beq.n	8003c6c <UART_SetConfig+0x210>
 8003c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c58:	d811      	bhi.n	8003c7e <UART_SetConfig+0x222>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <UART_SetConfig+0x20a>
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	d006      	beq.n	8003c72 <UART_SetConfig+0x216>
 8003c64:	e00b      	b.n	8003c7e <UART_SetConfig+0x222>
 8003c66:	2300      	movs	r3, #0
 8003c68:	76fb      	strb	r3, [r7, #27]
 8003c6a:	e038      	b.n	8003cde <UART_SetConfig+0x282>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	76fb      	strb	r3, [r7, #27]
 8003c70:	e035      	b.n	8003cde <UART_SetConfig+0x282>
 8003c72:	2304      	movs	r3, #4
 8003c74:	76fb      	strb	r3, [r7, #27]
 8003c76:	e032      	b.n	8003cde <UART_SetConfig+0x282>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	76fb      	strb	r3, [r7, #27]
 8003c7c:	e02f      	b.n	8003cde <UART_SetConfig+0x282>
 8003c7e:	2310      	movs	r3, #16
 8003c80:	76fb      	strb	r3, [r7, #27]
 8003c82:	e02c      	b.n	8003cde <UART_SetConfig+0x282>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2d      	ldr	r2, [pc, #180]	; (8003d40 <UART_SetConfig+0x2e4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d125      	bne.n	8003cda <UART_SetConfig+0x27e>
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <UART_SetConfig+0x2ec>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c9c:	d017      	beq.n	8003cce <UART_SetConfig+0x272>
 8003c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca2:	d817      	bhi.n	8003cd4 <UART_SetConfig+0x278>
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca8:	d00b      	beq.n	8003cc2 <UART_SetConfig+0x266>
 8003caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cae:	d811      	bhi.n	8003cd4 <UART_SetConfig+0x278>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <UART_SetConfig+0x260>
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d006      	beq.n	8003cc8 <UART_SetConfig+0x26c>
 8003cba:	e00b      	b.n	8003cd4 <UART_SetConfig+0x278>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	76fb      	strb	r3, [r7, #27]
 8003cc0:	e00d      	b.n	8003cde <UART_SetConfig+0x282>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	76fb      	strb	r3, [r7, #27]
 8003cc6:	e00a      	b.n	8003cde <UART_SetConfig+0x282>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	76fb      	strb	r3, [r7, #27]
 8003ccc:	e007      	b.n	8003cde <UART_SetConfig+0x282>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	76fb      	strb	r3, [r7, #27]
 8003cd2:	e004      	b.n	8003cde <UART_SetConfig+0x282>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	76fb      	strb	r3, [r7, #27]
 8003cd8:	e001      	b.n	8003cde <UART_SetConfig+0x282>
 8003cda:	2310      	movs	r3, #16
 8003cdc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <UART_SetConfig+0x2e4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	f040 8087 	bne.w	8003df8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cea:	7efb      	ldrb	r3, [r7, #27]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d837      	bhi.n	8003d60 <UART_SetConfig+0x304>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0x29c>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d61 	.word	0x08003d61
 8003d08:	08003d2b 	.word	0x08003d2b
 8003d0c:	08003d61 	.word	0x08003d61
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d61 	.word	0x08003d61
 8003d18:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fc2c 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003d20:	6178      	str	r0, [r7, #20]
        break;
 8003d22:	e022      	b.n	8003d6a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <UART_SetConfig+0x300>)
 8003d26:	617b      	str	r3, [r7, #20]
        break;
 8003d28:	e01f      	b.n	8003d6a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe fb8d 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003d2e:	6178      	str	r0, [r7, #20]
        break;
 8003d30:	e01b      	b.n	8003d6a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	617b      	str	r3, [r7, #20]
        break;
 8003d38:	e017      	b.n	8003d6a <UART_SetConfig+0x30e>
 8003d3a:	bf00      	nop
 8003d3c:	efff69f3 	.word	0xefff69f3
 8003d40:	40008000 	.word	0x40008000
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40004800 	.word	0x40004800
 8003d54:	40004c00 	.word	0x40004c00
 8003d58:	40005000 	.word	0x40005000
 8003d5c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	76bb      	strb	r3, [r7, #26]
        break;
 8003d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80f1 	beq.w	8003f54 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d305      	bcc.n	8003d8e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d902      	bls.n	8003d94 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	76bb      	strb	r3, [r7, #26]
 8003d92:	e0df      	b.n	8003f54 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	020b      	lsls	r3, r1, #8
 8003da6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003daa:	0202      	lsls	r2, r0, #8
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6849      	ldr	r1, [r1, #4]
 8003db0:	0849      	lsrs	r1, r1, #1
 8003db2:	4608      	mov	r0, r1
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	1814      	adds	r4, r2, r0
 8003dba:	eb43 0501 	adc.w	r5, r3, r1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	4620      	mov	r0, r4
 8003dca:	4629      	mov	r1, r5
 8003dcc:	f7fc fa58 	bl	8000280 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dde:	d308      	bcc.n	8003df2 <UART_SetConfig+0x396>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de6:	d204      	bcs.n	8003df2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e0b0      	b.n	8003f54 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	76bb      	strb	r3, [r7, #26]
 8003df6:	e0ad      	b.n	8003f54 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	d15c      	bne.n	8003ebc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003e02:	7efb      	ldrb	r3, [r7, #27]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d828      	bhi.n	8003e5a <UART_SetConfig+0x3fe>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0x3b4>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	08003e5b 	.word	0x08003e5b
 8003e20:	08003e4b 	.word	0x08003e4b
 8003e24:	08003e5b 	.word	0x08003e5b
 8003e28:	08003e5b 	.word	0x08003e5b
 8003e2c:	08003e5b 	.word	0x08003e5b
 8003e30:	08003e53 	.word	0x08003e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7fe fba0 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003e38:	6178      	str	r0, [r7, #20]
        break;
 8003e3a:	e013      	b.n	8003e64 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e3c:	f7fe fbb2 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8003e40:	6178      	str	r0, [r7, #20]
        break;
 8003e42:	e00f      	b.n	8003e64 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <UART_SetConfig+0x510>)
 8003e46:	617b      	str	r3, [r7, #20]
        break;
 8003e48:	e00c      	b.n	8003e64 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4a:	f7fe fafd 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003e4e:	6178      	str	r0, [r7, #20]
        break;
 8003e50:	e008      	b.n	8003e64 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	617b      	str	r3, [r7, #20]
        break;
 8003e58:	e004      	b.n	8003e64 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	76bb      	strb	r3, [r7, #26]
        break;
 8003e62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d074      	beq.n	8003f54 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005a      	lsls	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d916      	bls.n	8003eb6 <UART_SetConfig+0x45a>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d212      	bcs.n	8003eb6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f023 030f 	bic.w	r3, r3, #15
 8003e98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	89fa      	ldrh	r2, [r7, #14]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e04e      	b.n	8003f54 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	76bb      	strb	r3, [r7, #26]
 8003eba:	e04b      	b.n	8003f54 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ebc:	7efb      	ldrb	r3, [r7, #27]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d827      	bhi.n	8003f12 <UART_SetConfig+0x4b6>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <UART_SetConfig+0x46c>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003f03 	.word	0x08003f03
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe fb44 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	6178      	str	r0, [r7, #20]
        break;
 8003ef2:	e013      	b.n	8003f1c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe fb56 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	6178      	str	r0, [r7, #20]
        break;
 8003efa:	e00f      	b.n	8003f1c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <UART_SetConfig+0x510>)
 8003efe:	617b      	str	r3, [r7, #20]
        break;
 8003f00:	e00c      	b.n	8003f1c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe faa1 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003f06:	6178      	str	r0, [r7, #20]
        break;
 8003f08:	e008      	b.n	8003f1c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	617b      	str	r3, [r7, #20]
        break;
 8003f10:	e004      	b.n	8003f1c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	76bb      	strb	r3, [r7, #26]
        break;
 8003f1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	085a      	lsrs	r2, r3, #1
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d908      	bls.n	8003f50 <UART_SetConfig+0x4f4>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d204      	bcs.n	8003f50 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e001      	b.n	8003f54 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f60:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	00f42400 	.word	0x00f42400

08003f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d10a      	bne.n	8004086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c4:	f7fd f95e 	bl	8001384 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d10e      	bne.n	80040f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f82d 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e023      	b.n	800413e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d10e      	bne.n	8004122 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f817 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e00d      	b.n	800413e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	e05e      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d05a      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fd f910 	bl	8001384 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <UART_WaitOnFlagUntilTimeout+0x30>
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11b      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004184:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e043      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02c      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ca:	d124      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00f      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	429a      	cmp	r2, r3
 8004232:	d091      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <__errno>:
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <__errno+0x8>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000003c 	.word	0x2000003c

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4d0d      	ldr	r5, [pc, #52]	; (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2600      	movs	r6, #0
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4d0b      	ldr	r5, [pc, #44]	; (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	; (8004290 <__libc_init_array+0x44>)
 8004260:	f001 f9f4 	bl	800564c <_init>
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2600      	movs	r6, #0
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	08005b1c 	.word	0x08005b1c
 8004288:	08005b1c 	.word	0x08005b1c
 800428c:	08005b1c 	.word	0x08005b1c
 8004290:	08005b20 	.word	0x08005b20

08004294 <memset>:
 8004294:	4402      	add	r2, r0
 8004296:	4603      	mov	r3, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	f803 1b01 	strb.w	r1, [r3], #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <rand>:
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <rand+0x60>)
 80042a6:	b510      	push	{r4, lr}
 80042a8:	681c      	ldr	r4, [r3, #0]
 80042aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042ac:	b9b3      	cbnz	r3, 80042dc <rand+0x38>
 80042ae:	2018      	movs	r0, #24
 80042b0:	f000 f888 	bl	80043c4 <malloc>
 80042b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80042b6:	b928      	cbnz	r0, 80042c4 <rand+0x20>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b13      	ldr	r3, [pc, #76]	; (8004308 <rand+0x64>)
 80042bc:	4813      	ldr	r0, [pc, #76]	; (800430c <rand+0x68>)
 80042be:	214e      	movs	r1, #78	; 0x4e
 80042c0:	f000 f850 	bl	8004364 <__assert_func>
 80042c4:	4a12      	ldr	r2, [pc, #72]	; (8004310 <rand+0x6c>)
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <rand+0x70>)
 80042c8:	e9c0 2300 	strd	r2, r3, [r0]
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <rand+0x74>)
 80042ce:	6083      	str	r3, [r0, #8]
 80042d0:	230b      	movs	r3, #11
 80042d2:	8183      	strh	r3, [r0, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	2300      	movs	r3, #0
 80042d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80042dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042de:	480f      	ldr	r0, [pc, #60]	; (800431c <rand+0x78>)
 80042e0:	690a      	ldr	r2, [r1, #16]
 80042e2:	694b      	ldr	r3, [r1, #20]
 80042e4:	4c0e      	ldr	r4, [pc, #56]	; (8004320 <rand+0x7c>)
 80042e6:	4350      	muls	r0, r2
 80042e8:	fb04 0003 	mla	r0, r4, r3, r0
 80042ec:	fba2 3404 	umull	r3, r4, r2, r4
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4404      	add	r4, r0
 80042f4:	f144 0000 	adc.w	r0, r4, #0
 80042f8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80042fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004300:	bd10      	pop	{r4, pc}
 8004302:	bf00      	nop
 8004304:	2000003c 	.word	0x2000003c
 8004308:	080059cc 	.word	0x080059cc
 800430c:	080059e3 	.word	0x080059e3
 8004310:	abcd330e 	.word	0xabcd330e
 8004314:	e66d1234 	.word	0xe66d1234
 8004318:	0005deec 	.word	0x0005deec
 800431c:	5851f42d 	.word	0x5851f42d
 8004320:	4c957f2d 	.word	0x4c957f2d

08004324 <siprintf>:
 8004324:	b40e      	push	{r1, r2, r3}
 8004326:	b500      	push	{lr}
 8004328:	b09c      	sub	sp, #112	; 0x70
 800432a:	ab1d      	add	r3, sp, #116	; 0x74
 800432c:	9002      	str	r0, [sp, #8]
 800432e:	9006      	str	r0, [sp, #24]
 8004330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004334:	4809      	ldr	r0, [pc, #36]	; (800435c <siprintf+0x38>)
 8004336:	9107      	str	r1, [sp, #28]
 8004338:	9104      	str	r1, [sp, #16]
 800433a:	4909      	ldr	r1, [pc, #36]	; (8004360 <siprintf+0x3c>)
 800433c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004340:	9105      	str	r1, [sp, #20]
 8004342:	6800      	ldr	r0, [r0, #0]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	a902      	add	r1, sp, #8
 8004348:	f000 f94a 	bl	80045e0 <_svfiprintf_r>
 800434c:	9b02      	ldr	r3, [sp, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	b01c      	add	sp, #112	; 0x70
 8004354:	f85d eb04 	ldr.w	lr, [sp], #4
 8004358:	b003      	add	sp, #12
 800435a:	4770      	bx	lr
 800435c:	2000003c 	.word	0x2000003c
 8004360:	ffff0208 	.word	0xffff0208

08004364 <__assert_func>:
 8004364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004366:	4614      	mov	r4, r2
 8004368:	461a      	mov	r2, r3
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <__assert_func+0x2c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4605      	mov	r5, r0
 8004370:	68d8      	ldr	r0, [r3, #12]
 8004372:	b14c      	cbz	r4, 8004388 <__assert_func+0x24>
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <__assert_func+0x30>)
 8004376:	9100      	str	r1, [sp, #0]
 8004378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800437c:	4906      	ldr	r1, [pc, #24]	; (8004398 <__assert_func+0x34>)
 800437e:	462b      	mov	r3, r5
 8004380:	f000 f80e 	bl	80043a0 <fiprintf>
 8004384:	f000 fdea 	bl	8004f5c <abort>
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <__assert_func+0x38>)
 800438a:	461c      	mov	r4, r3
 800438c:	e7f3      	b.n	8004376 <__assert_func+0x12>
 800438e:	bf00      	nop
 8004390:	2000003c 	.word	0x2000003c
 8004394:	08005a42 	.word	0x08005a42
 8004398:	08005a4f 	.word	0x08005a4f
 800439c:	08005a7d 	.word	0x08005a7d

080043a0 <fiprintf>:
 80043a0:	b40e      	push	{r1, r2, r3}
 80043a2:	b503      	push	{r0, r1, lr}
 80043a4:	4601      	mov	r1, r0
 80043a6:	ab03      	add	r3, sp, #12
 80043a8:	4805      	ldr	r0, [pc, #20]	; (80043c0 <fiprintf+0x20>)
 80043aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ae:	6800      	ldr	r0, [r0, #0]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	f000 fa3f 	bl	8004834 <_vfiprintf_r>
 80043b6:	b002      	add	sp, #8
 80043b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043bc:	b003      	add	sp, #12
 80043be:	4770      	bx	lr
 80043c0:	2000003c 	.word	0x2000003c

080043c4 <malloc>:
 80043c4:	4b02      	ldr	r3, [pc, #8]	; (80043d0 <malloc+0xc>)
 80043c6:	4601      	mov	r1, r0
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	f000 b853 	b.w	8004474 <_malloc_r>
 80043ce:	bf00      	nop
 80043d0:	2000003c 	.word	0x2000003c

080043d4 <_free_r>:
 80043d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d048      	beq.n	800446c <_free_r+0x98>
 80043da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043de:	9001      	str	r0, [sp, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f1a1 0404 	sub.w	r4, r1, #4
 80043e6:	bfb8      	it	lt
 80043e8:	18e4      	addlt	r4, r4, r3
 80043ea:	f001 f805 	bl	80053f8 <__malloc_lock>
 80043ee:	4a20      	ldr	r2, [pc, #128]	; (8004470 <_free_r+0x9c>)
 80043f0:	9801      	ldr	r0, [sp, #4]
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	4615      	mov	r5, r2
 80043f6:	b933      	cbnz	r3, 8004406 <_free_r+0x32>
 80043f8:	6063      	str	r3, [r4, #4]
 80043fa:	6014      	str	r4, [r2, #0]
 80043fc:	b003      	add	sp, #12
 80043fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004402:	f000 bfff 	b.w	8005404 <__malloc_unlock>
 8004406:	42a3      	cmp	r3, r4
 8004408:	d90b      	bls.n	8004422 <_free_r+0x4e>
 800440a:	6821      	ldr	r1, [r4, #0]
 800440c:	1862      	adds	r2, r4, r1
 800440e:	4293      	cmp	r3, r2
 8004410:	bf04      	itt	eq
 8004412:	681a      	ldreq	r2, [r3, #0]
 8004414:	685b      	ldreq	r3, [r3, #4]
 8004416:	6063      	str	r3, [r4, #4]
 8004418:	bf04      	itt	eq
 800441a:	1852      	addeq	r2, r2, r1
 800441c:	6022      	streq	r2, [r4, #0]
 800441e:	602c      	str	r4, [r5, #0]
 8004420:	e7ec      	b.n	80043fc <_free_r+0x28>
 8004422:	461a      	mov	r2, r3
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	b10b      	cbz	r3, 800442c <_free_r+0x58>
 8004428:	42a3      	cmp	r3, r4
 800442a:	d9fa      	bls.n	8004422 <_free_r+0x4e>
 800442c:	6811      	ldr	r1, [r2, #0]
 800442e:	1855      	adds	r5, r2, r1
 8004430:	42a5      	cmp	r5, r4
 8004432:	d10b      	bne.n	800444c <_free_r+0x78>
 8004434:	6824      	ldr	r4, [r4, #0]
 8004436:	4421      	add	r1, r4
 8004438:	1854      	adds	r4, r2, r1
 800443a:	42a3      	cmp	r3, r4
 800443c:	6011      	str	r1, [r2, #0]
 800443e:	d1dd      	bne.n	80043fc <_free_r+0x28>
 8004440:	681c      	ldr	r4, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	6053      	str	r3, [r2, #4]
 8004446:	4421      	add	r1, r4
 8004448:	6011      	str	r1, [r2, #0]
 800444a:	e7d7      	b.n	80043fc <_free_r+0x28>
 800444c:	d902      	bls.n	8004454 <_free_r+0x80>
 800444e:	230c      	movs	r3, #12
 8004450:	6003      	str	r3, [r0, #0]
 8004452:	e7d3      	b.n	80043fc <_free_r+0x28>
 8004454:	6825      	ldr	r5, [r4, #0]
 8004456:	1961      	adds	r1, r4, r5
 8004458:	428b      	cmp	r3, r1
 800445a:	bf04      	itt	eq
 800445c:	6819      	ldreq	r1, [r3, #0]
 800445e:	685b      	ldreq	r3, [r3, #4]
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	bf04      	itt	eq
 8004464:	1949      	addeq	r1, r1, r5
 8004466:	6021      	streq	r1, [r4, #0]
 8004468:	6054      	str	r4, [r2, #4]
 800446a:	e7c7      	b.n	80043fc <_free_r+0x28>
 800446c:	b003      	add	sp, #12
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	200000d4 	.word	0x200000d4

08004474 <_malloc_r>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	1ccd      	adds	r5, r1, #3
 8004478:	f025 0503 	bic.w	r5, r5, #3
 800447c:	3508      	adds	r5, #8
 800447e:	2d0c      	cmp	r5, #12
 8004480:	bf38      	it	cc
 8004482:	250c      	movcc	r5, #12
 8004484:	2d00      	cmp	r5, #0
 8004486:	4606      	mov	r6, r0
 8004488:	db01      	blt.n	800448e <_malloc_r+0x1a>
 800448a:	42a9      	cmp	r1, r5
 800448c:	d903      	bls.n	8004496 <_malloc_r+0x22>
 800448e:	230c      	movs	r3, #12
 8004490:	6033      	str	r3, [r6, #0]
 8004492:	2000      	movs	r0, #0
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004496:	f000 ffaf 	bl	80053f8 <__malloc_lock>
 800449a:	4921      	ldr	r1, [pc, #132]	; (8004520 <_malloc_r+0xac>)
 800449c:	680a      	ldr	r2, [r1, #0]
 800449e:	4614      	mov	r4, r2
 80044a0:	b99c      	cbnz	r4, 80044ca <_malloc_r+0x56>
 80044a2:	4f20      	ldr	r7, [pc, #128]	; (8004524 <_malloc_r+0xb0>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b923      	cbnz	r3, 80044b2 <_malloc_r+0x3e>
 80044a8:	4621      	mov	r1, r4
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 fc86 	bl	8004dbc <_sbrk_r>
 80044b0:	6038      	str	r0, [r7, #0]
 80044b2:	4629      	mov	r1, r5
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 fc81 	bl	8004dbc <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d123      	bne.n	8004506 <_malloc_r+0x92>
 80044be:	230c      	movs	r3, #12
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 ff9e 	bl	8005404 <__malloc_unlock>
 80044c8:	e7e3      	b.n	8004492 <_malloc_r+0x1e>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	1b5b      	subs	r3, r3, r5
 80044ce:	d417      	bmi.n	8004500 <_malloc_r+0x8c>
 80044d0:	2b0b      	cmp	r3, #11
 80044d2:	d903      	bls.n	80044dc <_malloc_r+0x68>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	441c      	add	r4, r3
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	e004      	b.n	80044e6 <_malloc_r+0x72>
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	42a2      	cmp	r2, r4
 80044e0:	bf0c      	ite	eq
 80044e2:	600b      	streq	r3, [r1, #0]
 80044e4:	6053      	strne	r3, [r2, #4]
 80044e6:	4630      	mov	r0, r6
 80044e8:	f000 ff8c 	bl	8005404 <__malloc_unlock>
 80044ec:	f104 000b 	add.w	r0, r4, #11
 80044f0:	1d23      	adds	r3, r4, #4
 80044f2:	f020 0007 	bic.w	r0, r0, #7
 80044f6:	1ac2      	subs	r2, r0, r3
 80044f8:	d0cc      	beq.n	8004494 <_malloc_r+0x20>
 80044fa:	1a1b      	subs	r3, r3, r0
 80044fc:	50a3      	str	r3, [r4, r2]
 80044fe:	e7c9      	b.n	8004494 <_malloc_r+0x20>
 8004500:	4622      	mov	r2, r4
 8004502:	6864      	ldr	r4, [r4, #4]
 8004504:	e7cc      	b.n	80044a0 <_malloc_r+0x2c>
 8004506:	1cc4      	adds	r4, r0, #3
 8004508:	f024 0403 	bic.w	r4, r4, #3
 800450c:	42a0      	cmp	r0, r4
 800450e:	d0e3      	beq.n	80044d8 <_malloc_r+0x64>
 8004510:	1a21      	subs	r1, r4, r0
 8004512:	4630      	mov	r0, r6
 8004514:	f000 fc52 	bl	8004dbc <_sbrk_r>
 8004518:	3001      	adds	r0, #1
 800451a:	d1dd      	bne.n	80044d8 <_malloc_r+0x64>
 800451c:	e7cf      	b.n	80044be <_malloc_r+0x4a>
 800451e:	bf00      	nop
 8004520:	200000d4 	.word	0x200000d4
 8004524:	200000d8 	.word	0x200000d8

08004528 <__ssputs_r>:
 8004528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800452c:	688e      	ldr	r6, [r1, #8]
 800452e:	429e      	cmp	r6, r3
 8004530:	4682      	mov	sl, r0
 8004532:	460c      	mov	r4, r1
 8004534:	4690      	mov	r8, r2
 8004536:	461f      	mov	r7, r3
 8004538:	d838      	bhi.n	80045ac <__ssputs_r+0x84>
 800453a:	898a      	ldrh	r2, [r1, #12]
 800453c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004540:	d032      	beq.n	80045a8 <__ssputs_r+0x80>
 8004542:	6825      	ldr	r5, [r4, #0]
 8004544:	6909      	ldr	r1, [r1, #16]
 8004546:	eba5 0901 	sub.w	r9, r5, r1
 800454a:	6965      	ldr	r5, [r4, #20]
 800454c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004554:	3301      	adds	r3, #1
 8004556:	444b      	add	r3, r9
 8004558:	106d      	asrs	r5, r5, #1
 800455a:	429d      	cmp	r5, r3
 800455c:	bf38      	it	cc
 800455e:	461d      	movcc	r5, r3
 8004560:	0553      	lsls	r3, r2, #21
 8004562:	d531      	bpl.n	80045c8 <__ssputs_r+0xa0>
 8004564:	4629      	mov	r1, r5
 8004566:	f7ff ff85 	bl	8004474 <_malloc_r>
 800456a:	4606      	mov	r6, r0
 800456c:	b950      	cbnz	r0, 8004584 <__ssputs_r+0x5c>
 800456e:	230c      	movs	r3, #12
 8004570:	f8ca 3000 	str.w	r3, [sl]
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004584:	6921      	ldr	r1, [r4, #16]
 8004586:	464a      	mov	r2, r9
 8004588:	f000 ff0e 	bl	80053a8 <memcpy>
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	6126      	str	r6, [r4, #16]
 800459a:	6165      	str	r5, [r4, #20]
 800459c:	444e      	add	r6, r9
 800459e:	eba5 0509 	sub.w	r5, r5, r9
 80045a2:	6026      	str	r6, [r4, #0]
 80045a4:	60a5      	str	r5, [r4, #8]
 80045a6:	463e      	mov	r6, r7
 80045a8:	42be      	cmp	r6, r7
 80045aa:	d900      	bls.n	80045ae <__ssputs_r+0x86>
 80045ac:	463e      	mov	r6, r7
 80045ae:	4632      	mov	r2, r6
 80045b0:	6820      	ldr	r0, [r4, #0]
 80045b2:	4641      	mov	r1, r8
 80045b4:	f000 ff06 	bl	80053c4 <memmove>
 80045b8:	68a3      	ldr	r3, [r4, #8]
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	1b9b      	subs	r3, r3, r6
 80045be:	4432      	add	r2, r6
 80045c0:	60a3      	str	r3, [r4, #8]
 80045c2:	6022      	str	r2, [r4, #0]
 80045c4:	2000      	movs	r0, #0
 80045c6:	e7db      	b.n	8004580 <__ssputs_r+0x58>
 80045c8:	462a      	mov	r2, r5
 80045ca:	f000 ff21 	bl	8005410 <_realloc_r>
 80045ce:	4606      	mov	r6, r0
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d1e1      	bne.n	8004598 <__ssputs_r+0x70>
 80045d4:	6921      	ldr	r1, [r4, #16]
 80045d6:	4650      	mov	r0, sl
 80045d8:	f7ff fefc 	bl	80043d4 <_free_r>
 80045dc:	e7c7      	b.n	800456e <__ssputs_r+0x46>
	...

080045e0 <_svfiprintf_r>:
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	4698      	mov	r8, r3
 80045e6:	898b      	ldrh	r3, [r1, #12]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	b09d      	sub	sp, #116	; 0x74
 80045ec:	4607      	mov	r7, r0
 80045ee:	460d      	mov	r5, r1
 80045f0:	4614      	mov	r4, r2
 80045f2:	d50e      	bpl.n	8004612 <_svfiprintf_r+0x32>
 80045f4:	690b      	ldr	r3, [r1, #16]
 80045f6:	b963      	cbnz	r3, 8004612 <_svfiprintf_r+0x32>
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	f7ff ff3b 	bl	8004474 <_malloc_r>
 80045fe:	6028      	str	r0, [r5, #0]
 8004600:	6128      	str	r0, [r5, #16]
 8004602:	b920      	cbnz	r0, 800460e <_svfiprintf_r+0x2e>
 8004604:	230c      	movs	r3, #12
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	e0d1      	b.n	80047b2 <_svfiprintf_r+0x1d2>
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	616b      	str	r3, [r5, #20]
 8004612:	2300      	movs	r3, #0
 8004614:	9309      	str	r3, [sp, #36]	; 0x24
 8004616:	2320      	movs	r3, #32
 8004618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800461c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004620:	2330      	movs	r3, #48	; 0x30
 8004622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047cc <_svfiprintf_r+0x1ec>
 8004626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800462a:	f04f 0901 	mov.w	r9, #1
 800462e:	4623      	mov	r3, r4
 8004630:	469a      	mov	sl, r3
 8004632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004636:	b10a      	cbz	r2, 800463c <_svfiprintf_r+0x5c>
 8004638:	2a25      	cmp	r2, #37	; 0x25
 800463a:	d1f9      	bne.n	8004630 <_svfiprintf_r+0x50>
 800463c:	ebba 0b04 	subs.w	fp, sl, r4
 8004640:	d00b      	beq.n	800465a <_svfiprintf_r+0x7a>
 8004642:	465b      	mov	r3, fp
 8004644:	4622      	mov	r2, r4
 8004646:	4629      	mov	r1, r5
 8004648:	4638      	mov	r0, r7
 800464a:	f7ff ff6d 	bl	8004528 <__ssputs_r>
 800464e:	3001      	adds	r0, #1
 8004650:	f000 80aa 	beq.w	80047a8 <_svfiprintf_r+0x1c8>
 8004654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004656:	445a      	add	r2, fp
 8004658:	9209      	str	r2, [sp, #36]	; 0x24
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a2 	beq.w	80047a8 <_svfiprintf_r+0x1c8>
 8004664:	2300      	movs	r3, #0
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800466e:	f10a 0a01 	add.w	sl, sl, #1
 8004672:	9304      	str	r3, [sp, #16]
 8004674:	9307      	str	r3, [sp, #28]
 8004676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800467a:	931a      	str	r3, [sp, #104]	; 0x68
 800467c:	4654      	mov	r4, sl
 800467e:	2205      	movs	r2, #5
 8004680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004684:	4851      	ldr	r0, [pc, #324]	; (80047cc <_svfiprintf_r+0x1ec>)
 8004686:	f7fb fdab 	bl	80001e0 <memchr>
 800468a:	9a04      	ldr	r2, [sp, #16]
 800468c:	b9d8      	cbnz	r0, 80046c6 <_svfiprintf_r+0xe6>
 800468e:	06d0      	lsls	r0, r2, #27
 8004690:	bf44      	itt	mi
 8004692:	2320      	movmi	r3, #32
 8004694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004698:	0711      	lsls	r1, r2, #28
 800469a:	bf44      	itt	mi
 800469c:	232b      	movmi	r3, #43	; 0x2b
 800469e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a2:	f89a 3000 	ldrb.w	r3, [sl]
 80046a6:	2b2a      	cmp	r3, #42	; 0x2a
 80046a8:	d015      	beq.n	80046d6 <_svfiprintf_r+0xf6>
 80046aa:	9a07      	ldr	r2, [sp, #28]
 80046ac:	4654      	mov	r4, sl
 80046ae:	2000      	movs	r0, #0
 80046b0:	f04f 0c0a 	mov.w	ip, #10
 80046b4:	4621      	mov	r1, r4
 80046b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ba:	3b30      	subs	r3, #48	; 0x30
 80046bc:	2b09      	cmp	r3, #9
 80046be:	d94e      	bls.n	800475e <_svfiprintf_r+0x17e>
 80046c0:	b1b0      	cbz	r0, 80046f0 <_svfiprintf_r+0x110>
 80046c2:	9207      	str	r2, [sp, #28]
 80046c4:	e014      	b.n	80046f0 <_svfiprintf_r+0x110>
 80046c6:	eba0 0308 	sub.w	r3, r0, r8
 80046ca:	fa09 f303 	lsl.w	r3, r9, r3
 80046ce:	4313      	orrs	r3, r2
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	46a2      	mov	sl, r4
 80046d4:	e7d2      	b.n	800467c <_svfiprintf_r+0x9c>
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	1d19      	adds	r1, r3, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	9103      	str	r1, [sp, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfbb      	ittet	lt
 80046e2:	425b      	neglt	r3, r3
 80046e4:	f042 0202 	orrlt.w	r2, r2, #2
 80046e8:	9307      	strge	r3, [sp, #28]
 80046ea:	9307      	strlt	r3, [sp, #28]
 80046ec:	bfb8      	it	lt
 80046ee:	9204      	strlt	r2, [sp, #16]
 80046f0:	7823      	ldrb	r3, [r4, #0]
 80046f2:	2b2e      	cmp	r3, #46	; 0x2e
 80046f4:	d10c      	bne.n	8004710 <_svfiprintf_r+0x130>
 80046f6:	7863      	ldrb	r3, [r4, #1]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d135      	bne.n	8004768 <_svfiprintf_r+0x188>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	9203      	str	r2, [sp, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	bfb8      	it	lt
 8004708:	f04f 33ff 	movlt.w	r3, #4294967295
 800470c:	3402      	adds	r4, #2
 800470e:	9305      	str	r3, [sp, #20]
 8004710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047dc <_svfiprintf_r+0x1fc>
 8004714:	7821      	ldrb	r1, [r4, #0]
 8004716:	2203      	movs	r2, #3
 8004718:	4650      	mov	r0, sl
 800471a:	f7fb fd61 	bl	80001e0 <memchr>
 800471e:	b140      	cbz	r0, 8004732 <_svfiprintf_r+0x152>
 8004720:	2340      	movs	r3, #64	; 0x40
 8004722:	eba0 000a 	sub.w	r0, r0, sl
 8004726:	fa03 f000 	lsl.w	r0, r3, r0
 800472a:	9b04      	ldr	r3, [sp, #16]
 800472c:	4303      	orrs	r3, r0
 800472e:	3401      	adds	r4, #1
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004736:	4826      	ldr	r0, [pc, #152]	; (80047d0 <_svfiprintf_r+0x1f0>)
 8004738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800473c:	2206      	movs	r2, #6
 800473e:	f7fb fd4f 	bl	80001e0 <memchr>
 8004742:	2800      	cmp	r0, #0
 8004744:	d038      	beq.n	80047b8 <_svfiprintf_r+0x1d8>
 8004746:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <_svfiprintf_r+0x1f4>)
 8004748:	bb1b      	cbnz	r3, 8004792 <_svfiprintf_r+0x1b2>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	3307      	adds	r3, #7
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	3308      	adds	r3, #8
 8004754:	9303      	str	r3, [sp, #12]
 8004756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004758:	4433      	add	r3, r6
 800475a:	9309      	str	r3, [sp, #36]	; 0x24
 800475c:	e767      	b.n	800462e <_svfiprintf_r+0x4e>
 800475e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004762:	460c      	mov	r4, r1
 8004764:	2001      	movs	r0, #1
 8004766:	e7a5      	b.n	80046b4 <_svfiprintf_r+0xd4>
 8004768:	2300      	movs	r3, #0
 800476a:	3401      	adds	r4, #1
 800476c:	9305      	str	r3, [sp, #20]
 800476e:	4619      	mov	r1, r3
 8004770:	f04f 0c0a 	mov.w	ip, #10
 8004774:	4620      	mov	r0, r4
 8004776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800477a:	3a30      	subs	r2, #48	; 0x30
 800477c:	2a09      	cmp	r2, #9
 800477e:	d903      	bls.n	8004788 <_svfiprintf_r+0x1a8>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0c5      	beq.n	8004710 <_svfiprintf_r+0x130>
 8004784:	9105      	str	r1, [sp, #20]
 8004786:	e7c3      	b.n	8004710 <_svfiprintf_r+0x130>
 8004788:	fb0c 2101 	mla	r1, ip, r1, r2
 800478c:	4604      	mov	r4, r0
 800478e:	2301      	movs	r3, #1
 8004790:	e7f0      	b.n	8004774 <_svfiprintf_r+0x194>
 8004792:	ab03      	add	r3, sp, #12
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	462a      	mov	r2, r5
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <_svfiprintf_r+0x1f8>)
 800479a:	a904      	add	r1, sp, #16
 800479c:	4638      	mov	r0, r7
 800479e:	f3af 8000 	nop.w
 80047a2:	1c42      	adds	r2, r0, #1
 80047a4:	4606      	mov	r6, r0
 80047a6:	d1d6      	bne.n	8004756 <_svfiprintf_r+0x176>
 80047a8:	89ab      	ldrh	r3, [r5, #12]
 80047aa:	065b      	lsls	r3, r3, #25
 80047ac:	f53f af2c 	bmi.w	8004608 <_svfiprintf_r+0x28>
 80047b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047b2:	b01d      	add	sp, #116	; 0x74
 80047b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b8:	ab03      	add	r3, sp, #12
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	462a      	mov	r2, r5
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <_svfiprintf_r+0x1f8>)
 80047c0:	a904      	add	r1, sp, #16
 80047c2:	4638      	mov	r0, r7
 80047c4:	f000 f9d4 	bl	8004b70 <_printf_i>
 80047c8:	e7eb      	b.n	80047a2 <_svfiprintf_r+0x1c2>
 80047ca:	bf00      	nop
 80047cc:	08005a7e 	.word	0x08005a7e
 80047d0:	08005a88 	.word	0x08005a88
 80047d4:	00000000 	.word	0x00000000
 80047d8:	08004529 	.word	0x08004529
 80047dc:	08005a84 	.word	0x08005a84

080047e0 <__sfputc_r>:
 80047e0:	6893      	ldr	r3, [r2, #8]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	b410      	push	{r4}
 80047e8:	6093      	str	r3, [r2, #8]
 80047ea:	da08      	bge.n	80047fe <__sfputc_r+0x1e>
 80047ec:	6994      	ldr	r4, [r2, #24]
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	db01      	blt.n	80047f6 <__sfputc_r+0x16>
 80047f2:	290a      	cmp	r1, #10
 80047f4:	d103      	bne.n	80047fe <__sfputc_r+0x1e>
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	f000 baef 	b.w	8004ddc <__swbuf_r>
 80047fe:	6813      	ldr	r3, [r2, #0]
 8004800:	1c58      	adds	r0, r3, #1
 8004802:	6010      	str	r0, [r2, #0]
 8004804:	7019      	strb	r1, [r3, #0]
 8004806:	4608      	mov	r0, r1
 8004808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800480c:	4770      	bx	lr

0800480e <__sfputs_r>:
 800480e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004810:	4606      	mov	r6, r0
 8004812:	460f      	mov	r7, r1
 8004814:	4614      	mov	r4, r2
 8004816:	18d5      	adds	r5, r2, r3
 8004818:	42ac      	cmp	r4, r5
 800481a:	d101      	bne.n	8004820 <__sfputs_r+0x12>
 800481c:	2000      	movs	r0, #0
 800481e:	e007      	b.n	8004830 <__sfputs_r+0x22>
 8004820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004824:	463a      	mov	r2, r7
 8004826:	4630      	mov	r0, r6
 8004828:	f7ff ffda 	bl	80047e0 <__sfputc_r>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d1f3      	bne.n	8004818 <__sfputs_r+0xa>
 8004830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004834 <_vfiprintf_r>:
 8004834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004838:	460d      	mov	r5, r1
 800483a:	b09d      	sub	sp, #116	; 0x74
 800483c:	4614      	mov	r4, r2
 800483e:	4698      	mov	r8, r3
 8004840:	4606      	mov	r6, r0
 8004842:	b118      	cbz	r0, 800484c <_vfiprintf_r+0x18>
 8004844:	6983      	ldr	r3, [r0, #24]
 8004846:	b90b      	cbnz	r3, 800484c <_vfiprintf_r+0x18>
 8004848:	f000 fcaa 	bl	80051a0 <__sinit>
 800484c:	4b89      	ldr	r3, [pc, #548]	; (8004a74 <_vfiprintf_r+0x240>)
 800484e:	429d      	cmp	r5, r3
 8004850:	d11b      	bne.n	800488a <_vfiprintf_r+0x56>
 8004852:	6875      	ldr	r5, [r6, #4]
 8004854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004856:	07d9      	lsls	r1, r3, #31
 8004858:	d405      	bmi.n	8004866 <_vfiprintf_r+0x32>
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	059a      	lsls	r2, r3, #22
 800485e:	d402      	bmi.n	8004866 <_vfiprintf_r+0x32>
 8004860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004862:	f000 fd3b 	bl	80052dc <__retarget_lock_acquire_recursive>
 8004866:	89ab      	ldrh	r3, [r5, #12]
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	d501      	bpl.n	8004870 <_vfiprintf_r+0x3c>
 800486c:	692b      	ldr	r3, [r5, #16]
 800486e:	b9eb      	cbnz	r3, 80048ac <_vfiprintf_r+0x78>
 8004870:	4629      	mov	r1, r5
 8004872:	4630      	mov	r0, r6
 8004874:	f000 fb04 	bl	8004e80 <__swsetup_r>
 8004878:	b1c0      	cbz	r0, 80048ac <_vfiprintf_r+0x78>
 800487a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800487c:	07dc      	lsls	r4, r3, #31
 800487e:	d50e      	bpl.n	800489e <_vfiprintf_r+0x6a>
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	b01d      	add	sp, #116	; 0x74
 8004886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488a:	4b7b      	ldr	r3, [pc, #492]	; (8004a78 <_vfiprintf_r+0x244>)
 800488c:	429d      	cmp	r5, r3
 800488e:	d101      	bne.n	8004894 <_vfiprintf_r+0x60>
 8004890:	68b5      	ldr	r5, [r6, #8]
 8004892:	e7df      	b.n	8004854 <_vfiprintf_r+0x20>
 8004894:	4b79      	ldr	r3, [pc, #484]	; (8004a7c <_vfiprintf_r+0x248>)
 8004896:	429d      	cmp	r5, r3
 8004898:	bf08      	it	eq
 800489a:	68f5      	ldreq	r5, [r6, #12]
 800489c:	e7da      	b.n	8004854 <_vfiprintf_r+0x20>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	0598      	lsls	r0, r3, #22
 80048a2:	d4ed      	bmi.n	8004880 <_vfiprintf_r+0x4c>
 80048a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048a6:	f000 fd1a 	bl	80052de <__retarget_lock_release_recursive>
 80048aa:	e7e9      	b.n	8004880 <_vfiprintf_r+0x4c>
 80048ac:	2300      	movs	r3, #0
 80048ae:	9309      	str	r3, [sp, #36]	; 0x24
 80048b0:	2320      	movs	r3, #32
 80048b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ba:	2330      	movs	r3, #48	; 0x30
 80048bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a80 <_vfiprintf_r+0x24c>
 80048c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048c4:	f04f 0901 	mov.w	r9, #1
 80048c8:	4623      	mov	r3, r4
 80048ca:	469a      	mov	sl, r3
 80048cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048d0:	b10a      	cbz	r2, 80048d6 <_vfiprintf_r+0xa2>
 80048d2:	2a25      	cmp	r2, #37	; 0x25
 80048d4:	d1f9      	bne.n	80048ca <_vfiprintf_r+0x96>
 80048d6:	ebba 0b04 	subs.w	fp, sl, r4
 80048da:	d00b      	beq.n	80048f4 <_vfiprintf_r+0xc0>
 80048dc:	465b      	mov	r3, fp
 80048de:	4622      	mov	r2, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff ff93 	bl	800480e <__sfputs_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	f000 80aa 	beq.w	8004a42 <_vfiprintf_r+0x20e>
 80048ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048f0:	445a      	add	r2, fp
 80048f2:	9209      	str	r2, [sp, #36]	; 0x24
 80048f4:	f89a 3000 	ldrb.w	r3, [sl]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a2 	beq.w	8004a42 <_vfiprintf_r+0x20e>
 80048fe:	2300      	movs	r3, #0
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004908:	f10a 0a01 	add.w	sl, sl, #1
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004914:	931a      	str	r3, [sp, #104]	; 0x68
 8004916:	4654      	mov	r4, sl
 8004918:	2205      	movs	r2, #5
 800491a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491e:	4858      	ldr	r0, [pc, #352]	; (8004a80 <_vfiprintf_r+0x24c>)
 8004920:	f7fb fc5e 	bl	80001e0 <memchr>
 8004924:	9a04      	ldr	r2, [sp, #16]
 8004926:	b9d8      	cbnz	r0, 8004960 <_vfiprintf_r+0x12c>
 8004928:	06d1      	lsls	r1, r2, #27
 800492a:	bf44      	itt	mi
 800492c:	2320      	movmi	r3, #32
 800492e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004932:	0713      	lsls	r3, r2, #28
 8004934:	bf44      	itt	mi
 8004936:	232b      	movmi	r3, #43	; 0x2b
 8004938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800493c:	f89a 3000 	ldrb.w	r3, [sl]
 8004940:	2b2a      	cmp	r3, #42	; 0x2a
 8004942:	d015      	beq.n	8004970 <_vfiprintf_r+0x13c>
 8004944:	9a07      	ldr	r2, [sp, #28]
 8004946:	4654      	mov	r4, sl
 8004948:	2000      	movs	r0, #0
 800494a:	f04f 0c0a 	mov.w	ip, #10
 800494e:	4621      	mov	r1, r4
 8004950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004954:	3b30      	subs	r3, #48	; 0x30
 8004956:	2b09      	cmp	r3, #9
 8004958:	d94e      	bls.n	80049f8 <_vfiprintf_r+0x1c4>
 800495a:	b1b0      	cbz	r0, 800498a <_vfiprintf_r+0x156>
 800495c:	9207      	str	r2, [sp, #28]
 800495e:	e014      	b.n	800498a <_vfiprintf_r+0x156>
 8004960:	eba0 0308 	sub.w	r3, r0, r8
 8004964:	fa09 f303 	lsl.w	r3, r9, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	46a2      	mov	sl, r4
 800496e:	e7d2      	b.n	8004916 <_vfiprintf_r+0xe2>
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	1d19      	adds	r1, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	9103      	str	r1, [sp, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	bfbb      	ittet	lt
 800497c:	425b      	neglt	r3, r3
 800497e:	f042 0202 	orrlt.w	r2, r2, #2
 8004982:	9307      	strge	r3, [sp, #28]
 8004984:	9307      	strlt	r3, [sp, #28]
 8004986:	bfb8      	it	lt
 8004988:	9204      	strlt	r2, [sp, #16]
 800498a:	7823      	ldrb	r3, [r4, #0]
 800498c:	2b2e      	cmp	r3, #46	; 0x2e
 800498e:	d10c      	bne.n	80049aa <_vfiprintf_r+0x176>
 8004990:	7863      	ldrb	r3, [r4, #1]
 8004992:	2b2a      	cmp	r3, #42	; 0x2a
 8004994:	d135      	bne.n	8004a02 <_vfiprintf_r+0x1ce>
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	9203      	str	r2, [sp, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfb8      	it	lt
 80049a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80049a6:	3402      	adds	r4, #2
 80049a8:	9305      	str	r3, [sp, #20]
 80049aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a90 <_vfiprintf_r+0x25c>
 80049ae:	7821      	ldrb	r1, [r4, #0]
 80049b0:	2203      	movs	r2, #3
 80049b2:	4650      	mov	r0, sl
 80049b4:	f7fb fc14 	bl	80001e0 <memchr>
 80049b8:	b140      	cbz	r0, 80049cc <_vfiprintf_r+0x198>
 80049ba:	2340      	movs	r3, #64	; 0x40
 80049bc:	eba0 000a 	sub.w	r0, r0, sl
 80049c0:	fa03 f000 	lsl.w	r0, r3, r0
 80049c4:	9b04      	ldr	r3, [sp, #16]
 80049c6:	4303      	orrs	r3, r0
 80049c8:	3401      	adds	r4, #1
 80049ca:	9304      	str	r3, [sp, #16]
 80049cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d0:	482c      	ldr	r0, [pc, #176]	; (8004a84 <_vfiprintf_r+0x250>)
 80049d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049d6:	2206      	movs	r2, #6
 80049d8:	f7fb fc02 	bl	80001e0 <memchr>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d03f      	beq.n	8004a60 <_vfiprintf_r+0x22c>
 80049e0:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <_vfiprintf_r+0x254>)
 80049e2:	bb1b      	cbnz	r3, 8004a2c <_vfiprintf_r+0x1f8>
 80049e4:	9b03      	ldr	r3, [sp, #12]
 80049e6:	3307      	adds	r3, #7
 80049e8:	f023 0307 	bic.w	r3, r3, #7
 80049ec:	3308      	adds	r3, #8
 80049ee:	9303      	str	r3, [sp, #12]
 80049f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f2:	443b      	add	r3, r7
 80049f4:	9309      	str	r3, [sp, #36]	; 0x24
 80049f6:	e767      	b.n	80048c8 <_vfiprintf_r+0x94>
 80049f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049fc:	460c      	mov	r4, r1
 80049fe:	2001      	movs	r0, #1
 8004a00:	e7a5      	b.n	800494e <_vfiprintf_r+0x11a>
 8004a02:	2300      	movs	r3, #0
 8004a04:	3401      	adds	r4, #1
 8004a06:	9305      	str	r3, [sp, #20]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f04f 0c0a 	mov.w	ip, #10
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a14:	3a30      	subs	r2, #48	; 0x30
 8004a16:	2a09      	cmp	r2, #9
 8004a18:	d903      	bls.n	8004a22 <_vfiprintf_r+0x1ee>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0c5      	beq.n	80049aa <_vfiprintf_r+0x176>
 8004a1e:	9105      	str	r1, [sp, #20]
 8004a20:	e7c3      	b.n	80049aa <_vfiprintf_r+0x176>
 8004a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a26:	4604      	mov	r4, r0
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e7f0      	b.n	8004a0e <_vfiprintf_r+0x1da>
 8004a2c:	ab03      	add	r3, sp, #12
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <_vfiprintf_r+0x258>)
 8004a34:	a904      	add	r1, sp, #16
 8004a36:	4630      	mov	r0, r6
 8004a38:	f3af 8000 	nop.w
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	1c78      	adds	r0, r7, #1
 8004a40:	d1d6      	bne.n	80049f0 <_vfiprintf_r+0x1bc>
 8004a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a44:	07d9      	lsls	r1, r3, #31
 8004a46:	d405      	bmi.n	8004a54 <_vfiprintf_r+0x220>
 8004a48:	89ab      	ldrh	r3, [r5, #12]
 8004a4a:	059a      	lsls	r2, r3, #22
 8004a4c:	d402      	bmi.n	8004a54 <_vfiprintf_r+0x220>
 8004a4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a50:	f000 fc45 	bl	80052de <__retarget_lock_release_recursive>
 8004a54:	89ab      	ldrh	r3, [r5, #12]
 8004a56:	065b      	lsls	r3, r3, #25
 8004a58:	f53f af12 	bmi.w	8004880 <_vfiprintf_r+0x4c>
 8004a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a5e:	e711      	b.n	8004884 <_vfiprintf_r+0x50>
 8004a60:	ab03      	add	r3, sp, #12
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	462a      	mov	r2, r5
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <_vfiprintf_r+0x258>)
 8004a68:	a904      	add	r1, sp, #16
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f880 	bl	8004b70 <_printf_i>
 8004a70:	e7e4      	b.n	8004a3c <_vfiprintf_r+0x208>
 8004a72:	bf00      	nop
 8004a74:	08005ad4 	.word	0x08005ad4
 8004a78:	08005af4 	.word	0x08005af4
 8004a7c:	08005ab4 	.word	0x08005ab4
 8004a80:	08005a7e 	.word	0x08005a7e
 8004a84:	08005a88 	.word	0x08005a88
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	0800480f 	.word	0x0800480f
 8004a90:	08005a84 	.word	0x08005a84

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4699      	mov	r9, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfb8      	it	lt
 8004aa8:	4613      	movlt	r3, r2
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc26      	bgt.n	8004b2a <_printf_common+0x96>
 8004adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae0:	1e13      	subs	r3, r2, #0
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d42b      	bmi.n	8004b44 <_printf_common+0xb0>
 8004aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af0:	4649      	mov	r1, r9
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c0      	blx	r8
 8004af6:	3001      	adds	r0, #1
 8004af8:	d01e      	beq.n	8004b38 <_printf_common+0xa4>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	68e5      	ldr	r5, [r4, #12]
 8004afe:	6832      	ldr	r2, [r6, #0]
 8004b00:	f003 0306 	and.w	r3, r3, #6
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	bf08      	it	eq
 8004b08:	1aad      	subeq	r5, r5, r2
 8004b0a:	68a3      	ldr	r3, [r4, #8]
 8004b0c:	6922      	ldr	r2, [r4, #16]
 8004b0e:	bf0c      	ite	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	2500      	movne	r5, #0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfc4      	itt	gt
 8004b1a:	1a9b      	subgt	r3, r3, r2
 8004b1c:	18ed      	addgt	r5, r5, r3
 8004b1e:	2600      	movs	r6, #0
 8004b20:	341a      	adds	r4, #26
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d11a      	bne.n	8004b5c <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <_printf_common+0xa8>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4638      	mov	r0, r7
 8004b32:	47c0      	blx	r8
 8004b34:	3001      	adds	r0, #1
 8004b36:	d103      	bne.n	8004b40 <_printf_common+0xac>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7c6      	b.n	8004ad2 <_printf_common+0x3e>
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	2030      	movs	r0, #48	; 0x30
 8004b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4e:	4422      	add	r2, r4
 8004b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7c7      	b.n	8004aec <_printf_common+0x58>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7d9      	b.n	8004b22 <_printf_common+0x8e>
	...

08004b70 <_printf_i>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	4691      	mov	r9, r2
 8004b78:	7e27      	ldrb	r7, [r4, #24]
 8004b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b7c:	2f78      	cmp	r7, #120	; 0x78
 8004b7e:	4680      	mov	r8, r0
 8004b80:	469a      	mov	sl, r3
 8004b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b86:	d807      	bhi.n	8004b98 <_printf_i+0x28>
 8004b88:	2f62      	cmp	r7, #98	; 0x62
 8004b8a:	d80a      	bhi.n	8004ba2 <_printf_i+0x32>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	f000 80d8 	beq.w	8004d42 <_printf_i+0x1d2>
 8004b92:	2f58      	cmp	r7, #88	; 0x58
 8004b94:	f000 80a3 	beq.w	8004cde <_printf_i+0x16e>
 8004b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba0:	e03a      	b.n	8004c18 <_printf_i+0xa8>
 8004ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d8f6      	bhi.n	8004b98 <_printf_i+0x28>
 8004baa:	a001      	add	r0, pc, #4	; (adr r0, 8004bb0 <_printf_i+0x40>)
 8004bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004b99 	.word	0x08004b99
 8004bbc:	08004b99 	.word	0x08004b99
 8004bc0:	08004b99 	.word	0x08004b99
 8004bc4:	08004b99 	.word	0x08004b99
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b99 	.word	0x08004b99
 8004bd0:	08004b99 	.word	0x08004b99
 8004bd4:	08004b99 	.word	0x08004b99
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08004d29 	.word	0x08004d29
 8004be0:	08004c4d 	.word	0x08004c4d
 8004be4:	08004d0b 	.word	0x08004d0b
 8004be8:	08004b99 	.word	0x08004b99
 8004bec:	08004b99 	.word	0x08004b99
 8004bf0:	08004d4b 	.word	0x08004d4b
 8004bf4:	08004b99 	.word	0x08004b99
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004b99 	.word	0x08004b99
 8004c00:	08004b99 	.word	0x08004b99
 8004c04:	08004d13 	.word	0x08004d13
 8004c08:	680b      	ldr	r3, [r1, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	600a      	str	r2, [r1, #0]
 8004c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0a3      	b.n	8004d64 <_printf_i+0x1f4>
 8004c1c:	6825      	ldr	r5, [r4, #0]
 8004c1e:	6808      	ldr	r0, [r1, #0]
 8004c20:	062e      	lsls	r6, r5, #24
 8004c22:	f100 0304 	add.w	r3, r0, #4
 8004c26:	d50a      	bpl.n	8004c3e <_printf_i+0xce>
 8004c28:	6805      	ldr	r5, [r0, #0]
 8004c2a:	600b      	str	r3, [r1, #0]
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	da03      	bge.n	8004c38 <_printf_i+0xc8>
 8004c30:	232d      	movs	r3, #45	; 0x2d
 8004c32:	426d      	negs	r5, r5
 8004c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c38:	485e      	ldr	r0, [pc, #376]	; (8004db4 <_printf_i+0x244>)
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	e019      	b.n	8004c72 <_printf_i+0x102>
 8004c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c42:	6805      	ldr	r5, [r0, #0]
 8004c44:	600b      	str	r3, [r1, #0]
 8004c46:	bf18      	it	ne
 8004c48:	b22d      	sxthne	r5, r5
 8004c4a:	e7ef      	b.n	8004c2c <_printf_i+0xbc>
 8004c4c:	680b      	ldr	r3, [r1, #0]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	1d18      	adds	r0, r3, #4
 8004c52:	6008      	str	r0, [r1, #0]
 8004c54:	0628      	lsls	r0, r5, #24
 8004c56:	d501      	bpl.n	8004c5c <_printf_i+0xec>
 8004c58:	681d      	ldr	r5, [r3, #0]
 8004c5a:	e002      	b.n	8004c62 <_printf_i+0xf2>
 8004c5c:	0669      	lsls	r1, r5, #25
 8004c5e:	d5fb      	bpl.n	8004c58 <_printf_i+0xe8>
 8004c60:	881d      	ldrh	r5, [r3, #0]
 8004c62:	4854      	ldr	r0, [pc, #336]	; (8004db4 <_printf_i+0x244>)
 8004c64:	2f6f      	cmp	r7, #111	; 0x6f
 8004c66:	bf0c      	ite	eq
 8004c68:	2308      	moveq	r3, #8
 8004c6a:	230a      	movne	r3, #10
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c72:	6866      	ldr	r6, [r4, #4]
 8004c74:	60a6      	str	r6, [r4, #8]
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	bfa2      	ittt	ge
 8004c7a:	6821      	ldrge	r1, [r4, #0]
 8004c7c:	f021 0104 	bicge.w	r1, r1, #4
 8004c80:	6021      	strge	r1, [r4, #0]
 8004c82:	b90d      	cbnz	r5, 8004c88 <_printf_i+0x118>
 8004c84:	2e00      	cmp	r6, #0
 8004c86:	d04d      	beq.n	8004d24 <_printf_i+0x1b4>
 8004c88:	4616      	mov	r6, r2
 8004c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c92:	5dc7      	ldrb	r7, [r0, r7]
 8004c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c98:	462f      	mov	r7, r5
 8004c9a:	42bb      	cmp	r3, r7
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	d9f4      	bls.n	8004c8a <_printf_i+0x11a>
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d10b      	bne.n	8004cbc <_printf_i+0x14c>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	07df      	lsls	r7, r3, #31
 8004ca8:	d508      	bpl.n	8004cbc <_printf_i+0x14c>
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	6861      	ldr	r1, [r4, #4]
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	bfde      	ittt	le
 8004cb2:	2330      	movle	r3, #48	; 0x30
 8004cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cbc:	1b92      	subs	r2, r2, r6
 8004cbe:	6122      	str	r2, [r4, #16]
 8004cc0:	f8cd a000 	str.w	sl, [sp]
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	aa03      	add	r2, sp, #12
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f7ff fee2 	bl	8004a94 <_printf_common>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d14c      	bne.n	8004d6e <_printf_i+0x1fe>
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	b004      	add	sp, #16
 8004cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cde:	4835      	ldr	r0, [pc, #212]	; (8004db4 <_printf_i+0x244>)
 8004ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	680e      	ldr	r6, [r1, #0]
 8004ce8:	061f      	lsls	r7, r3, #24
 8004cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cee:	600e      	str	r6, [r1, #0]
 8004cf0:	d514      	bpl.n	8004d1c <_printf_i+0x1ac>
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	bf44      	itt	mi
 8004cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfa:	6023      	strmi	r3, [r4, #0]
 8004cfc:	b91d      	cbnz	r5, 8004d06 <_printf_i+0x196>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	f023 0320 	bic.w	r3, r3, #32
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	2310      	movs	r3, #16
 8004d08:	e7b0      	b.n	8004c6c <_printf_i+0xfc>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	2378      	movs	r3, #120	; 0x78
 8004d14:	4828      	ldr	r0, [pc, #160]	; (8004db8 <_printf_i+0x248>)
 8004d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d1a:	e7e3      	b.n	8004ce4 <_printf_i+0x174>
 8004d1c:	065e      	lsls	r6, r3, #25
 8004d1e:	bf48      	it	mi
 8004d20:	b2ad      	uxthmi	r5, r5
 8004d22:	e7e6      	b.n	8004cf2 <_printf_i+0x182>
 8004d24:	4616      	mov	r6, r2
 8004d26:	e7bb      	b.n	8004ca0 <_printf_i+0x130>
 8004d28:	680b      	ldr	r3, [r1, #0]
 8004d2a:	6826      	ldr	r6, [r4, #0]
 8004d2c:	6960      	ldr	r0, [r4, #20]
 8004d2e:	1d1d      	adds	r5, r3, #4
 8004d30:	600d      	str	r5, [r1, #0]
 8004d32:	0635      	lsls	r5, r6, #24
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0x1cc>
 8004d38:	6018      	str	r0, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <_printf_i+0x1d2>
 8004d3c:	0671      	lsls	r1, r6, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0x1c8>
 8004d40:	8018      	strh	r0, [r3, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	4616      	mov	r6, r2
 8004d48:	e7ba      	b.n	8004cc0 <_printf_i+0x150>
 8004d4a:	680b      	ldr	r3, [r1, #0]
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	600a      	str	r2, [r1, #0]
 8004d50:	681e      	ldr	r6, [r3, #0]
 8004d52:	6862      	ldr	r2, [r4, #4]
 8004d54:	2100      	movs	r1, #0
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7fb fa42 	bl	80001e0 <memchr>
 8004d5c:	b108      	cbz	r0, 8004d62 <_printf_i+0x1f2>
 8004d5e:	1b80      	subs	r0, r0, r6
 8004d60:	6060      	str	r0, [r4, #4]
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	2300      	movs	r3, #0
 8004d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d6c:	e7a8      	b.n	8004cc0 <_printf_i+0x150>
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	4632      	mov	r2, r6
 8004d72:	4649      	mov	r1, r9
 8004d74:	4640      	mov	r0, r8
 8004d76:	47d0      	blx	sl
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d0ab      	beq.n	8004cd4 <_printf_i+0x164>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	079b      	lsls	r3, r3, #30
 8004d80:	d413      	bmi.n	8004daa <_printf_i+0x23a>
 8004d82:	68e0      	ldr	r0, [r4, #12]
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	4298      	cmp	r0, r3
 8004d88:	bfb8      	it	lt
 8004d8a:	4618      	movlt	r0, r3
 8004d8c:	e7a4      	b.n	8004cd8 <_printf_i+0x168>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4632      	mov	r2, r6
 8004d92:	4649      	mov	r1, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	47d0      	blx	sl
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d09b      	beq.n	8004cd4 <_printf_i+0x164>
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	9903      	ldr	r1, [sp, #12]
 8004da2:	1a5b      	subs	r3, r3, r1
 8004da4:	42ab      	cmp	r3, r5
 8004da6:	dcf2      	bgt.n	8004d8e <_printf_i+0x21e>
 8004da8:	e7eb      	b.n	8004d82 <_printf_i+0x212>
 8004daa:	2500      	movs	r5, #0
 8004dac:	f104 0619 	add.w	r6, r4, #25
 8004db0:	e7f5      	b.n	8004d9e <_printf_i+0x22e>
 8004db2:	bf00      	nop
 8004db4:	08005a8f 	.word	0x08005a8f
 8004db8:	08005aa0 	.word	0x08005aa0

08004dbc <_sbrk_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	; (8004dd8 <_sbrk_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fc f9e2 	bl	8001190 <_sbrk>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_sbrk_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_sbrk_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	2000028c 	.word	0x2000028c

08004ddc <__swbuf_r>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	460e      	mov	r6, r1
 8004de0:	4614      	mov	r4, r2
 8004de2:	4605      	mov	r5, r0
 8004de4:	b118      	cbz	r0, 8004dee <__swbuf_r+0x12>
 8004de6:	6983      	ldr	r3, [r0, #24]
 8004de8:	b90b      	cbnz	r3, 8004dee <__swbuf_r+0x12>
 8004dea:	f000 f9d9 	bl	80051a0 <__sinit>
 8004dee:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <__swbuf_r+0x98>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	d12b      	bne.n	8004e4c <__swbuf_r+0x70>
 8004df4:	686c      	ldr	r4, [r5, #4]
 8004df6:	69a3      	ldr	r3, [r4, #24]
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	071a      	lsls	r2, r3, #28
 8004dfe:	d52f      	bpl.n	8004e60 <__swbuf_r+0x84>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	b36b      	cbz	r3, 8004e60 <__swbuf_r+0x84>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	1ac0      	subs	r0, r0, r3
 8004e0a:	6963      	ldr	r3, [r4, #20]
 8004e0c:	b2f6      	uxtb	r6, r6
 8004e0e:	4283      	cmp	r3, r0
 8004e10:	4637      	mov	r7, r6
 8004e12:	dc04      	bgt.n	8004e1e <__swbuf_r+0x42>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 f92e 	bl	8005078 <_fflush_r>
 8004e1c:	bb30      	cbnz	r0, 8004e6c <__swbuf_r+0x90>
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60a3      	str	r3, [r4, #8]
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	6022      	str	r2, [r4, #0]
 8004e2a:	701e      	strb	r6, [r3, #0]
 8004e2c:	6963      	ldr	r3, [r4, #20]
 8004e2e:	3001      	adds	r0, #1
 8004e30:	4283      	cmp	r3, r0
 8004e32:	d004      	beq.n	8004e3e <__swbuf_r+0x62>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	07db      	lsls	r3, r3, #31
 8004e38:	d506      	bpl.n	8004e48 <__swbuf_r+0x6c>
 8004e3a:	2e0a      	cmp	r6, #10
 8004e3c:	d104      	bne.n	8004e48 <__swbuf_r+0x6c>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 f919 	bl	8005078 <_fflush_r>
 8004e46:	b988      	cbnz	r0, 8004e6c <__swbuf_r+0x90>
 8004e48:	4638      	mov	r0, r7
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <__swbuf_r+0x9c>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <__swbuf_r+0x7a>
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	e7cf      	b.n	8004df6 <__swbuf_r+0x1a>
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <__swbuf_r+0xa0>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68ec      	ldreq	r4, [r5, #12]
 8004e5e:	e7ca      	b.n	8004df6 <__swbuf_r+0x1a>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 f80c 	bl	8004e80 <__swsetup_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d0cb      	beq.n	8004e04 <__swbuf_r+0x28>
 8004e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e70:	e7ea      	b.n	8004e48 <__swbuf_r+0x6c>
 8004e72:	bf00      	nop
 8004e74:	08005ad4 	.word	0x08005ad4
 8004e78:	08005af4 	.word	0x08005af4
 8004e7c:	08005ab4 	.word	0x08005ab4

08004e80 <__swsetup_r>:
 8004e80:	4b32      	ldr	r3, [pc, #200]	; (8004f4c <__swsetup_r+0xcc>)
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	681d      	ldr	r5, [r3, #0]
 8004e86:	4606      	mov	r6, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	b125      	cbz	r5, 8004e96 <__swsetup_r+0x16>
 8004e8c:	69ab      	ldr	r3, [r5, #24]
 8004e8e:	b913      	cbnz	r3, 8004e96 <__swsetup_r+0x16>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 f985 	bl	80051a0 <__sinit>
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <__swsetup_r+0xd0>)
 8004e98:	429c      	cmp	r4, r3
 8004e9a:	d10f      	bne.n	8004ebc <__swsetup_r+0x3c>
 8004e9c:	686c      	ldr	r4, [r5, #4]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	d42c      	bmi.n	8004f02 <__swsetup_r+0x82>
 8004ea8:	06dd      	lsls	r5, r3, #27
 8004eaa:	d411      	bmi.n	8004ed0 <__swsetup_r+0x50>
 8004eac:	2309      	movs	r3, #9
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	e03e      	b.n	8004f3a <__swsetup_r+0xba>
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <__swsetup_r+0xd4>)
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d101      	bne.n	8004ec6 <__swsetup_r+0x46>
 8004ec2:	68ac      	ldr	r4, [r5, #8]
 8004ec4:	e7eb      	b.n	8004e9e <__swsetup_r+0x1e>
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <__swsetup_r+0xd8>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	bf08      	it	eq
 8004ecc:	68ec      	ldreq	r4, [r5, #12]
 8004ece:	e7e6      	b.n	8004e9e <__swsetup_r+0x1e>
 8004ed0:	0758      	lsls	r0, r3, #29
 8004ed2:	d512      	bpl.n	8004efa <__swsetup_r+0x7a>
 8004ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed6:	b141      	cbz	r1, 8004eea <__swsetup_r+0x6a>
 8004ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <__swsetup_r+0x66>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7ff fa77 	bl	80043d4 <_free_r>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	b94b      	cbnz	r3, 8004f1a <__swsetup_r+0x9a>
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d003      	beq.n	8004f1a <__swsetup_r+0x9a>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 fa07 	bl	8005328 <__smakebuf_r>
 8004f1a:	89a0      	ldrh	r0, [r4, #12]
 8004f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f20:	f010 0301 	ands.w	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <__swsetup_r+0xbc>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	6963      	ldr	r3, [r4, #20]
 8004f2c:	425b      	negs	r3, r3
 8004f2e:	61a3      	str	r3, [r4, #24]
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b943      	cbnz	r3, 8004f46 <__swsetup_r+0xc6>
 8004f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f38:	d1ba      	bne.n	8004eb0 <__swsetup_r+0x30>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	0781      	lsls	r1, r0, #30
 8004f3e:	bf58      	it	pl
 8004f40:	6963      	ldrpl	r3, [r4, #20]
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	e7f4      	b.n	8004f30 <__swsetup_r+0xb0>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e7f7      	b.n	8004f3a <__swsetup_r+0xba>
 8004f4a:	bf00      	nop
 8004f4c:	2000003c 	.word	0x2000003c
 8004f50:	08005ad4 	.word	0x08005ad4
 8004f54:	08005af4 	.word	0x08005af4
 8004f58:	08005ab4 	.word	0x08005ab4

08004f5c <abort>:
 8004f5c:	b508      	push	{r3, lr}
 8004f5e:	2006      	movs	r0, #6
 8004f60:	f000 faa4 	bl	80054ac <raise>
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fc f89b 	bl	80010a0 <_exit>
	...

08004f6c <__sflush_r>:
 8004f6c:	898a      	ldrh	r2, [r1, #12]
 8004f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	4605      	mov	r5, r0
 8004f74:	0710      	lsls	r0, r2, #28
 8004f76:	460c      	mov	r4, r1
 8004f78:	d458      	bmi.n	800502c <__sflush_r+0xc0>
 8004f7a:	684b      	ldr	r3, [r1, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	dc05      	bgt.n	8004f8c <__sflush_r+0x20>
 8004f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dc02      	bgt.n	8004f8c <__sflush_r+0x20>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d0f9      	beq.n	8004f86 <__sflush_r+0x1a>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f98:	682f      	ldr	r7, [r5, #0]
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	d032      	beq.n	8005004 <__sflush_r+0x98>
 8004f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	075a      	lsls	r2, r3, #29
 8004fa4:	d505      	bpl.n	8004fb2 <__sflush_r+0x46>
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fac:	b10b      	cbz	r3, 8004fb2 <__sflush_r+0x46>
 8004fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb0:	1ac0      	subs	r0, r0, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fb8:	6a21      	ldr	r1, [r4, #32]
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b0      	blx	r6
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	d106      	bne.n	8004fd2 <__sflush_r+0x66>
 8004fc4:	6829      	ldr	r1, [r5, #0]
 8004fc6:	291d      	cmp	r1, #29
 8004fc8:	d82c      	bhi.n	8005024 <__sflush_r+0xb8>
 8004fca:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <__sflush_r+0x108>)
 8004fcc:	40ca      	lsrs	r2, r1
 8004fce:	07d6      	lsls	r6, r2, #31
 8004fd0:	d528      	bpl.n	8005024 <__sflush_r+0xb8>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	6062      	str	r2, [r4, #4]
 8004fd6:	04d9      	lsls	r1, r3, #19
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	6022      	str	r2, [r4, #0]
 8004fdc:	d504      	bpl.n	8004fe8 <__sflush_r+0x7c>
 8004fde:	1c42      	adds	r2, r0, #1
 8004fe0:	d101      	bne.n	8004fe6 <__sflush_r+0x7a>
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	b903      	cbnz	r3, 8004fe8 <__sflush_r+0x7c>
 8004fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8004fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fea:	602f      	str	r7, [r5, #0]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d0ca      	beq.n	8004f86 <__sflush_r+0x1a>
 8004ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	d002      	beq.n	8004ffe <__sflush_r+0x92>
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7ff f9eb 	bl	80043d4 <_free_r>
 8004ffe:	2000      	movs	r0, #0
 8005000:	6360      	str	r0, [r4, #52]	; 0x34
 8005002:	e7c1      	b.n	8004f88 <__sflush_r+0x1c>
 8005004:	6a21      	ldr	r1, [r4, #32]
 8005006:	2301      	movs	r3, #1
 8005008:	4628      	mov	r0, r5
 800500a:	47b0      	blx	r6
 800500c:	1c41      	adds	r1, r0, #1
 800500e:	d1c7      	bne.n	8004fa0 <__sflush_r+0x34>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0c4      	beq.n	8004fa0 <__sflush_r+0x34>
 8005016:	2b1d      	cmp	r3, #29
 8005018:	d001      	beq.n	800501e <__sflush_r+0xb2>
 800501a:	2b16      	cmp	r3, #22
 800501c:	d101      	bne.n	8005022 <__sflush_r+0xb6>
 800501e:	602f      	str	r7, [r5, #0]
 8005020:	e7b1      	b.n	8004f86 <__sflush_r+0x1a>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	e7ad      	b.n	8004f88 <__sflush_r+0x1c>
 800502c:	690f      	ldr	r7, [r1, #16]
 800502e:	2f00      	cmp	r7, #0
 8005030:	d0a9      	beq.n	8004f86 <__sflush_r+0x1a>
 8005032:	0793      	lsls	r3, r2, #30
 8005034:	680e      	ldr	r6, [r1, #0]
 8005036:	bf08      	it	eq
 8005038:	694b      	ldreq	r3, [r1, #20]
 800503a:	600f      	str	r7, [r1, #0]
 800503c:	bf18      	it	ne
 800503e:	2300      	movne	r3, #0
 8005040:	eba6 0807 	sub.w	r8, r6, r7
 8005044:	608b      	str	r3, [r1, #8]
 8005046:	f1b8 0f00 	cmp.w	r8, #0
 800504a:	dd9c      	ble.n	8004f86 <__sflush_r+0x1a>
 800504c:	6a21      	ldr	r1, [r4, #32]
 800504e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005050:	4643      	mov	r3, r8
 8005052:	463a      	mov	r2, r7
 8005054:	4628      	mov	r0, r5
 8005056:	47b0      	blx	r6
 8005058:	2800      	cmp	r0, #0
 800505a:	dc06      	bgt.n	800506a <__sflush_r+0xfe>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	e78e      	b.n	8004f88 <__sflush_r+0x1c>
 800506a:	4407      	add	r7, r0
 800506c:	eba8 0800 	sub.w	r8, r8, r0
 8005070:	e7e9      	b.n	8005046 <__sflush_r+0xda>
 8005072:	bf00      	nop
 8005074:	20400001 	.word	0x20400001

08005078 <_fflush_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	4605      	mov	r5, r0
 800507e:	460c      	mov	r4, r1
 8005080:	b913      	cbnz	r3, 8005088 <_fflush_r+0x10>
 8005082:	2500      	movs	r5, #0
 8005084:	4628      	mov	r0, r5
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	b118      	cbz	r0, 8005092 <_fflush_r+0x1a>
 800508a:	6983      	ldr	r3, [r0, #24]
 800508c:	b90b      	cbnz	r3, 8005092 <_fflush_r+0x1a>
 800508e:	f000 f887 	bl	80051a0 <__sinit>
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <_fflush_r+0x6c>)
 8005094:	429c      	cmp	r4, r3
 8005096:	d11b      	bne.n	80050d0 <_fflush_r+0x58>
 8005098:	686c      	ldr	r4, [r5, #4]
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ef      	beq.n	8005082 <_fflush_r+0xa>
 80050a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d404      	bmi.n	80050b2 <_fflush_r+0x3a>
 80050a8:	0599      	lsls	r1, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <_fflush_r+0x3a>
 80050ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ae:	f000 f915 	bl	80052dc <__retarget_lock_acquire_recursive>
 80050b2:	4628      	mov	r0, r5
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7ff ff59 	bl	8004f6c <__sflush_r>
 80050ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050bc:	07da      	lsls	r2, r3, #31
 80050be:	4605      	mov	r5, r0
 80050c0:	d4e0      	bmi.n	8005084 <_fflush_r+0xc>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	059b      	lsls	r3, r3, #22
 80050c6:	d4dd      	bmi.n	8005084 <_fflush_r+0xc>
 80050c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ca:	f000 f908 	bl	80052de <__retarget_lock_release_recursive>
 80050ce:	e7d9      	b.n	8005084 <_fflush_r+0xc>
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <_fflush_r+0x70>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d101      	bne.n	80050da <_fflush_r+0x62>
 80050d6:	68ac      	ldr	r4, [r5, #8]
 80050d8:	e7df      	b.n	800509a <_fflush_r+0x22>
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <_fflush_r+0x74>)
 80050dc:	429c      	cmp	r4, r3
 80050de:	bf08      	it	eq
 80050e0:	68ec      	ldreq	r4, [r5, #12]
 80050e2:	e7da      	b.n	800509a <_fflush_r+0x22>
 80050e4:	08005ad4 	.word	0x08005ad4
 80050e8:	08005af4 	.word	0x08005af4
 80050ec:	08005ab4 	.word	0x08005ab4

080050f0 <std>:
 80050f0:	2300      	movs	r3, #0
 80050f2:	b510      	push	{r4, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	e9c0 3300 	strd	r3, r3, [r0]
 80050fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050fe:	6083      	str	r3, [r0, #8]
 8005100:	8181      	strh	r1, [r0, #12]
 8005102:	6643      	str	r3, [r0, #100]	; 0x64
 8005104:	81c2      	strh	r2, [r0, #14]
 8005106:	6183      	str	r3, [r0, #24]
 8005108:	4619      	mov	r1, r3
 800510a:	2208      	movs	r2, #8
 800510c:	305c      	adds	r0, #92	; 0x5c
 800510e:	f7ff f8c1 	bl	8004294 <memset>
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x38>)
 8005114:	6263      	str	r3, [r4, #36]	; 0x24
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <std+0x3c>)
 8005118:	62a3      	str	r3, [r4, #40]	; 0x28
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <std+0x40>)
 800511c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <std+0x44>)
 8005120:	6224      	str	r4, [r4, #32]
 8005122:	6323      	str	r3, [r4, #48]	; 0x30
 8005124:	bd10      	pop	{r4, pc}
 8005126:	bf00      	nop
 8005128:	080054e5 	.word	0x080054e5
 800512c:	08005507 	.word	0x08005507
 8005130:	0800553f 	.word	0x0800553f
 8005134:	08005563 	.word	0x08005563

08005138 <_cleanup_r>:
 8005138:	4901      	ldr	r1, [pc, #4]	; (8005140 <_cleanup_r+0x8>)
 800513a:	f000 b8af 	b.w	800529c <_fwalk_reent>
 800513e:	bf00      	nop
 8005140:	08005079 	.word	0x08005079

08005144 <__sfmoreglue>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	1e4a      	subs	r2, r1, #1
 8005148:	2568      	movs	r5, #104	; 0x68
 800514a:	4355      	muls	r5, r2
 800514c:	460e      	mov	r6, r1
 800514e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005152:	f7ff f98f 	bl	8004474 <_malloc_r>
 8005156:	4604      	mov	r4, r0
 8005158:	b140      	cbz	r0, 800516c <__sfmoreglue+0x28>
 800515a:	2100      	movs	r1, #0
 800515c:	e9c0 1600 	strd	r1, r6, [r0]
 8005160:	300c      	adds	r0, #12
 8005162:	60a0      	str	r0, [r4, #8]
 8005164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005168:	f7ff f894 	bl	8004294 <memset>
 800516c:	4620      	mov	r0, r4
 800516e:	bd70      	pop	{r4, r5, r6, pc}

08005170 <__sfp_lock_acquire>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sfp_lock_acquire+0x8>)
 8005172:	f000 b8b3 	b.w	80052dc <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	20000288 	.word	0x20000288

0800517c <__sfp_lock_release>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sfp_lock_release+0x8>)
 800517e:	f000 b8ae 	b.w	80052de <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	20000288 	.word	0x20000288

08005188 <__sinit_lock_acquire>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sinit_lock_acquire+0x8>)
 800518a:	f000 b8a7 	b.w	80052dc <__retarget_lock_acquire_recursive>
 800518e:	bf00      	nop
 8005190:	20000283 	.word	0x20000283

08005194 <__sinit_lock_release>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sinit_lock_release+0x8>)
 8005196:	f000 b8a2 	b.w	80052de <__retarget_lock_release_recursive>
 800519a:	bf00      	nop
 800519c:	20000283 	.word	0x20000283

080051a0 <__sinit>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4604      	mov	r4, r0
 80051a4:	f7ff fff0 	bl	8005188 <__sinit_lock_acquire>
 80051a8:	69a3      	ldr	r3, [r4, #24]
 80051aa:	b11b      	cbz	r3, 80051b4 <__sinit+0x14>
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f7ff bff0 	b.w	8005194 <__sinit_lock_release>
 80051b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051b8:	6523      	str	r3, [r4, #80]	; 0x50
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <__sinit+0x68>)
 80051bc:	4a13      	ldr	r2, [pc, #76]	; (800520c <__sinit+0x6c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	bf04      	itt	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	61a3      	streq	r3, [r4, #24]
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 f820 	bl	8005210 <__sfp>
 80051d0:	6060      	str	r0, [r4, #4]
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f81c 	bl	8005210 <__sfp>
 80051d8:	60a0      	str	r0, [r4, #8]
 80051da:	4620      	mov	r0, r4
 80051dc:	f000 f818 	bl	8005210 <__sfp>
 80051e0:	2200      	movs	r2, #0
 80051e2:	60e0      	str	r0, [r4, #12]
 80051e4:	2104      	movs	r1, #4
 80051e6:	6860      	ldr	r0, [r4, #4]
 80051e8:	f7ff ff82 	bl	80050f0 <std>
 80051ec:	68a0      	ldr	r0, [r4, #8]
 80051ee:	2201      	movs	r2, #1
 80051f0:	2109      	movs	r1, #9
 80051f2:	f7ff ff7d 	bl	80050f0 <std>
 80051f6:	68e0      	ldr	r0, [r4, #12]
 80051f8:	2202      	movs	r2, #2
 80051fa:	2112      	movs	r1, #18
 80051fc:	f7ff ff78 	bl	80050f0 <std>
 8005200:	2301      	movs	r3, #1
 8005202:	61a3      	str	r3, [r4, #24]
 8005204:	e7d2      	b.n	80051ac <__sinit+0xc>
 8005206:	bf00      	nop
 8005208:	080059c8 	.word	0x080059c8
 800520c:	08005139 	.word	0x08005139

08005210 <__sfp>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	4607      	mov	r7, r0
 8005214:	f7ff ffac 	bl	8005170 <__sfp_lock_acquire>
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <__sfp+0x84>)
 800521a:	681e      	ldr	r6, [r3, #0]
 800521c:	69b3      	ldr	r3, [r6, #24]
 800521e:	b913      	cbnz	r3, 8005226 <__sfp+0x16>
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ffbd 	bl	80051a0 <__sinit>
 8005226:	3648      	adds	r6, #72	; 0x48
 8005228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800522c:	3b01      	subs	r3, #1
 800522e:	d503      	bpl.n	8005238 <__sfp+0x28>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	b30b      	cbz	r3, 8005278 <__sfp+0x68>
 8005234:	6836      	ldr	r6, [r6, #0]
 8005236:	e7f7      	b.n	8005228 <__sfp+0x18>
 8005238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800523c:	b9d5      	cbnz	r5, 8005274 <__sfp+0x64>
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <__sfp+0x88>)
 8005240:	60e3      	str	r3, [r4, #12]
 8005242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005246:	6665      	str	r5, [r4, #100]	; 0x64
 8005248:	f000 f847 	bl	80052da <__retarget_lock_init_recursive>
 800524c:	f7ff ff96 	bl	800517c <__sfp_lock_release>
 8005250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005258:	6025      	str	r5, [r4, #0]
 800525a:	61a5      	str	r5, [r4, #24]
 800525c:	2208      	movs	r2, #8
 800525e:	4629      	mov	r1, r5
 8005260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005264:	f7ff f816 	bl	8004294 <memset>
 8005268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800526c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005270:	4620      	mov	r0, r4
 8005272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005274:	3468      	adds	r4, #104	; 0x68
 8005276:	e7d9      	b.n	800522c <__sfp+0x1c>
 8005278:	2104      	movs	r1, #4
 800527a:	4638      	mov	r0, r7
 800527c:	f7ff ff62 	bl	8005144 <__sfmoreglue>
 8005280:	4604      	mov	r4, r0
 8005282:	6030      	str	r0, [r6, #0]
 8005284:	2800      	cmp	r0, #0
 8005286:	d1d5      	bne.n	8005234 <__sfp+0x24>
 8005288:	f7ff ff78 	bl	800517c <__sfp_lock_release>
 800528c:	230c      	movs	r3, #12
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	e7ee      	b.n	8005270 <__sfp+0x60>
 8005292:	bf00      	nop
 8005294:	080059c8 	.word	0x080059c8
 8005298:	ffff0001 	.word	0xffff0001

0800529c <_fwalk_reent>:
 800529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a0:	4606      	mov	r6, r0
 80052a2:	4688      	mov	r8, r1
 80052a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052a8:	2700      	movs	r7, #0
 80052aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ae:	f1b9 0901 	subs.w	r9, r9, #1
 80052b2:	d505      	bpl.n	80052c0 <_fwalk_reent+0x24>
 80052b4:	6824      	ldr	r4, [r4, #0]
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d1f7      	bne.n	80052aa <_fwalk_reent+0xe>
 80052ba:	4638      	mov	r0, r7
 80052bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d907      	bls.n	80052d6 <_fwalk_reent+0x3a>
 80052c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ca:	3301      	adds	r3, #1
 80052cc:	d003      	beq.n	80052d6 <_fwalk_reent+0x3a>
 80052ce:	4629      	mov	r1, r5
 80052d0:	4630      	mov	r0, r6
 80052d2:	47c0      	blx	r8
 80052d4:	4307      	orrs	r7, r0
 80052d6:	3568      	adds	r5, #104	; 0x68
 80052d8:	e7e9      	b.n	80052ae <_fwalk_reent+0x12>

080052da <__retarget_lock_init_recursive>:
 80052da:	4770      	bx	lr

080052dc <__retarget_lock_acquire_recursive>:
 80052dc:	4770      	bx	lr

080052de <__retarget_lock_release_recursive>:
 80052de:	4770      	bx	lr

080052e0 <__swhatbuf_r>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	460e      	mov	r6, r1
 80052e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e8:	2900      	cmp	r1, #0
 80052ea:	b096      	sub	sp, #88	; 0x58
 80052ec:	4614      	mov	r4, r2
 80052ee:	461d      	mov	r5, r3
 80052f0:	da07      	bge.n	8005302 <__swhatbuf_r+0x22>
 80052f2:	2300      	movs	r3, #0
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	89b3      	ldrh	r3, [r6, #12]
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	d410      	bmi.n	800531e <__swhatbuf_r+0x3e>
 80052fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005300:	e00e      	b.n	8005320 <__swhatbuf_r+0x40>
 8005302:	466a      	mov	r2, sp
 8005304:	f000 f954 	bl	80055b0 <_fstat_r>
 8005308:	2800      	cmp	r0, #0
 800530a:	dbf2      	blt.n	80052f2 <__swhatbuf_r+0x12>
 800530c:	9a01      	ldr	r2, [sp, #4]
 800530e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005316:	425a      	negs	r2, r3
 8005318:	415a      	adcs	r2, r3
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	e7ee      	b.n	80052fc <__swhatbuf_r+0x1c>
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	2000      	movs	r0, #0
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	b016      	add	sp, #88	; 0x58
 8005326:	bd70      	pop	{r4, r5, r6, pc}

08005328 <__smakebuf_r>:
 8005328:	898b      	ldrh	r3, [r1, #12]
 800532a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800532c:	079d      	lsls	r5, r3, #30
 800532e:	4606      	mov	r6, r0
 8005330:	460c      	mov	r4, r1
 8005332:	d507      	bpl.n	8005344 <__smakebuf_r+0x1c>
 8005334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	6123      	str	r3, [r4, #16]
 800533c:	2301      	movs	r3, #1
 800533e:	6163      	str	r3, [r4, #20]
 8005340:	b002      	add	sp, #8
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	ab01      	add	r3, sp, #4
 8005346:	466a      	mov	r2, sp
 8005348:	f7ff ffca 	bl	80052e0 <__swhatbuf_r>
 800534c:	9900      	ldr	r1, [sp, #0]
 800534e:	4605      	mov	r5, r0
 8005350:	4630      	mov	r0, r6
 8005352:	f7ff f88f 	bl	8004474 <_malloc_r>
 8005356:	b948      	cbnz	r0, 800536c <__smakebuf_r+0x44>
 8005358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535c:	059a      	lsls	r2, r3, #22
 800535e:	d4ef      	bmi.n	8005340 <__smakebuf_r+0x18>
 8005360:	f023 0303 	bic.w	r3, r3, #3
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	e7e3      	b.n	8005334 <__smakebuf_r+0xc>
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <__smakebuf_r+0x7c>)
 800536e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	6020      	str	r0, [r4, #0]
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	9b00      	ldr	r3, [sp, #0]
 800537c:	6163      	str	r3, [r4, #20]
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	6120      	str	r0, [r4, #16]
 8005382:	b15b      	cbz	r3, 800539c <__smakebuf_r+0x74>
 8005384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005388:	4630      	mov	r0, r6
 800538a:	f000 f923 	bl	80055d4 <_isatty_r>
 800538e:	b128      	cbz	r0, 800539c <__smakebuf_r+0x74>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	89a0      	ldrh	r0, [r4, #12]
 800539e:	4305      	orrs	r5, r0
 80053a0:	81a5      	strh	r5, [r4, #12]
 80053a2:	e7cd      	b.n	8005340 <__smakebuf_r+0x18>
 80053a4:	08005139 	.word	0x08005139

080053a8 <memcpy>:
 80053a8:	440a      	add	r2, r1
 80053aa:	4291      	cmp	r1, r2
 80053ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b0:	d100      	bne.n	80053b4 <memcpy+0xc>
 80053b2:	4770      	bx	lr
 80053b4:	b510      	push	{r4, lr}
 80053b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053be:	4291      	cmp	r1, r2
 80053c0:	d1f9      	bne.n	80053b6 <memcpy+0xe>
 80053c2:	bd10      	pop	{r4, pc}

080053c4 <memmove>:
 80053c4:	4288      	cmp	r0, r1
 80053c6:	b510      	push	{r4, lr}
 80053c8:	eb01 0402 	add.w	r4, r1, r2
 80053cc:	d902      	bls.n	80053d4 <memmove+0x10>
 80053ce:	4284      	cmp	r4, r0
 80053d0:	4623      	mov	r3, r4
 80053d2:	d807      	bhi.n	80053e4 <memmove+0x20>
 80053d4:	1e43      	subs	r3, r0, #1
 80053d6:	42a1      	cmp	r1, r4
 80053d8:	d008      	beq.n	80053ec <memmove+0x28>
 80053da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053e2:	e7f8      	b.n	80053d6 <memmove+0x12>
 80053e4:	4402      	add	r2, r0
 80053e6:	4601      	mov	r1, r0
 80053e8:	428a      	cmp	r2, r1
 80053ea:	d100      	bne.n	80053ee <memmove+0x2a>
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053f6:	e7f7      	b.n	80053e8 <memmove+0x24>

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_lock+0x8>)
 80053fa:	f7ff bf6f 	b.w	80052dc <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20000284 	.word	0x20000284

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__malloc_unlock+0x8>)
 8005406:	f7ff bf6a 	b.w	80052de <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20000284 	.word	0x20000284

08005410 <_realloc_r>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	4607      	mov	r7, r0
 8005414:	4614      	mov	r4, r2
 8005416:	460e      	mov	r6, r1
 8005418:	b921      	cbnz	r1, 8005424 <_realloc_r+0x14>
 800541a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800541e:	4611      	mov	r1, r2
 8005420:	f7ff b828 	b.w	8004474 <_malloc_r>
 8005424:	b922      	cbnz	r2, 8005430 <_realloc_r+0x20>
 8005426:	f7fe ffd5 	bl	80043d4 <_free_r>
 800542a:	4625      	mov	r5, r4
 800542c:	4628      	mov	r0, r5
 800542e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005430:	f000 f8f2 	bl	8005618 <_malloc_usable_size_r>
 8005434:	42a0      	cmp	r0, r4
 8005436:	d20f      	bcs.n	8005458 <_realloc_r+0x48>
 8005438:	4621      	mov	r1, r4
 800543a:	4638      	mov	r0, r7
 800543c:	f7ff f81a 	bl	8004474 <_malloc_r>
 8005440:	4605      	mov	r5, r0
 8005442:	2800      	cmp	r0, #0
 8005444:	d0f2      	beq.n	800542c <_realloc_r+0x1c>
 8005446:	4631      	mov	r1, r6
 8005448:	4622      	mov	r2, r4
 800544a:	f7ff ffad 	bl	80053a8 <memcpy>
 800544e:	4631      	mov	r1, r6
 8005450:	4638      	mov	r0, r7
 8005452:	f7fe ffbf 	bl	80043d4 <_free_r>
 8005456:	e7e9      	b.n	800542c <_realloc_r+0x1c>
 8005458:	4635      	mov	r5, r6
 800545a:	e7e7      	b.n	800542c <_realloc_r+0x1c>

0800545c <_raise_r>:
 800545c:	291f      	cmp	r1, #31
 800545e:	b538      	push	{r3, r4, r5, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	460d      	mov	r5, r1
 8005464:	d904      	bls.n	8005470 <_raise_r+0x14>
 8005466:	2316      	movs	r3, #22
 8005468:	6003      	str	r3, [r0, #0]
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005472:	b112      	cbz	r2, 800547a <_raise_r+0x1e>
 8005474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005478:	b94b      	cbnz	r3, 800548e <_raise_r+0x32>
 800547a:	4620      	mov	r0, r4
 800547c:	f000 f830 	bl	80054e0 <_getpid_r>
 8005480:	462a      	mov	r2, r5
 8005482:	4601      	mov	r1, r0
 8005484:	4620      	mov	r0, r4
 8005486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548a:	f000 b817 	b.w	80054bc <_kill_r>
 800548e:	2b01      	cmp	r3, #1
 8005490:	d00a      	beq.n	80054a8 <_raise_r+0x4c>
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	d103      	bne.n	800549e <_raise_r+0x42>
 8005496:	2316      	movs	r3, #22
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	2001      	movs	r0, #1
 800549c:	e7e7      	b.n	800546e <_raise_r+0x12>
 800549e:	2400      	movs	r4, #0
 80054a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80054a4:	4628      	mov	r0, r5
 80054a6:	4798      	blx	r3
 80054a8:	2000      	movs	r0, #0
 80054aa:	e7e0      	b.n	800546e <_raise_r+0x12>

080054ac <raise>:
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <raise+0xc>)
 80054ae:	4601      	mov	r1, r0
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	f7ff bfd3 	b.w	800545c <_raise_r>
 80054b6:	bf00      	nop
 80054b8:	2000003c 	.word	0x2000003c

080054bc <_kill_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d07      	ldr	r5, [pc, #28]	; (80054dc <_kill_r+0x20>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	f7fb fdd9 	bl	8001080 <_kill>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d102      	bne.n	80054d8 <_kill_r+0x1c>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	b103      	cbz	r3, 80054d8 <_kill_r+0x1c>
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	bf00      	nop
 80054dc:	2000028c 	.word	0x2000028c

080054e0 <_getpid_r>:
 80054e0:	f7fb bdc6 	b.w	8001070 <_getpid>

080054e4 <__sread>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	460c      	mov	r4, r1
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	f000 f89c 	bl	8005628 <_read_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	bfab      	itete	ge
 80054f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054f6:	89a3      	ldrhlt	r3, [r4, #12]
 80054f8:	181b      	addge	r3, r3, r0
 80054fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054fe:	bfac      	ite	ge
 8005500:	6563      	strge	r3, [r4, #84]	; 0x54
 8005502:	81a3      	strhlt	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__swrite>:
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	461f      	mov	r7, r3
 800550c:	898b      	ldrh	r3, [r1, #12]
 800550e:	05db      	lsls	r3, r3, #23
 8005510:	4605      	mov	r5, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4616      	mov	r6, r2
 8005516:	d505      	bpl.n	8005524 <__swrite+0x1e>
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	2302      	movs	r3, #2
 800551e:	2200      	movs	r2, #0
 8005520:	f000 f868 	bl	80055f4 <_lseek_r>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800552a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	4632      	mov	r2, r6
 8005532:	463b      	mov	r3, r7
 8005534:	4628      	mov	r0, r5
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	f000 b817 	b.w	800556c <_write_r>

0800553e <__sseek>:
 800553e:	b510      	push	{r4, lr}
 8005540:	460c      	mov	r4, r1
 8005542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005546:	f000 f855 	bl	80055f4 <_lseek_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	bf15      	itete	ne
 8005550:	6560      	strne	r0, [r4, #84]	; 0x54
 8005552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strheq	r3, [r4, #12]
 800555c:	bf18      	it	ne
 800555e:	81a3      	strhne	r3, [r4, #12]
 8005560:	bd10      	pop	{r4, pc}

08005562 <__sclose>:
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 b813 	b.w	8005590 <_close_r>
	...

0800556c <_write_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d07      	ldr	r5, [pc, #28]	; (800558c <_write_r+0x20>)
 8005570:	4604      	mov	r4, r0
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	2200      	movs	r2, #0
 8005578:	602a      	str	r2, [r5, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f7fb fdb7 	bl	80010ee <_write>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_write_r+0x1e>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_write_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	2000028c 	.word	0x2000028c

08005590 <_close_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d06      	ldr	r5, [pc, #24]	; (80055ac <_close_r+0x1c>)
 8005594:	2300      	movs	r3, #0
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fb fdc3 	bl	8001126 <_close>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_close_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_close_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	2000028c 	.word	0x2000028c

080055b0 <_fstat_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d07      	ldr	r5, [pc, #28]	; (80055d0 <_fstat_r+0x20>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	f7fb fdbe 	bl	800113e <_fstat>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d102      	bne.n	80055cc <_fstat_r+0x1c>
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	b103      	cbz	r3, 80055cc <_fstat_r+0x1c>
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
 80055ce:	bf00      	nop
 80055d0:	2000028c 	.word	0x2000028c

080055d4 <_isatty_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	; (80055f0 <_isatty_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fb fdbd 	bl	800115e <_isatty>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_isatty_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_isatty_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	2000028c 	.word	0x2000028c

080055f4 <_lseek_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_lseek_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb fdb6 	bl	8001174 <_lseek>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_lseek_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_lseek_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	2000028c 	.word	0x2000028c

08005618 <_malloc_usable_size_r>:
 8005618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561c:	1f18      	subs	r0, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	bfbc      	itt	lt
 8005622:	580b      	ldrlt	r3, [r1, r0]
 8005624:	18c0      	addlt	r0, r0, r3
 8005626:	4770      	bx	lr

08005628 <_read_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d07      	ldr	r5, [pc, #28]	; (8005648 <_read_r+0x20>)
 800562c:	4604      	mov	r4, r0
 800562e:	4608      	mov	r0, r1
 8005630:	4611      	mov	r1, r2
 8005632:	2200      	movs	r2, #0
 8005634:	602a      	str	r2, [r5, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	f7fb fd3c 	bl	80010b4 <_read>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_read_r+0x1e>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_read_r+0x1e>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	2000028c 	.word	0x2000028c

0800564c <_init>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr

08005658 <_fini>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr
