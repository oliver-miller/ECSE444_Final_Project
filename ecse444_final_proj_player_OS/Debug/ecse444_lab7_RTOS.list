
ecse444_lab7_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800a520  0800a520  0001a520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa3c  0800aa3c  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa3c  0800aa3c  0001aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa44  0800aa44  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa44  0800aa44  0001aa44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa48  0800aa48  0001aa48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800aa4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f8  20000260  0800acac  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001858  0800acac  00021858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002080c  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004467  00000000  00000000  00040a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00044f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  000468f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029715  00000000  00000000  00048100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd62  00000000  00000000  00071815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001026d0  00000000  00000000  0008e577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007be8  00000000  00000000  00190c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a508 	.word	0x0800a508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	0800a508 	.word	0x0800a508

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 ff8f 	bl	8001dd4 <SENSOR_IO_Read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	f023 0303 	bic.w	r3, r3, #3
 8000ed0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	7bfa      	ldrb	r2, [r7, #15]
 8000ee8:	2120      	movs	r1, #32
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 ff58 	bl	8001da0 <SENSOR_IO_Write>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f06:	f000 ff41 	bl	8001d8c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	210f      	movs	r1, #15
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 ff5f 	bl	8001dd4 <SENSOR_IO_Read>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	b2d8      	uxtb	r0, r3
 8000f32:	f107 020c 	add.w	r2, r7, #12
 8000f36:	2302      	movs	r3, #2
 8000f38:	21b0      	movs	r1, #176	; 0xb0
 8000f3a:	f000 ff69 	bl	8001e10 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f3e:	7b3b      	ldrb	r3, [r7, #12]
 8000f40:	085b      	lsrs	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f46:	7b7b      	ldrb	r3, [r7, #13]
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	b2d8      	uxtb	r0, r3
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	2302      	movs	r3, #2
 8000f58:	21b6      	movs	r1, #182	; 0xb6
 8000f5a:	f000 ff59 	bl	8001e10 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	7b3b      	ldrb	r3, [r7, #12]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	b2d8      	uxtb	r0, r3
 8000f70:	f107 020c 	add.w	r2, r7, #12
 8000f74:	2302      	movs	r3, #2
 8000f76:	21ba      	movs	r1, #186	; 0xba
 8000f78:	f000 ff4a 	bl	8001e10 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7b3b      	ldrb	r3, [r7, #12]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	21a8      	movs	r1, #168	; 0xa8
 8000f96:	f000 ff3b 	bl	8001e10 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000fbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fd0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000fd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8000ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ffe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001006:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800100a:	edd7 7a04 	vldr	s15, [r7, #16]
 800100e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001054 <HTS221_H_ReadHumidity+0x130>
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	dd01      	ble.n	8001020 <HTS221_H_ReadHumidity+0xfc>
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HTS221_H_ReadHumidity+0x134>)
 800101e:	e00a      	b.n	8001036 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001020:	edd7 7a04 	vldr	s15, [r7, #16]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d502      	bpl.n	8001034 <HTS221_H_ReadHumidity+0x110>
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e000      	b.n	8001036 <HTS221_H_ReadHumidity+0x112>
 8001034:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001036:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001038:	edd7 7a04 	vldr	s15, [r7, #16]
 800103c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001040:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001044:	eef0 7a66 	vmov.f32	s15, s13
}
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	447a0000 	.word	0x447a0000
 8001058:	447a0000 	.word	0x447a0000

0800105c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	463b      	mov	r3, r7
 8001064:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001068:	783b      	ldrb	r3, [r7, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	2120      	movs	r1, #32
 800106e:	203c      	movs	r0, #60	; 0x3c
 8001070:	f000 fe96 	bl	8001da0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	461a      	mov	r2, r3
 8001078:	2121      	movs	r1, #33	; 0x21
 800107a:	203c      	movs	r0, #60	; 0x3c
 800107c:	f000 fe90 	bl	8001da0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	461a      	mov	r2, r3
 8001084:	2122      	movs	r1, #34	; 0x22
 8001086:	203c      	movs	r0, #60	; 0x3c
 8001088:	f000 fe8a 	bl	8001da0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	461a      	mov	r2, r3
 8001090:	2123      	movs	r1, #35	; 0x23
 8001092:	203c      	movs	r0, #60	; 0x3c
 8001094:	f000 fe84 	bl	8001da0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001098:	793b      	ldrb	r3, [r7, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	2124      	movs	r1, #36	; 0x24
 800109e:	203c      	movs	r0, #60	; 0x3c
 80010a0:	f000 fe7e 	bl	8001da0 <SENSOR_IO_Write>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80010b6:	2122      	movs	r1, #34	; 0x22
 80010b8:	203c      	movs	r0, #60	; 0x3c
 80010ba:	f000 fe8b 	bl	8001dd4 <SENSOR_IO_Read>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f023 0303 	bic.w	r3, r3, #3
 80010c8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f043 0303 	orr.w	r3, r3, #3
 80010d0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2122      	movs	r1, #34	; 0x22
 80010d8:	203c      	movs	r0, #60	; 0x3c
 80010da:	f000 fe61 	bl	8001da0 <SENSOR_IO_Write>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80010ea:	f000 fe4f 	bl	8001d8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80010ee:	210f      	movs	r1, #15
 80010f0:	203c      	movs	r0, #60	; 0x3c
 80010f2:	f000 fe6f 	bl	8001dd4 <SENSOR_IO_Read>
 80010f6:	4603      	mov	r3, r0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800110a:	2122      	movs	r1, #34	; 0x22
 800110c:	203c      	movs	r0, #60	; 0x3c
 800110e:	f000 fe61 	bl	8001dd4 <SENSOR_IO_Read>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f023 0320 	bic.w	r3, r3, #32
 800111c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	461a      	mov	r2, r3
 8001130:	2122      	movs	r1, #34	; 0x22
 8001132:	203c      	movs	r0, #60	; 0x3c
 8001134:	f000 fe34 	bl	8001da0 <SENSOR_IO_Write>
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001156:	2121      	movs	r1, #33	; 0x21
 8001158:	203c      	movs	r0, #60	; 0x3c
 800115a:	f000 fe3b 	bl	8001dd4 <SENSOR_IO_Read>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001162:	f107 0208 	add.w	r2, r7, #8
 8001166:	2306      	movs	r3, #6
 8001168:	21a8      	movs	r1, #168	; 0xa8
 800116a:	203c      	movs	r0, #60	; 0x3c
 800116c:	f000 fe50 	bl	8001e10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	77fb      	strb	r3, [r7, #31]
 8001174:	e01f      	b.n	80011b6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	3301      	adds	r3, #1
 800117c:	f107 0220 	add.w	r2, r7, #32
 8001180:	4413      	add	r3, r2
 8001182:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001186:	b29b      	uxth	r3, r3
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b29a      	uxth	r2, r3
 800118c:	7ffb      	ldrb	r3, [r7, #31]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	f107 0120 	add.w	r1, r7, #32
 8001194:	440b      	add	r3, r1
 8001196:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
 80011a2:	b212      	sxth	r2, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	f107 0120 	add.w	r1, r7, #32
 80011aa:	440b      	add	r3, r1
 80011ac:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	3301      	adds	r3, #1
 80011b4:	77fb      	strb	r3, [r7, #31]
 80011b6:	7ffb      	ldrb	r3, [r7, #31]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d9dc      	bls.n	8001176 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011c2:	2b60      	cmp	r3, #96	; 0x60
 80011c4:	d013      	beq.n	80011ee <LIS3MDL_MagReadXYZ+0xae>
 80011c6:	2b60      	cmp	r3, #96	; 0x60
 80011c8:	dc14      	bgt.n	80011f4 <LIS3MDL_MagReadXYZ+0xb4>
 80011ca:	2b40      	cmp	r3, #64	; 0x40
 80011cc:	d00c      	beq.n	80011e8 <LIS3MDL_MagReadXYZ+0xa8>
 80011ce:	2b40      	cmp	r3, #64	; 0x40
 80011d0:	dc10      	bgt.n	80011f4 <LIS3MDL_MagReadXYZ+0xb4>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <LIS3MDL_MagReadXYZ+0x9c>
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d003      	beq.n	80011e2 <LIS3MDL_MagReadXYZ+0xa2>
 80011da:	e00b      	b.n	80011f4 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <LIS3MDL_MagReadXYZ+0x104>)
 80011de:	61bb      	str	r3, [r7, #24]
    break;
 80011e0:	e008      	b.n	80011f4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <LIS3MDL_MagReadXYZ+0x108>)
 80011e4:	61bb      	str	r3, [r7, #24]
    break;
 80011e6:	e005      	b.n	80011f4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <LIS3MDL_MagReadXYZ+0x10c>)
 80011ea:	61bb      	str	r3, [r7, #24]
    break;
 80011ec:	e002      	b.n	80011f4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <LIS3MDL_MagReadXYZ+0x110>)
 80011f0:	61bb      	str	r3, [r7, #24]
    break;    
 80011f2:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
 80011f8:	e01b      	b.n	8001232 <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	f107 0220 	add.w	r2, r7, #32
 8001202:	4413      	add	r3, r2
 8001204:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	edd7 7a06 	vldr	s15, [r7, #24]
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001224:	ee17 2a90 	vmov	r2, s15
 8001228:	b212      	sxth	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	3301      	adds	r3, #1
 8001230:	77fb      	strb	r3, [r7, #31]
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d9e0      	bls.n	80011fa <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	3e0f5c29 	.word	0x3e0f5c29
 8001248:	3e947ae1 	.word	0x3e947ae1
 800124c:	3edc28f6 	.word	0x3edc28f6
 8001250:	3f147ae1 	.word	0x3f147ae1

08001254 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f87b 	bl	800135c <LPS22HB_Init>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800127c:	f000 fd86 	bl	8001d8c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	210f      	movs	r1, #15
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fda4 	bl	8001dd4 <SENSOR_IO_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	74fb      	strb	r3, [r7, #19]
 80012ae:	e013      	b.n	80012d8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	7cfb      	ldrb	r3, [r7, #19]
 80012b6:	3328      	adds	r3, #40	; 0x28
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	7cfc      	ldrb	r4, [r7, #19]
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f000 fd88 	bl	8001dd4 <SENSOR_IO_Read>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	4423      	add	r3, r4
 80012ce:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80012d2:	7cfb      	ldrb	r3, [r7, #19]
 80012d4:	3301      	adds	r3, #1
 80012d6:	74fb      	strb	r3, [r7, #19]
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d9e8      	bls.n	80012b0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	74fb      	strb	r3, [r7, #19]
 80012e2:	e010      	b.n	8001306 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	f107 0218 	add.w	r2, r7, #24
 80012ea:	4413      	add	r3, r2
 80012ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012f0:	461a      	mov	r2, r3
 80012f2:	7cfb      	ldrb	r3, [r7, #19]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001300:	7cfb      	ldrb	r3, [r7, #19]
 8001302:	3301      	adds	r3, #1
 8001304:	74fb      	strb	r3, [r7, #19]
 8001306:	7cfb      	ldrb	r3, [r7, #19]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d9eb      	bls.n	80012e4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800131c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2264      	movs	r2, #100	; 0x64
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	da01      	bge.n	8001332 <LPS22HB_P_ReadPressure+0x96>
 800132e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001332:	131b      	asrs	r3, r3, #12
 8001334:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001340:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001358 <LPS22HB_P_ReadPressure+0xbc>
 8001344:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001348:	eef0 7a66 	vmov.f32	s15, s13
}
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	42c80000 	.word	0x42c80000

0800135c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	211a      	movs	r1, #26
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fd31 	bl	8001dd4 <SENSOR_IO_Read>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	211a      	movs	r1, #26
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fd06 	bl	8001da0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2110      	movs	r1, #16
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fd1a 	bl	8001dd4 <SENSOR_IO_Read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013aa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	f023 0302 	bic.w	r3, r3, #2
 80013ba:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	2110      	movs	r1, #16
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fce7 	bl	8001da0 <SENSOR_IO_Write>
}  
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80013e8:	2111      	movs	r1, #17
 80013ea:	20d4      	movs	r0, #212	; 0xd4
 80013ec:	f000 fcf2 	bl	8001dd4 <SENSOR_IO_Read>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001400:	7bba      	ldrb	r2, [r7, #14]
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	4313      	orrs	r3, r2
 8001406:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	461a      	mov	r2, r3
 800140c:	2111      	movs	r1, #17
 800140e:	20d4      	movs	r0, #212	; 0xd4
 8001410:	f000 fcc6 	bl	8001da0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001414:	2112      	movs	r1, #18
 8001416:	20d4      	movs	r0, #212	; 0xd4
 8001418:	f000 fcdc 	bl	8001dd4 <SENSOR_IO_Read>
 800141c:	4603      	mov	r3, r0
 800141e:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	b29b      	uxth	r3, r3
 8001426:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800142e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001430:	7bba      	ldrb	r2, [r7, #14]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4313      	orrs	r3, r2
 8001436:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	461a      	mov	r2, r3
 800143c:	2112      	movs	r1, #18
 800143e:	20d4      	movs	r0, #212	; 0xd4
 8001440:	f000 fcae 	bl	8001da0 <SENSOR_IO_Write>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001456:	2111      	movs	r1, #17
 8001458:	20d4      	movs	r0, #212	; 0xd4
 800145a:	f000 fcbb 	bl	8001dd4 <SENSOR_IO_Read>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	2111      	movs	r1, #17
 8001470:	20d4      	movs	r0, #212	; 0xd4
 8001472:	f000 fc95 	bl	8001da0 <SENSOR_IO_Write>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001482:	f000 fc83 	bl	8001d8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001486:	210f      	movs	r1, #15
 8001488:	20d4      	movs	r0, #212	; 0xd4
 800148a:	f000 fca3 	bl	8001dd4 <SENSOR_IO_Read>
 800148e:	4603      	mov	r3, r0
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}

08001494 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80014a2:	2116      	movs	r1, #22
 80014a4:	20d4      	movs	r0, #212	; 0xd4
 80014a6:	f000 fc95 	bl	8001dd4 <SENSOR_IO_Read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014b4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014c2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	461a      	mov	r2, r3
 80014c8:	2116      	movs	r1, #22
 80014ca:	20d4      	movs	r0, #212	; 0xd4
 80014cc:	f000 fc68 	bl	8001da0 <SENSOR_IO_Write>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80014ee:	2111      	movs	r1, #17
 80014f0:	20d4      	movs	r0, #212	; 0xd4
 80014f2:	f000 fc6f 	bl	8001dd4 <SENSOR_IO_Read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80014fa:	f107 0208 	add.w	r2, r7, #8
 80014fe:	2306      	movs	r3, #6
 8001500:	2122      	movs	r1, #34	; 0x22
 8001502:	20d4      	movs	r0, #212	; 0xd4
 8001504:	f000 fc84 	bl	8001e10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
 800150c:	e01f      	b.n	800154e <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	3301      	adds	r3, #1
 8001514:	f107 0220 	add.w	r2, r7, #32
 8001518:	4413      	add	r3, r2
 800151a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800151e:	b29b      	uxth	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b29a      	uxth	r2, r3
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	f107 0120 	add.w	r1, r7, #32
 800152c:	440b      	add	r3, r1
 800152e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
 8001538:	7ffb      	ldrb	r3, [r7, #31]
 800153a:	b212      	sxth	r2, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	f107 0120 	add.w	r1, r7, #32
 8001542:	440b      	add	r3, r1
 8001544:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	3301      	adds	r3, #1
 800154c:	77fb      	strb	r3, [r7, #31]
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d9dc      	bls.n	800150e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d828      	bhi.n	80015b0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001599 	.word	0x08001599
 8001568:	080015b1 	.word	0x080015b1
 800156c:	080015b1 	.word	0x080015b1
 8001570:	080015b1 	.word	0x080015b1
 8001574:	0800159f 	.word	0x0800159f
 8001578:	080015b1 	.word	0x080015b1
 800157c:	080015b1 	.word	0x080015b1
 8001580:	080015b1 	.word	0x080015b1
 8001584:	080015a5 	.word	0x080015a5
 8001588:	080015b1 	.word	0x080015b1
 800158c:	080015b1 	.word	0x080015b1
 8001590:	080015b1 	.word	0x080015b1
 8001594:	080015ab 	.word	0x080015ab
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800159a:	61bb      	str	r3, [r7, #24]
    break;
 800159c:	e008      	b.n	80015b0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80015a0:	61bb      	str	r3, [r7, #24]
    break;
 80015a2:	e005      	b.n	80015b0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80015a6:	61bb      	str	r3, [r7, #24]
    break;
 80015a8:	e002      	b.n	80015b0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 80015ac:	61bb      	str	r3, [r7, #24]
    break;    
 80015ae:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	77fb      	strb	r3, [r7, #31]
 80015b4:	e017      	b.n	80015e6 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	f107 0220 	add.w	r2, r7, #32
 80015be:	4413      	add	r3, r2
 80015c0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	3301      	adds	r3, #1
 80015e4:	77fb      	strb	r3, [r7, #31]
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d9e4      	bls.n	80015b6 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	410c0000 	.word	0x410c0000
 80015fc:	418c0000 	.word	0x418c0000
 8001600:	420c0000 	.word	0x420c0000
 8001604:	428c0000 	.word	0x428c0000

08001608 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <vApplicationGetIdleTaskMemory+0x2c>)
 8001618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <vApplicationGetIdleTaskMemory+0x30>)
 800161e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000027c 	.word	0x2000027c
 8001638:	200002d0 	.word	0x200002d0

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b096      	sub	sp, #88	; 0x58
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001642:	f000 ffc2 	bl	80025ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f857 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f000 f965 	bl	8001918 <MX_GPIO_Init>
  MX_I2C2_Init();
 800164e:	f000 f8a5 	bl	800179c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001652:	f000 f931 	bl	80018b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001656:	f000 f8e1 	bl	800181c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  BSP_GYRO_Init();
 800165a:	f000 fbf7 	bl	8001e4c <BSP_GYRO_Init>
  BSP_HSENSOR_Init();
 800165e:	f000 fc4f 	bl	8001f00 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();
 8001662:	f000 fcbf 	bl	8001fe4 <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();
 8001666:	f000 fc79 	bl	8001f5c <BSP_MAGNETO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <main+0xa4>)
 800166c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800167e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fe47 	bl	8006318 <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <main+0xa8>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of read_sensors */
  osThreadDef(read_sensors, start_read_sensors, osPriorityNormal, 0, 128);
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <main+0xac>)
 8001692:	f107 0420 	add.w	r4, r7, #32
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_sensorsHandle = osThreadCreate(osThread(read_sensors), NULL);
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fe34 	bl	8006318 <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <main+0xb0>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of read_buttpn */
  osThreadDef(read_buttpn, start_read_button, osPriorityNormal, 0, 128);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <main+0xb4>)
 80016b8:	1d3c      	adds	r4, r7, #4
 80016ba:	461d      	mov	r5, r3
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_buttpnHandle = osThreadCreate(osThread(read_buttpn), NULL);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fe23 	bl	8006318 <osThreadCreate>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <main+0xb8>)
 80016d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016d8:	f004 fe17 	bl	800630a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <main+0xa0>
 80016de:	bf00      	nop
 80016e0:	0800a548 	.word	0x0800a548
 80016e4:	20001218 	.word	0x20001218
 80016e8:	0800a564 	.word	0x0800a564
 80016ec:	200016d8 	.word	0x200016d8
 80016f0:	0800a580 	.word	0x0800a580
 80016f4:	20001268 	.word	0x20001268

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b096      	sub	sp, #88	; 0x58
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2244      	movs	r2, #68	; 0x44
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f006 f870 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800171a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800171e:	f002 f929 	bl	8003974 <HAL_PWREx_ControlVoltageScaling>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001728:	f000 fa3a 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800172c:	2310      	movs	r3, #16
 800172e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001738:	2360      	movs	r3, #96	; 0x60
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001740:	2301      	movs	r3, #1
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001748:	2328      	movs	r3, #40	; 0x28
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800174c:	2307      	movs	r3, #7
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001754:	2302      	movs	r3, #2
 8001756:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4618      	mov	r0, r3
 800175e:	f002 f95f 	bl	8003a20 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001768:	f000 fa1a 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001770:	2303      	movs	r3, #3
 8001772:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	2104      	movs	r1, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fd31 	bl	80041ec <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001790:	f000 fa06 	bl	8001ba0 <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3758      	adds	r7, #88	; 0x58
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_I2C2_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_I2C2_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_I2C2_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_I2C2_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_I2C2_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_I2C2_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_I2C2_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_I2C2_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_I2C2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <MX_I2C2_Init+0x74>)
 80017d8:	f001 fb1d 	bl	8002e16 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 f9dd 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_I2C2_Init+0x74>)
 80017ea:	f002 f81d 	bl	8003828 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 f9d4 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_I2C2_Init+0x74>)
 80017fc:	f002 f85f 	bl	80038be <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 f9cb 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000121c 	.word	0x2000121c
 8001814:	40005800 	.word	0x40005800
 8001818:	10909cec 	.word	0x10909cec

0800181c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_TIM2_Init+0x98>)
 800183c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_TIM2_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_TIM2_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_TIM2_Init+0x98>)
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_TIM2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_TIM2_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <MX_TIM2_Init+0x98>)
 8001864:	f003 fbb6 	bl	8004fd4 <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800186e:	f000 f997 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <MX_TIM2_Init+0x98>)
 8001880:	f003 fd8f 	bl	80053a2 <HAL_TIM_ConfigClockSource>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800188a:	f000 f989 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <MX_TIM2_Init+0x98>)
 800189c:	f003 ffa4 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018a6:	f000 f97b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200016dc 	.word	0x200016dc

080018b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_USART1_UART_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018fc:	f004 f81a 	bl	8005934 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001906:	f000 f94b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20001654 	.word	0x20001654
 8001914:	40013800 	.word	0x40013800

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <MX_GPIO_Init+0xbc>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <MX_GPIO_Init+0xbc>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <MX_GPIO_Init+0xbc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <MX_GPIO_Init+0xbc>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <MX_GPIO_Init+0xbc>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_GPIO_Init+0xbc>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_GPIO_Init+0xbc>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <MX_GPIO_Init+0xbc>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_GPIO_Init+0xbc>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <MX_GPIO_Init+0xc0>)
 800197e:	f001 f9f5 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_GPIO_Init+0xc4>)
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <MX_GPIO_Init+0xc8>)
 8001998:	f000 ff32 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800199c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <MX_GPIO_Init+0xc0>)
 80019b6:	f000 ff23 	bl	8002800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	2028      	movs	r0, #40	; 0x28
 80019c0:	f000 fef4 	bl	80027ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c4:	2028      	movs	r0, #40	; 0x28
 80019c6:	f000 ff0d 	bl	80027e4 <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400
 80019dc:	10110000 	.word	0x10110000
 80019e0:	48000800 	.word	0x48000800

080019e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80019ec:	2064      	movs	r0, #100	; 0x64
 80019ee:	f004 fcdf 	bl	80063b0 <osDelay>
    if(sensor_number == 0){
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <StartDefaultTask+0xd4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10b      	bne.n	8001a12 <StartDefaultTask+0x2e>
		sprintf((char*)uart_buffer, "Pressure = %.2d\r\n", (int) pressure);
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <StartDefaultTask+0xd8>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 2a90 	vmov	r2, s15
 8001a08:	492d      	ldr	r1, [pc, #180]	; (8001ac0 <StartDefaultTask+0xdc>)
 8001a0a:	482e      	ldr	r0, [pc, #184]	; (8001ac4 <StartDefaultTask+0xe0>)
 8001a0c:	f006 fb60 	bl	80080d0 <siprintf>
 8001a10:	e043      	b.n	8001a9a <StartDefaultTask+0xb6>
	}
	else if(sensor_number == 1){
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <StartDefaultTask+0xd4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10b      	bne.n	8001a32 <StartDefaultTask+0x4e>
		sprintf((char*)uart_buffer, "Humidity = %.2d\r\n", (int) humidity);
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <StartDefaultTask+0xe4>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 2a90 	vmov	r2, s15
 8001a28:	4928      	ldr	r1, [pc, #160]	; (8001acc <StartDefaultTask+0xe8>)
 8001a2a:	4826      	ldr	r0, [pc, #152]	; (8001ac4 <StartDefaultTask+0xe0>)
 8001a2c:	f006 fb50 	bl	80080d0 <siprintf>
 8001a30:	e033      	b.n	8001a9a <StartDefaultTask+0xb6>
	}
	else if(sensor_number == 2){
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <StartDefaultTask+0xd4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d11a      	bne.n	8001a70 <StartDefaultTask+0x8c>
		sprintf((char*)uart_buffer, "Gyroscope = %.2d, %.2d, %.2d\r\n", (int) gyro_XYZ[0], (int) gyro_XYZ[1], (int) gyro_XYZ[2]);
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <StartDefaultTask+0xec>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <StartDefaultTask+0xec>)
 8001a46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a4a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <StartDefaultTask+0xec>)
 8001a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a58:	ee17 3a90 	vmov	r3, s15
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	ee16 3a90 	vmov	r3, s13
 8001a62:	ee17 2a10 	vmov	r2, s14
 8001a66:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <StartDefaultTask+0xf0>)
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <StartDefaultTask+0xe0>)
 8001a6a:	f006 fb31 	bl	80080d0 <siprintf>
 8001a6e:	e014      	b.n	8001a9a <StartDefaultTask+0xb6>
	}
	else if(sensor_number == 3){
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <StartDefaultTask+0xd4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d11c      	bne.n	8001ab2 <StartDefaultTask+0xce>
		sprintf((char*)uart_buffer, "Magnetometer = %.2d, %.2d, %.2d\r\n", magneto_XYZ[0], magneto_XYZ[1], magneto_XYZ[2]);
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <StartDefaultTask+0xf4>)
 8001a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <StartDefaultTask+0xf4>)
 8001a82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <StartDefaultTask+0xf4>)
 8001a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	460b      	mov	r3, r1
 8001a92:	4912      	ldr	r1, [pc, #72]	; (8001adc <StartDefaultTask+0xf8>)
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <StartDefaultTask+0xe0>)
 8001a96:	f006 fb1b 	bl	80080d0 <siprintf>
	else
	{
		continue;
	}

    HAL_UART_Transmit(&huart1, uart_buffer, strlen((char const *) uart_buffer), 1000);
 8001a9a:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <StartDefaultTask+0xe0>)
 8001a9c:	f7fe fb98 	bl	80001d0 <strlen>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <StartDefaultTask+0xe0>)
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <StartDefaultTask+0xfc>)
 8001aac:	f003 ff90 	bl	80059d0 <HAL_UART_Transmit>
 8001ab0:	e79c      	b.n	80019ec <StartDefaultTask+0x8>
		continue;
 8001ab2:	bf00      	nop
    osDelay(100);
 8001ab4:	e79a      	b.n	80019ec <StartDefaultTask+0x8>
 8001ab6:	bf00      	nop
 8001ab8:	200004d0 	.word	0x200004d0
 8001abc:	200004d4 	.word	0x200004d4
 8001ac0:	0800a59c 	.word	0x0800a59c
 8001ac4:	2000126c 	.word	0x2000126c
 8001ac8:	200004d8 	.word	0x200004d8
 8001acc:	0800a5b0 	.word	0x0800a5b0
 8001ad0:	200004dc 	.word	0x200004dc
 8001ad4:	0800a5c4 	.word	0x0800a5c4
 8001ad8:	200004e8 	.word	0x200004e8
 8001adc:	0800a5e4 	.word	0x0800a5e4
 8001ae0:	20001654 	.word	0x20001654

08001ae4 <start_read_sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_sensors */
void start_read_sensors(void const * argument)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_sensors */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f004 fc5f 	bl	80063b0 <osDelay>
    pressure = BSP_PSENSOR_ReadPressure();
 8001af2:	f000 fa97 	bl	8002024 <BSP_PSENSOR_ReadPressure>
 8001af6:	eef0 7a40 	vmov.f32	s15, s0
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <start_read_sensors+0x38>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
	humidity = BSP_HSENSOR_ReadHumidity();
 8001b00:	f000 fa1e 	bl	8001f40 <BSP_HSENSOR_ReadHumidity>
 8001b04:	eef0 7a40 	vmov.f32	s15, s0
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <start_read_sensors+0x3c>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
	BSP_GYRO_GetXYZ(gyro_XYZ);
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <start_read_sensors+0x40>)
 8001b10:	f000 f9de 	bl	8001ed0 <BSP_GYRO_GetXYZ>
	BSP_MAGNETO_GetXYZ(magneto_XYZ);
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <start_read_sensors+0x44>)
 8001b16:	f000 fa4d 	bl	8001fb4 <BSP_MAGNETO_GetXYZ>
    osDelay(10);
 8001b1a:	e7e7      	b.n	8001aec <start_read_sensors+0x8>
 8001b1c:	200004d4 	.word	0x200004d4
 8001b20:	200004d8 	.word	0x200004d8
 8001b24:	200004dc 	.word	0x200004dc
 8001b28:	200004e8 	.word	0x200004e8

08001b2c <start_read_button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_button */
void start_read_button(void const * argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_button */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001b34:	2064      	movs	r0, #100	; 0x64
 8001b36:	f004 fc3b 	bl	80063b0 <osDelay>

    if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET){
 8001b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <start_read_button+0x44>)
 8001b40:	f001 f8fc 	bl	8002d3c <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f4      	bne.n	8001b34 <start_read_button+0x8>
    	sensor_number++;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <start_read_button+0x48>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <start_read_button+0x48>)
 8001b52:	6013      	str	r3, [r2, #0]
		if(sensor_number == 4){
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <start_read_button+0x48>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d102      	bne.n	8001b62 <start_read_button+0x36>
			sensor_number = 0;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <start_read_button+0x48>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <start_read_button+0x4c>)
 8001b68:	f001 f918 	bl	8002d9c <HAL_GPIO_TogglePin>
    osDelay(100);
 8001b6c:	e7e2      	b.n	8001b34 <start_read_button+0x8>
 8001b6e:	bf00      	nop
 8001b70:	48000800 	.word	0x48000800
 8001b74:	200004d0 	.word	0x200004d0
 8001b78:	48000400 	.word	0x48000400

08001b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8e:	f000 fd35 	bl	80025fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40014800 	.word	0x40014800

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <Error_Handler+0x8>
	...

08001bac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001bcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001bde:	2304      	movs	r3, #4
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	481b      	ldr	r0, [pc, #108]	; (8001c58 <I2Cx_MspInit+0xac>)
 8001bea:	f000 fe09 	bl	8002800 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4818      	ldr	r0, [pc, #96]	; (8001c58 <I2Cx_MspInit+0xac>)
 8001bf6:	f000 fe03 	bl	8002800 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001c00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001c18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <I2Cx_MspInit+0xa8>)
 8001c24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	2021      	movs	r0, #33	; 0x21
 8001c30:	f000 fdbc 	bl	80027ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c34:	2021      	movs	r0, #33	; 0x21
 8001c36:	f000 fdd5 	bl	80027e4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	2022      	movs	r0, #34	; 0x22
 8001c40:	f000 fdb4 	bl	80027ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c44:	2022      	movs	r0, #34	; 0x22
 8001c46:	f000 fdcd 	bl	80027e4 <HAL_NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	48000400 	.word	0x48000400

08001c5c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <I2Cx_Init+0x54>)
 8001c68:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <I2Cx_Init+0x58>)
 8001c6e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff89 	bl	8001bac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f001 f8bb 	bl	8002e16 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 fdc0 	bl	8003828 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40005800 	.word	0x40005800
 8001cb4:	00702681 	.word	0x00702681

08001cb8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	72fb      	strb	r3, [r7, #11]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	813b      	strh	r3, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	88f8      	ldrh	r0, [r7, #6]
 8001cdc:	893a      	ldrh	r2, [r7, #8]
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4603      	mov	r3, r0
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f001 fa64 	bl	80031bc <HAL_I2C_Mem_Read>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	4619      	mov	r1, r3
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f832 	bl	8001d6c <I2Cx_Error>
  }
  return status;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b08a      	sub	sp, #40	; 0x28
 8001d16:	af04      	add	r7, sp, #16
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4603      	mov	r3, r0
 8001d22:	72fb      	strb	r3, [r7, #11]
 8001d24:	460b      	mov	r3, r1
 8001d26:	813b      	strh	r3, [r7, #8]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b299      	uxth	r1, r3
 8001d34:	88f8      	ldrh	r0, [r7, #6]
 8001d36:	893a      	ldrh	r2, [r7, #8]
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f001 f923 	bl	8002f94 <HAL_I2C_Mem_Write>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f805 	bl	8001d6c <I2Cx_Error>
  }
  return status;
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 f8db 	bl	8002f34 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff6c 	bl	8001c5c <I2Cx_Init>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <SENSOR_IO_Init+0x10>)
 8001d92:	f7ff ff63 	bl	8001c5c <I2Cx_Init>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200017ac 	.word	0x200017ac

08001da0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	460b      	mov	r3, r1
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	4613      	mov	r3, r2
 8001db0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	79f9      	ldrb	r1, [r7, #7]
 8001db8:	2301      	movs	r3, #1
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	1d7b      	adds	r3, r7, #5
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <SENSOR_IO_Write+0x30>)
 8001dc4:	f7ff ffa5 	bl	8001d12 <I2Cx_WriteMultiple>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200017ac 	.word	0x200017ac

08001dd4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001de8:	79bb      	ldrb	r3, [r7, #6]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	79f9      	ldrb	r1, [r7, #7]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	f107 030f 	add.w	r3, r7, #15
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <SENSOR_IO_Read+0x38>)
 8001dfc:	f7ff ff5c 	bl	8001cb8 <I2Cx_ReadMultiple>

  return read_value;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200017ac 	.word	0x200017ac

08001e10 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	603a      	str	r2, [r7, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	71bb      	strb	r3, [r7, #6]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	79f9      	ldrb	r1, [r7, #7]
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2301      	movs	r3, #1
 8001e36:	4804      	ldr	r0, [pc, #16]	; (8001e48 <SENSOR_IO_ReadMultiple+0x38>)
 8001e38:	f7ff ff3e 	bl	8001cb8 <I2Cx_ReadMultiple>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29b      	uxth	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200017ac 	.word	0x200017ac

08001e4c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001e56:	2300      	movs	r3, #0
 8001e58:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <BSP_GYRO_Init+0x7c>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4798      	blx	r3
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b6a      	cmp	r3, #106	; 0x6a
 8001e64:	d002      	beq.n	8001e6c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e028      	b.n	8001ebe <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <BSP_GYRO_Init+0x80>)
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <BSP_GYRO_Init+0x7c>)
 8001e70:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001e76:	2330      	movs	r3, #48	; 0x30
 8001e78:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001e82:	2340      	movs	r3, #64	; 0x40
 8001e84:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001e8e:	7aba      	ldrb	r2, [r7, #10]
 8001e90:	797b      	ldrb	r3, [r7, #5]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e98:	7a3b      	ldrb	r3, [r7, #8]
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <BSP_GYRO_Init+0x80>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	89ba      	ldrh	r2, [r7, #12]
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000004c 	.word	0x2000004c
 8001ecc:	200004f0 	.word	0x200004f0

08001ed0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <BSP_GYRO_GetXYZ+0x2c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <BSP_GYRO_GetXYZ+0x2c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <BSP_GYRO_GetXYZ+0x2c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200004f0 	.word	0x200004f0

08001f00 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <BSP_HSENSOR_Init+0x38>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	20be      	movs	r0, #190	; 0xbe
 8001f0c:	4798      	blx	r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2bbc      	cmp	r3, #188	; 0xbc
 8001f12:	d002      	beq.n	8001f1a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	e009      	b.n	8001f2e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <BSP_HSENSOR_Init+0x3c>)
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <BSP_HSENSOR_Init+0x38>)
 8001f1e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <BSP_HSENSOR_Init+0x3c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	20be      	movs	r0, #190	; 0xbe
 8001f28:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	200004f4 	.word	0x200004f4

08001f40 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	20be      	movs	r0, #190	; 0xbe
 8001f4c:	4798      	blx	r3
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200004f4 	.word	0x200004f4

08001f5c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <BSP_MAGNETO_Init+0x50>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4798      	blx	r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b3d      	cmp	r3, #61	; 0x3d
 8001f70:	d002      	beq.n	8001f78 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	71fb      	strb	r3, [r7, #7]
 8001f76:	e013      	b.n	8001fa0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <BSP_MAGNETO_Init+0x54>)
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <BSP_MAGNETO_Init+0x50>)
 8001f7c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001f7e:	2358      	movs	r3, #88	; 0x58
 8001f80:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001f8e:	2340      	movs	r3, #64	; 0x40
 8001f90:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <BSP_MAGNETO_Init+0x54>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	463a      	mov	r2, r7
 8001f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f9e:	4798      	blx	r3
  } 

  return ret;  
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000000c 	.word	0x2000000c
 8001fb0:	200004f8 	.word	0x200004f8

08001fb4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200004f8 	.word	0x200004f8

08001fe4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <BSP_PSENSOR_Init+0x38>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	20ba      	movs	r0, #186	; 0xba
 8001ff0:	4798      	blx	r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2bb1      	cmp	r3, #177	; 0xb1
 8001ff6:	d002      	beq.n	8001ffe <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	e009      	b.n	8002012 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <BSP_PSENSOR_Init+0x3c>)
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <BSP_PSENSOR_Init+0x38>)
 8002002:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <BSP_PSENSOR_Init+0x3c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	20ba      	movs	r0, #186	; 0xba
 800200c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002012:	687b      	ldr	r3, [r7, #4]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000040 	.word	0x20000040
 8002020:	200004fc 	.word	0x200004fc

08002024 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <BSP_PSENSOR_ReadPressure+0x18>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	20ba      	movs	r0, #186	; 0xba
 8002030:	4798      	blx	r3
 8002032:	eef0 7a40 	vmov.f32	s15, s0
}
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200004fc 	.word	0x200004fc

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_MspInit+0x4c>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_MspInit+0x4c>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6613      	str	r3, [r2, #96]	; 0x60
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_MspInit+0x4c>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_MspInit+0x4c>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_MspInit+0x4c>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6593      	str	r3, [r2, #88]	; 0x58
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_MspInit+0x4c>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	210f      	movs	r1, #15
 800207a:	f06f 0001 	mvn.w	r0, #1
 800207e:	f000 fb95 	bl	80027ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0ac      	sub	sp, #176	; 0xb0
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2288      	movs	r2, #136	; 0x88
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f005 fb9b 	bl	80077ec <memset>
  if(hi2c->Instance==I2C2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a21      	ldr	r2, [pc, #132]	; (8002140 <HAL_I2C_MspInit+0xb0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d13b      	bne.n	8002138 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fac5 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020d8:	f7ff fd62 	bl	8001ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_I2C_MspInit+0xb4>)
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_I2C_MspInit+0xb4>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_I2C_MspInit+0xb4>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fc:	2312      	movs	r3, #18
 80020fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800210e:	2304      	movs	r3, #4
 8002110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002118:	4619      	mov	r1, r3
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <HAL_I2C_MspInit+0xb8>)
 800211c:	f000 fb70 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_I2C_MspInit+0xb4>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_I2C_MspInit+0xb4>)
 8002126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_I2C_MspInit+0xb4>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	37b0      	adds	r7, #176	; 0xb0
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40005800 	.word	0x40005800
 8002144:	40021000 	.word	0x40021000
 8002148:	48000400 	.word	0x48000400

0800214c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_I2C_MspDeInit+0x3c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10f      	bne.n	800217e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_I2C_MspDeInit+0x40>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_I2C_MspDeInit+0x40>)
 8002164:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800216a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_I2C_MspDeInit+0x44>)
 8002170:	f000 fcf0 	bl	8002b54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <HAL_I2C_MspDeInit+0x44>)
 800217a:	f000 fceb 	bl	8002b54 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40005800 	.word	0x40005800
 800218c:	40021000 	.word	0x40021000
 8002190:	48000400 	.word	0x48000400

08002194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d10b      	bne.n	80021be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_TIM_Base_MspInit+0x38>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_TIM_Base_MspInit+0x38>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_TIM_Base_MspInit+0x38>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0ac      	sub	sp, #176	; 0xb0
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2288      	movs	r2, #136	; 0x88
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 fafb 	bl	80077ec <memset>
  if(huart->Instance==USART1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a21      	ldr	r2, [pc, #132]	; (8002280 <HAL_UART_MspInit+0xb0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d13a      	bne.n	8002276 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002204:	2300      	movs	r3, #0
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fa25 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002218:	f7ff fcc2 	bl	8001ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_UART_MspInit+0xb4>)
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_UART_MspInit+0xb4>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	6613      	str	r3, [r2, #96]	; 0x60
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_UART_MspInit+0xb4>)
 800222a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_UART_MspInit+0xb4>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_UART_MspInit+0xb4>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_UART_MspInit+0xb4>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224c:	23c0      	movs	r3, #192	; 0xc0
 800224e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002264:	2307      	movs	r3, #7
 8002266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <HAL_UART_MspInit+0xb8>)
 8002272:	f000 fac5 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	37b0      	adds	r7, #176	; 0xb0
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40013800 	.word	0x40013800
 8002284:	40021000 	.word	0x40021000
 8002288:	48000400 	.word	0x48000400

0800228c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	201a      	movs	r0, #26
 80022a2:	f000 fa83 	bl	80027ac <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80022a6:	201a      	movs	r0, #26
 80022a8:	f000 fa9c 	bl	80027e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_InitTick+0x9c>)
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_InitTick+0x9c>)
 80022b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b6:	6613      	str	r3, [r2, #96]	; 0x60
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_InitTick+0x9c>)
 80022ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c4:	f107 0210 	add.w	r2, r7, #16
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 f932 	bl	8004538 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022d4:	f002 f91a 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 80022d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <HAL_InitTick+0xa0>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	3b01      	subs	r3, #1
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_InitTick+0xa4>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_InitTick+0xa8>)
 80022ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_InitTick+0xa4>)
 80022f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_InitTick+0xa4>)
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_InitTick+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_InitTick+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <HAL_InitTick+0xa4>)
 800230a:	f002 fe63 	bl	8004fd4 <HAL_TIM_Base_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <HAL_InitTick+0xa4>)
 8002316:	f002 feb5 	bl	8005084 <HAL_TIM_Base_Start_IT>
 800231a:	4603      	mov	r3, r0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	431bde83 	.word	0x431bde83
 8002330:	200017f8 	.word	0x200017f8
 8002334:	40014800 	.word	0x40014800

08002338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800233c:	e7fe      	b.n	800233c <NMI_Handler+0x4>

0800233e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <HardFault_Handler+0x4>

08002344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <MemManage_Handler+0x4>

0800234a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <BusFault_Handler+0x4>

08002350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <UsageFault_Handler+0x4>

08002356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800236a:	f002 fefb 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200017f8 	.word	0x200017f8

08002378 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800237c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002380:	f000 fd26 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
	return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_kill>:

int _kill(int pid, int sig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023a2:	f005 f9eb 	bl	800777c <__errno>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2216      	movs	r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
	return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_exit>:

void _exit (int status)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffe7 	bl	8002398 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ca:	e7fe      	b.n	80023ca <_exit+0x12>

080023cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e00a      	b.n	80023f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023de:	f3af 8000 	nop.w
 80023e2:	4601      	mov	r1, r0
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	60ba      	str	r2, [r7, #8]
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbf0      	blt.n	80023de <_read+0x12>
	}

return len;
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e009      	b.n	800242c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	60ba      	str	r2, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf1      	blt.n	8002418 <_write+0x12>
	}
	return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_close>:

int _close(int file)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
	return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002466:	605a      	str	r2, [r3, #4]
	return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_isatty>:

int _isatty(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	return 1;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f005 f950 	bl	800777c <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20018000 	.word	0x20018000
 8002508:	00000400 	.word	0x00000400
 800250c:	20000500 	.word	0x20000500
 8002510:	20001858 	.word	0x20001858

08002514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <SystemInit+0x5c>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <SystemInit+0x5c>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <SystemInit+0x60>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <SystemInit+0x60>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <SystemInit+0x60>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <SystemInit+0x60>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <SystemInit+0x60>)
 8002540:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002544:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002548:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <SystemInit+0x60>)
 800254c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002550:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <SystemInit+0x60>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <SystemInit+0x60>)
 8002558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SystemInit+0x60>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00
 8002574:	40021000 	.word	0x40021000

08002578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800257c:	f7ff ffca 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002580:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002582:	e003      	b.n	800258c <LoopCopyDataInit>

08002584 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002586:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002588:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800258a:	3104      	adds	r1, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800258c:	480a      	ldr	r0, [pc, #40]	; (80025b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002590:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002592:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002594:	d3f6      	bcc.n	8002584 <CopyDataInit>
	ldr	r2, =_sbss
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002598:	e002      	b.n	80025a0 <LoopFillZerobss>

0800259a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800259a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800259c:	f842 3b04 	str.w	r3, [r2], #4

080025a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <LoopForever+0x16>)
	cmp	r2, r3
 80025a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025a4:	d3f9      	bcc.n	800259a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025a6:	f005 f8ef 	bl	8007788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025aa:	f7ff f847 	bl	800163c <main>

080025ae <LoopForever>:

LoopForever:
    b LoopForever
 80025ae:	e7fe      	b.n	80025ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80025b4:	0800aa4c 	.word	0x0800aa4c
	ldr	r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025bc:	20000260 	.word	0x20000260
	ldr	r2, =_sbss
 80025c0:	20000260 	.word	0x20000260
	ldr	r3, = _ebss
 80025c4:	20001858 	.word	0x20001858

080025c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC1_2_IRQHandler>

080025ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f000 f8de 	bl	8002796 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025da:	200f      	movs	r0, #15
 80025dc:	f7ff fe56 	bl	800228c <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	e001      	b.n	80025f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ec:	f7ff fd28 	bl	8002040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025f0:	79fb      	ldrb	r3, [r7, #7]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x20>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_IncTick+0x24>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_IncTick+0x24>)
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000088 	.word	0x20000088
 8002620:	20001844 	.word	0x20001844

08002624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return uwTick;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_GetTick+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20001844 	.word	0x20001844

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ff4c 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027be:	f7ff ff61 	bl	8002684 <__NVIC_GetPriorityGrouping>
 80027c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f7ff ffb1 	bl	8002730 <NVIC_EncodePriority>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff80 	bl	80026dc <__NVIC_SetPriority>
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff54 	bl	80026a0 <__NVIC_EnableIRQ>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e17f      	b.n	8002b10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8171 	beq.w	8002b0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00b      	beq.n	8002848 <HAL_GPIO_Init+0x48>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283c:	2b11      	cmp	r3, #17
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d118      	bne.n	80028e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x128>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b12      	cmp	r3, #18
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	6939      	ldr	r1, [r7, #16]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ac 	beq.w	8002b0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	4b5f      	ldr	r3, [pc, #380]	; (8002b30 <HAL_GPIO_Init+0x330>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	4a5e      	ldr	r2, [pc, #376]	; (8002b30 <HAL_GPIO_Init+0x330>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6613      	str	r3, [r2, #96]	; 0x60
 80029be:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <HAL_GPIO_Init+0x330>)
 80029c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ca:	4a5a      	ldr	r2, [pc, #360]	; (8002b34 <HAL_GPIO_Init+0x334>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029f4:	d025      	beq.n	8002a42 <HAL_GPIO_Init+0x242>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4f      	ldr	r2, [pc, #316]	; (8002b38 <HAL_GPIO_Init+0x338>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <HAL_GPIO_Init+0x23e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4e      	ldr	r2, [pc, #312]	; (8002b3c <HAL_GPIO_Init+0x33c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x23a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4d      	ldr	r2, [pc, #308]	; (8002b40 <HAL_GPIO_Init+0x340>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x236>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4c      	ldr	r2, [pc, #304]	; (8002b44 <HAL_GPIO_Init+0x344>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x232>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <HAL_GPIO_Init+0x348>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x22e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_GPIO_Init+0x34c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x22a>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a42:	2300      	movs	r3, #0
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a54:	4937      	ldr	r1, [pc, #220]	; (8002b34 <HAL_GPIO_Init+0x334>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f47f ae78 	bne.w	8002810 <HAL_GPIO_Init+0x10>
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010000 	.word	0x40010000
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	48000800 	.word	0x48000800
 8002b40:	48000c00 	.word	0x48000c00
 8002b44:	48001000 	.word	0x48001000
 8002b48:	48001400 	.word	0x48001400
 8002b4c:	48001800 	.word	0x48001800
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b62:	e0cd      	b.n	8002d00 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b64:	2201      	movs	r2, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80c0 	beq.w	8002cfa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b7a:	4a68      	ldr	r2, [pc, #416]	; (8002d1c <HAL_GPIO_DeInit+0x1c8>)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ba2:	d025      	beq.n	8002bf0 <HAL_GPIO_DeInit+0x9c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	; (8002d20 <HAL_GPIO_DeInit+0x1cc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d01f      	beq.n	8002bec <HAL_GPIO_DeInit+0x98>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <HAL_GPIO_DeInit+0x1d0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d019      	beq.n	8002be8 <HAL_GPIO_DeInit+0x94>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_GPIO_DeInit+0x1d4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <HAL_GPIO_DeInit+0x90>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	; (8002d2c <HAL_GPIO_DeInit+0x1d8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00d      	beq.n	8002be0 <HAL_GPIO_DeInit+0x8c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_GPIO_DeInit+0x1dc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <HAL_GPIO_DeInit+0x88>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a59      	ldr	r2, [pc, #356]	; (8002d34 <HAL_GPIO_DeInit+0x1e0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_GPIO_DeInit+0x84>
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	e00c      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002bd8:	2307      	movs	r3, #7
 8002bda:	e00a      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002bdc:	2305      	movs	r3, #5
 8002bde:	e008      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002be0:	2304      	movs	r3, #4
 8002be2:	e006      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002be4:	2303      	movs	r3, #3
 8002be6:	e004      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e002      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_GPIO_DeInit+0x9e>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	f002 0203 	and.w	r2, r2, #3
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	4093      	lsls	r3, r2
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d132      	bne.n	8002c68 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	494b      	ldr	r1, [pc, #300]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002c10:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4947      	ldr	r1, [pc, #284]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002c1e:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4944      	ldr	r1, [pc, #272]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002c2c:	4b42      	ldr	r3, [pc, #264]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4940      	ldr	r1, [pc, #256]	; (8002d38 <HAL_GPIO_DeInit+0x1e4>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c4a:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <HAL_GPIO_DeInit+0x1c8>)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	4830      	ldr	r0, [pc, #192]	; (8002d1c <HAL_GPIO_DeInit+0x1c8>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	400a      	ands	r2, r1
 8002c62:	3302      	adds	r3, #2
 8002c64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2103      	movs	r1, #3
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	08d2      	lsrs	r2, r2, #3
 8002c9c:	4019      	ands	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2103      	movs	r1, #3
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2103      	movs	r1, #3
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cea:	2101      	movs	r1, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f af2b 	bne.w	8002b64 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	48000400 	.word	0x48000400
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000c00 	.word	0x48000c00
 8002d2c:	48001000 	.word	0x48001000
 8002d30:	48001400 	.word	0x48001400
 8002d34:	48001800 	.word	0x48001800
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43d9      	mvns	r1, r3
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f806 	bl	8002e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40010400 	.word	0x40010400

08002e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e081      	b.n	8002f2c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff f927 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	; 0x24
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e006      	b.n	8002e9e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d104      	bne.n	8002eb0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69d9      	ldr	r1, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e021      	b.n	8002f8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2224      	movs	r2, #36	; 0x24
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff f8f4 	bl	800214c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 80f9 	bne.w	80031ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x34>
 8002fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ed      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Mem_Write+0x4e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0e6      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fea:	f7ff fb1b 	bl	8002624 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fac3 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d1      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2221      	movs	r2, #33	; 0x21
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003034:	88f8      	ldrh	r0, [r7, #6]
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4603      	mov	r3, r0
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f9d3 	bl	80033f0 <I2C_RequestMemoryWrite>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0a9      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d90e      	bls.n	8003084 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	2300      	movs	r3, #0
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fba5 	bl	80037cc <I2C_TransferConfig>
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fb94 	bl	80037cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 faad 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e07b      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HAL_I2C_Mem_Write+0x1c8>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d130      	bne.n	800315c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2200      	movs	r2, #0
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fa3f 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04d      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d90e      	bls.n	800313c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fb49 	bl	80037cc <I2C_TransferConfig>
 800313a:	e00f      	b.n	800315c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8979      	ldrh	r1, [r7, #10]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fb38 	bl	80037cc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d19e      	bne.n	80030a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa8c 	bl	8003688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01a      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2220      	movs	r2, #32
 8003180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_I2C_Mem_Write+0x224>)
 800318e:	400b      	ands	r3, r1
 8003190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	460b      	mov	r3, r1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 80fd 	bne.w	80033de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x34>
 80031ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0f1      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2C_Mem_Read+0x4e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ea      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003212:	f7ff fa07 	bl	8002624 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f9af 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d5      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	; 0x22
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325c:	88f8      	ldrh	r0, [r7, #6]
 800325e:	893a      	ldrh	r2, [r7, #8]
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4603      	mov	r3, r0
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f913 	bl	8003498 <I2C_RequestMemoryRead>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ad      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2bff      	cmp	r3, #255	; 0xff
 800328c:	d90e      	bls.n	80032ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	b2da      	uxtb	r2, r3
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fa91 	bl	80037cc <I2C_TransferConfig>
 80032aa:	e00f      	b.n	80032cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	8979      	ldrh	r1, [r7, #10]
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa80 	bl	80037cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	2200      	movs	r2, #0
 80032d4:	2104      	movs	r1, #4
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f956 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07c      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d034      	beq.n	800338c <HAL_I2C_Mem_Read+0x1d0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d130      	bne.n	800338c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f927 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04d      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d90e      	bls.n	800336c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	22ff      	movs	r2, #255	; 0xff
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa31 	bl	80037cc <I2C_TransferConfig>
 800336a:	e00f      	b.n	800338c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa20 	bl	80037cc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d19a      	bne.n	80032cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f974 	bl	8003688 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01a      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_I2C_Mem_Read+0x230>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	80002400 	.word	0x80002400
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <I2C_RequestMemoryWrite+0xa4>)
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f9d7 	bl	80037cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8f0 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e02c      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
 8003442:	e015      	b.n	8003470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8d6 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e012      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f884 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	80002000 	.word	0x80002000

08003498 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <I2C_RequestMemoryRead+0xa4>)
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f984 	bl	80037cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f89d 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02c      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
 80034e8:	e015      	b.n	8003516 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f883 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e012      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f831 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	80002000 	.word	0x80002000

08003540 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d103      	bne.n	800355e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d007      	beq.n	800357c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	619a      	str	r2, [r3, #24]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e022      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d01e      	beq.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f83f 	bl	8002624 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00f      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d0cd      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	e02c      	b.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f870 	bl	8003700 <I2C_IsAcknowledgeFailed>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e02a      	b.n	8003680 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d01e      	beq.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe fff7 	bl	8002624 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d1cb      	bne.n	8003616 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003694:	e028      	b.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f830 	bl	8003700 <I2C_IsAcknowledgeFailed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e026      	b.n	80036f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe ffbb 	bl	8002624 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d113      	bne.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e007      	b.n	80036f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d1cf      	bne.n	8003696 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b10      	cmp	r3, #16
 8003718:	d151      	bne.n	80037be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371a:	e022      	b.n	8003762 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d01e      	beq.n	8003762 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7fe ff7e 	bl	8002624 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <I2C_IsAcknowledgeFailed+0x3a>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02e      	b.n	80037c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d1d5      	bne.n	800371c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2210      	movs	r2, #16
 8003776:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2220      	movs	r2, #32
 800377e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fedd 	bl	8003540 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003792:	400b      	ands	r3, r1
 8003794:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f043 0204 	orr.w	r2, r3, #4
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fe00e800 	.word	0xfe00e800

080037cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	4613      	mov	r3, r2
 80037dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	0d5b      	lsrs	r3, r3, #21
 80037e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <I2C_TransferConfig+0x58>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	43db      	mvns	r3, r3
 80037f2:	ea02 0103 	and.w	r1, r2, r3
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037fc:	7a7b      	ldrb	r3, [r7, #9]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	431a      	orrs	r2, r3
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	03ff63ff 	.word	0x03ff63ff

08003828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	d138      	bne.n	80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003848:	2302      	movs	r3, #2
 800384a:	e032      	b.n	80038b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800387a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d139      	bne.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038de:	2302      	movs	r3, #2
 80038e0:	e033      	b.n	800394a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2224      	movs	r2, #36	; 0x24
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003910:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_PWREx_GetVoltageRange+0x18>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40007000 	.word	0x40007000

08003974 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003982:	d130      	bne.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800398c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003990:	d038      	beq.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800399a:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2232      	movs	r2, #50	; 0x32
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	0c9b      	lsrs	r3, r3, #18
 80039b4:	3301      	adds	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b8:	e002      	b.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	d102      	bne.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f2      	bne.n	80039ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e0:	d110      	bne.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00f      	b.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d007      	beq.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039fc:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40007000 	.word	0x40007000
 8003a18:	20000080 	.word	0x20000080
 8003a1c:	431bde83 	.word	0x431bde83

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e3d4      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a32:	4ba1      	ldr	r3, [pc, #644]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a3c:	4b9e      	ldr	r3, [pc, #632]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80e4 	beq.w	8003c1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <HAL_RCC_OscConfig+0x4a>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	f040 808b 	bne.w	8003b78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 8087 	bne.w	8003b78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a6a:	4b93      	ldr	r3, [pc, #588]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_RCC_OscConfig+0x62>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e3ac      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	4b8c      	ldr	r3, [pc, #560]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_RCC_OscConfig+0x7c>
 8003a92:	4b89      	ldr	r3, [pc, #548]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCC_OscConfig+0x88>
 8003a9c:	4b86      	ldr	r3, [pc, #536]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d223      	bcs.n	8003af4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd73 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e38d      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac0:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7c      	ldr	r2, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4977      	ldr	r1, [pc, #476]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	4972      	ldr	r1, [pc, #456]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
 8003af2:	e025      	b.n	8003b40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af4:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6f      	ldr	r2, [pc, #444]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b6d      	ldr	r3, [pc, #436]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	496a      	ldr	r1, [pc, #424]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b12:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	4965      	ldr	r1, [pc, #404]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fd33 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e34d      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b40:	f000 fc36 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	495a      	ldr	r1, [pc, #360]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5c:	4a58      	ldr	r2, [pc, #352]	; (8003cc0 <HAL_RCC_OscConfig+0x2a0>)
 8003b5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b60:	4b58      	ldr	r3, [pc, #352]	; (8003cc4 <HAL_RCC_OscConfig+0x2a4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fb91 	bl	800228c <HAL_InitTick>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d052      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	e331      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d032      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a4c      	ldr	r2, [pc, #304]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fd4a 	bl	8002624 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b94:	f7fe fd46 	bl	8002624 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e31a      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ba6:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb2:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a40      	ldr	r2, [pc, #256]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003bb8:	f043 0308 	orr.w	r3, r3, #8
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	493b      	ldr	r1, [pc, #236]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	4936      	ldr	r1, [pc, #216]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	e01a      	b.n	8003c1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a33      	ldr	r2, [pc, #204]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fd17 	bl	8002624 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fd13 	bl	8002624 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e2e7      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f0      	bne.n	8003bfa <HAL_RCC_OscConfig+0x1da>
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d074      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d005      	beq.n	8003c3a <HAL_RCC_OscConfig+0x21a>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d10e      	bne.n	8003c52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d064      	beq.n	8003d10 <HAL_RCC_OscConfig+0x2f0>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d160      	bne.n	8003d10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e2c4      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x24a>
 8003c5c:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e01d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x286>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c72:	d10c      	bne.n	8003c8e <HAL_RCC_OscConfig+0x26e>
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x286>
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a06      	ldr	r2, [pc, #24]	; (8003cb8 <HAL_RCC_OscConfig+0x298>)
 8003ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe fcb9 	bl	8002624 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb4:	e011      	b.n	8003cda <HAL_RCC_OscConfig+0x2ba>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	0800a610 	.word	0x0800a610
 8003cc0:	20000080 	.word	0x20000080
 8003cc4:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fcac 	bl	8002624 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e280      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cda:	4baf      	ldr	r3, [pc, #700]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x2a8>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fc9c 	bl	8002624 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe fc98 	bl	8002624 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e26c      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d02:	4ba5      	ldr	r3, [pc, #660]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x2d0>
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d060      	beq.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_OscConfig+0x310>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d119      	bne.n	8003d5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d116      	bne.n	8003d5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d30:	4b99      	ldr	r3, [pc, #612]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_OscConfig+0x328>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e249      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	4b93      	ldr	r3, [pc, #588]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	4990      	ldr	r1, [pc, #576]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5c:	e040      	b.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d023      	beq.n	8003dae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d66:	4b8c      	ldr	r3, [pc, #560]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a8b      	ldr	r2, [pc, #556]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe fc57 	bl	8002624 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fe fc53 	bl	8002624 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e227      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d8c:	4b82      	ldr	r3, [pc, #520]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d98:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	497c      	ldr	r1, [pc, #496]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	e018      	b.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dae:	4b7a      	ldr	r3, [pc, #488]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a79      	ldr	r2, [pc, #484]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fe fc33 	bl	8002624 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fc2f 	bl	8002624 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e203      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd4:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfa:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fe fc0e 	bl	8002624 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fc0a 	bl	8002624 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1de      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e1e:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ef      	beq.n	8003e0c <HAL_RCC_OscConfig+0x3ec>
 8003e2c:	e01b      	b.n	8003e66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2e:	4b5a      	ldr	r3, [pc, #360]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fbf1 	bl	8002624 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fe fbed 	bl	8002624 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1c1      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e58:	4b4f      	ldr	r3, [pc, #316]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ef      	bne.n	8003e46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80a6 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e78:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e84:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	4a43      	ldr	r2, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d118      	bne.n	8003ede <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eac:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb8:	f7fe fbb4 	bl	8002624 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fe fbb0 	bl	8002624 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e184      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed2:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_RCC_OscConfig+0x57c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d108      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4d8>
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef6:	e024      	b.n	8003f42 <HAL_RCC_OscConfig+0x522>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d110      	bne.n	8003f22 <HAL_RCC_OscConfig+0x502>
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f20:	e00f      	b.n	8003f42 <HAL_RCC_OscConfig+0x522>
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f32:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f3a:	f023 0304 	bic.w	r3, r3, #4
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fb6b 	bl	8002624 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fe fb67 	bl	8002624 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e139      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x578>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ed      	beq.n	8003f52 <HAL_RCC_OscConfig+0x532>
 8003f76:	e01a      	b.n	8003fae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fb54 	bl	8002624 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f7e:	e00f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fb50 	bl	8002624 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d906      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e122      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fa0:	4b90      	ldr	r3, [pc, #576]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e8      	bne.n	8003f80 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fae:	7ffb      	ldrb	r3, [r7, #31]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b8b      	ldr	r3, [pc, #556]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	4a8a      	ldr	r2, [pc, #552]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8108 	beq.w	80041da <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	f040 80d0 	bne.w	8004174 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fd4:	4b83      	ldr	r3, [pc, #524]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0203 	and.w	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d130      	bne.n	800404a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d127      	bne.n	800404a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d11f      	bne.n	800404a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004014:	2a07      	cmp	r2, #7
 8004016:	bf14      	ite	ne
 8004018:	2201      	movne	r2, #1
 800401a:	2200      	moveq	r2, #0
 800401c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401e:	4293      	cmp	r3, r2
 8004020:	d113      	bne.n	800404a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d109      	bne.n	800404a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	3b01      	subs	r3, #1
 8004044:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d06e      	beq.n	8004128 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d069      	beq.n	8004124 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004050:	4b64      	ldr	r3, [pc, #400]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b7      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800406c:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a5c      	ldr	r2, [pc, #368]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004078:	f7fe fad4 	bl	8002624 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe fad0 	bl	8002624 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0a4      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <HAL_RCC_OscConfig+0x7c8>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b8:	0212      	lsls	r2, r2, #8
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c0:	0852      	lsrs	r2, r2, #1
 80040c2:	3a01      	subs	r2, #1
 80040c4:	0552      	lsls	r2, r2, #21
 80040c6:	4311      	orrs	r1, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040cc:	0852      	lsrs	r2, r2, #1
 80040ce:	3a01      	subs	r2, #1
 80040d0:	0652      	lsls	r2, r2, #25
 80040d2:	4311      	orrs	r1, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d8:	0912      	lsrs	r2, r2, #4
 80040da:	0452      	lsls	r2, r2, #17
 80040dc:	430a      	orrs	r2, r1
 80040de:	4941      	ldr	r1, [pc, #260]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e4:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3e      	ldr	r2, [pc, #248]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f0:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a3b      	ldr	r2, [pc, #236]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040fc:	f7fe fa92 	bl	8002624 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe fa8e 	bl	8002624 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e062      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004122:	e05a      	b.n	80041da <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e059      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d152      	bne.n	80041da <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004134:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800414c:	f7fe fa6a 	bl	8002624 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe fa66 	bl	8002624 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e03a      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x734>
 8004172:	e032      	b.n	80041da <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d02d      	beq.n	80041d6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 8004198:	f023 0303 	bic.w	r3, r3, #3
 800419c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80041a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe fa39 	bl	8002624 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe fa35 	bl	8002624 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e009      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_OscConfig+0x7c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x796>
 80041d4:	e001      	b.n	80041da <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	f99d808c 	.word	0xf99d808c

080041ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0c8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b66      	ldr	r3, [pc, #408]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4961      	ldr	r1, [pc, #388]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b5f      	ldr	r3, [pc, #380]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b0      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d04c      	beq.n	80042d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004244:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d121      	bne.n	8004294 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e09e      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d107      	bne.n	800426c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d115      	bne.n	8004294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e092      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004274:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e086      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004284:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e07e      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004294:	4b42      	ldr	r3, [pc, #264]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 0203 	bic.w	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	493f      	ldr	r1, [pc, #252]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a6:	f7fe f9bd 	bl	8002624 <HAL_GetTick>
 80042aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ae:	f7fe f9b9 	bl	8002624 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e066      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c4:	4b36      	ldr	r3, [pc, #216]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 020c 	and.w	r2, r3, #12
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d1eb      	bne.n	80042ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	492c      	ldr	r1, [pc, #176]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d210      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b26      	ldr	r3, [pc, #152]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	4924      	ldr	r1, [pc, #144]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x1b0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e036      	b.n	8004392 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4918      	ldr	r1, [pc, #96]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4910      	ldr	r1, [pc, #64]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004362:	f000 f825 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004366:	4602      	mov	r2, r0
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <HAL_RCC_ClockConfig+0x1b4>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	490c      	ldr	r1, [pc, #48]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	5ccb      	ldrb	r3, [r1, r3]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd ff80 	bl	800228c <HAL_InitTick>
 800438c:	4603      	mov	r3, r0
 800438e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004390:	7afb      	ldrb	r3, [r7, #11]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40022000 	.word	0x40022000
 80043a0:	40021000 	.word	0x40021000
 80043a4:	0800a610 	.word	0x0800a610
 80043a8:	20000080 	.word	0x20000080
 80043ac:	20000084 	.word	0x20000084

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043be:	4b3e      	ldr	r3, [pc, #248]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c8:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x34>
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d121      	bne.n	8004422 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d11e      	bne.n	8004422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043f0:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e005      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800440c:	4a2b      	ldr	r2, [pc, #172]	; (80044bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d102      	bne.n	800442e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004428:	4b25      	ldr	r3, [pc, #148]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e004      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d101      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004436:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d134      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0xa6>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d003      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0xac>
 8004454:	e005      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004458:	617b      	str	r3, [r7, #20]
      break;
 800445a:	e005      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800445e:	617b      	str	r3, [r7, #20]
      break;
 8004460:	e002      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	617b      	str	r3, [r7, #20]
      break;
 8004466:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	3301      	adds	r3, #1
 8004474:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	fb02 f203 	mul.w	r2, r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	0e5b      	lsrs	r3, r3, #25
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	3301      	adds	r3, #1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044a8:	69bb      	ldr	r3, [r7, #24]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0800a628 	.word	0x0800a628
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	007a1200 	.word	0x007a1200

080044c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000080 	.word	0x20000080

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4904      	ldr	r1, [pc, #16]	; (8004508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	0800a620 	.word	0x0800a620

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004510:	f7ff ffda 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0adb      	lsrs	r3, r3, #11
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	0800a620 	.word	0x0800a620

08004538 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	220f      	movs	r2, #15
 8004546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0203 	and.w	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_RCC_GetClockConfig+0x60>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0207 	and.w	r2, r3, #7
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40022000 	.word	0x40022000

0800459c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045b4:	f7ff f9d0 	bl	8003958 <HAL_PWREx_GetVoltageRange>
 80045b8:	6178      	str	r0, [r7, #20]
 80045ba:	e014      	b.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6593      	str	r3, [r2, #88]	; 0x58
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045d4:	f7ff f9c0 	bl	8003958 <HAL_PWREx_GetVoltageRange>
 80045d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d10b      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d919      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2ba0      	cmp	r3, #160	; 0xa0
 80045f8:	d902      	bls.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045fa:	2302      	movs	r3, #2
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e013      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004600:	2301      	movs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e010      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d902      	bls.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800460c:	2303      	movs	r3, #3
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e00a      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d102      	bne.n	800461e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004618:	2302      	movs	r3, #2
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	e004      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d101      	bne.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004624:	2301      	movs	r3, #1
 8004626:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 0207 	bic.w	r2, r3, #7
 8004630:	4909      	ldr	r1, [pc, #36]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	40022000 	.word	0x40022000

0800465c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004664:	2300      	movs	r3, #0
 8004666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004668:	2300      	movs	r3, #0
 800466a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d041      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004680:	d02a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004682:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004686:	d824      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800468e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004692:	d81e      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469c:	d010      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800469e:	e018      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046a0:	4b86      	ldr	r3, [pc, #536]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a85      	ldr	r2, [pc, #532]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ac:	e015      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fabb 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046be:	e00c      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3320      	adds	r3, #32
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fba6 	bl	8004e18 <RCCEx_PLLSAI2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	74fb      	strb	r3, [r7, #19]
      break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e0:	4b76      	ldr	r3, [pc, #472]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ee:	4973      	ldr	r1, [pc, #460]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046f6:	e001      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d041      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800470c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004710:	d02a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004716:	d824      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471c:	d008      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800471e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004722:	d81e      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472c:	d010      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800472e:	e018      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004730:	4b62      	ldr	r3, [pc, #392]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a61      	ldr	r2, [pc, #388]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800473c:	e015      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa73 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800474e:	e00c      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3320      	adds	r3, #32
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb5e 	bl	8004e18 <RCCEx_PLLSAI2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	74fb      	strb	r3, [r7, #19]
      break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004770:	4b52      	ldr	r3, [pc, #328]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477e:	494f      	ldr	r1, [pc, #316]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004786:	e001      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80a0 	beq.w	80048da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b4:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	4a40      	ldr	r2, [pc, #256]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6593      	str	r3, [r2, #88]	; 0x58
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047cc:	2301      	movs	r3, #1
 80047ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d0:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3a      	ldr	r2, [pc, #232]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047dc:	f7fd ff22 	bl	8002624 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e2:	e009      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e4:	f7fd ff1e 	bl	8002624 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d902      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	74fb      	strb	r3, [r7, #19]
        break;
 80047f6:	e005      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ef      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d15c      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480a:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004814:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01f      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	d019      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004828:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	4a20      	ldr	r2, [pc, #128]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd fedd 	bl	8002624 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486c:	e00b      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fd fed9 	bl	8002624 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d902      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	74fb      	strb	r3, [r7, #19]
            break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ec      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048aa:	4904      	ldr	r1, [pc, #16]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b2:	e009      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c8:	7c7b      	ldrb	r3, [r7, #17]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ce:	4b9e      	ldr	r3, [pc, #632]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	4a9d      	ldr	r2, [pc, #628]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e6:	4b98      	ldr	r3, [pc, #608]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 0203 	bic.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	4994      	ldr	r1, [pc, #592]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004908:	4b8f      	ldr	r3, [pc, #572]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 020c 	bic.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	498c      	ldr	r1, [pc, #560]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492a:	4b87      	ldr	r3, [pc, #540]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	4983      	ldr	r1, [pc, #524]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494c:	4b7e      	ldr	r3, [pc, #504]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	497b      	ldr	r1, [pc, #492]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497c:	4972      	ldr	r1, [pc, #456]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004990:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	496a      	ldr	r1, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b2:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	4961      	ldr	r1, [pc, #388]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049d4:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e2:	4959      	ldr	r1, [pc, #356]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f6:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	4950      	ldr	r1, [pc, #320]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a18:	4b4b      	ldr	r3, [pc, #300]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	4948      	ldr	r1, [pc, #288]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a3a:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	493f      	ldr	r1, [pc, #252]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d028      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6a:	4937      	ldr	r1, [pc, #220]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7c:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	60d3      	str	r3, [r2, #12]
 8004a88:	e011      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a92:	d10c      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f8c8 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d028      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	491f      	ldr	r1, [pc, #124]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae4:	60d3      	str	r3, [r2, #12]
 8004ae6:	e011      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2101      	movs	r1, #1
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f899 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02b      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	4908      	ldr	r1, [pc, #32]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a02      	ldr	r2, [pc, #8]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b42:	60d3      	str	r3, [r2, #12]
 8004b44:	e014      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 f867 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02f      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8a:	4928      	ldr	r1, [pc, #160]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f844 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	74bb      	strb	r3, [r7, #18]
 8004bb6:	e011      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3320      	adds	r3, #32
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f925 	bl	8004e18 <RCCEx_PLLSAI2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	490d      	ldr	r1, [pc, #52]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	4904      	ldr	r1, [pc, #16]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c22:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000

08004c30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c3e:	4b75      	ldr	r3, [pc, #468]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d018      	beq.n	8004c7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c4a:	4b72      	ldr	r3, [pc, #456]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0203 	and.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d10d      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c62:	4b6c      	ldr	r3, [pc, #432]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
       ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d047      	beq.n	8004d06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
 8004c7a:	e044      	b.n	8004d06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d018      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0x86>
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d825      	bhi.n	8004cd4 <RCCEx_PLLSAI1_Config+0xa4>
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d002      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0x62>
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d009      	beq.n	8004ca4 <RCCEx_PLLSAI1_Config+0x74>
 8004c90:	e020      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c92:	4b60      	ldr	r3, [pc, #384]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11d      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca2:	e01a      	b.n	8004cda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ca4:	4b5b      	ldr	r3, [pc, #364]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb4:	e013      	b.n	8004cde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cb6:	4b57      	ldr	r3, [pc, #348]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cc2:	4b54      	ldr	r3, [pc, #336]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cd2:	e006      	b.n	8004ce2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e004      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cea:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	4944      	ldr	r1, [pc, #272]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d17d      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d0c:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a40      	ldr	r2, [pc, #256]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d18:	f7fd fc84 	bl	8002624 <HAL_GetTick>
 8004d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d1e:	e009      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d20:	f7fd fc80 	bl	8002624 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d902      	bls.n	8004d34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	73fb      	strb	r3, [r7, #15]
        break;
 8004d32:	e005      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ef      	bne.n	8004d20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d160      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d111      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6892      	ldr	r2, [r2, #8]
 8004d5c:	0211      	lsls	r1, r2, #8
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0912      	lsrs	r2, r2, #4
 8004d64:	0452      	lsls	r2, r2, #17
 8004d66:	430a      	orrs	r2, r1
 8004d68:	492a      	ldr	r1, [pc, #168]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	610b      	str	r3, [r1, #16]
 8004d6e:	e027      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d112      	bne.n	8004d9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d76:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	0211      	lsls	r1, r2, #8
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6912      	ldr	r2, [r2, #16]
 8004d8c:	0852      	lsrs	r2, r2, #1
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0552      	lsls	r2, r2, #21
 8004d92:	430a      	orrs	r2, r1
 8004d94:	491f      	ldr	r1, [pc, #124]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]
 8004d9a:	e011      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004da4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6892      	ldr	r2, [r2, #8]
 8004dac:	0211      	lsls	r1, r2, #8
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6952      	ldr	r2, [r2, #20]
 8004db2:	0852      	lsrs	r2, r2, #1
 8004db4:	3a01      	subs	r2, #1
 8004db6:	0652      	lsls	r2, r2, #25
 8004db8:	430a      	orrs	r2, r1
 8004dba:	4916      	ldr	r1, [pc, #88]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fd fc2a 	bl	8002624 <HAL_GetTick>
 8004dd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dd2:	e009      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd4:	f7fd fc26 	bl	8002624 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d902      	bls.n	8004de8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	73fb      	strb	r3, [r7, #15]
          break;
 8004de6:	e005      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ef      	beq.n	8004dd4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	4904      	ldr	r1, [pc, #16]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000

08004e18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e26:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e32:	4b67      	ldr	r3, [pc, #412]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0203 	and.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d10d      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
       ||
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
       ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d047      	beq.n	8004eee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
 8004e62:	e044      	b.n	8004eee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d018      	beq.n	8004e9e <RCCEx_PLLSAI2_Config+0x86>
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d825      	bhi.n	8004ebc <RCCEx_PLLSAI2_Config+0xa4>
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d002      	beq.n	8004e7a <RCCEx_PLLSAI2_Config+0x62>
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d009      	beq.n	8004e8c <RCCEx_PLLSAI2_Config+0x74>
 8004e78:	e020      	b.n	8004ebc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11d      	bne.n	8004ec2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8a:	e01a      	b.n	8004ec2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e8c:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d116      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9c:	e013      	b.n	8004ec6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e9e:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eaa:	4b49      	ldr	r3, [pc, #292]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eba:	e006      	b.n	8004eca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e004      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e002      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	4939      	ldr	r1, [pc, #228]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d167      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd fb90 	bl	8002624 <HAL_GetTick>
 8004f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f06:	e009      	b.n	8004f1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f08:	f7fd fb8c 	bl	8002624 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d902      	bls.n	8004f1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	73fb      	strb	r3, [r7, #15]
        break;
 8004f1a:	e005      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ef      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d14a      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d111      	bne.n	8004f58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f34:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	0211      	lsls	r1, r2, #8
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68d2      	ldr	r2, [r2, #12]
 8004f4a:	0912      	lsrs	r2, r2, #4
 8004f4c:	0452      	lsls	r2, r2, #17
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	491f      	ldr	r1, [pc, #124]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	614b      	str	r3, [r1, #20]
 8004f56:	e011      	b.n	8004f7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6892      	ldr	r2, [r2, #8]
 8004f68:	0211      	lsls	r1, r2, #8
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6912      	ldr	r2, [r2, #16]
 8004f6e:	0852      	lsrs	r2, r2, #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0652      	lsls	r2, r2, #25
 8004f74:	430a      	orrs	r2, r1
 8004f76:	4916      	ldr	r1, [pc, #88]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fb4c 	bl	8002624 <HAL_GetTick>
 8004f8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8e:	e009      	b.n	8004fa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f90:	f7fd fb48 	bl	8002624 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d902      	bls.n	8004fa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004fa2:	e005      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ef      	beq.n	8004f90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e049      	b.n	800507a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd f8ca 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fab4 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e04f      	b.n	800513c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <HAL_TIM_Base_Start_IT+0xc4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0x76>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d018      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0x76>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <HAL_TIM_Base_Start_IT+0xc8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0x76>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <HAL_TIM_Base_Start_IT+0xcc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0x76>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIM_Base_Start_IT+0xd0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0x76>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0x76>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a19      	ldr	r2, [pc, #100]	; (800515c <HAL_TIM_Base_Start_IT+0xd8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d115      	bne.n	8005126 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <HAL_TIM_Base_Start_IT+0xdc>)
 8005102:	4013      	ands	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d015      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0xb4>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005112:	d011      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005124:	e008      	b.n	8005138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e000      	b.n	800513a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005138:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40014000 	.word	0x40014000
 8005160:	00010007 	.word	0x00010007

08005164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0202 	mvn.w	r2, #2
 8005190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f9cb 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f9bd 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9ce 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0204 	mvn.w	r2, #4
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f9a1 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f993 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f9a4 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b08      	cmp	r3, #8
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0208 	mvn.w	r2, #8
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2204      	movs	r2, #4
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f977 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f969 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f97a 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b10      	cmp	r3, #16
 8005274:	d122      	bne.n	80052bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b10      	cmp	r3, #16
 8005282:	d11b      	bne.n	80052bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0210 	mvn.w	r2, #16
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2208      	movs	r2, #8
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f94d 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f93f 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f950 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10e      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fc fc4a 	bl	8001b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fafc 	bl	800590c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d10e      	bne.n	8005342 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b80      	cmp	r3, #128	; 0x80
 8005330:	d107      	bne.n	8005342 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800533a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 faef 	bl	8005920 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d10e      	bne.n	800536e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d107      	bne.n	800536e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8fe 	bl	800556a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d10e      	bne.n	800539a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b20      	cmp	r3, #32
 8005388:	d107      	bne.n	800539a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f06f 0220 	mvn.w	r2, #32
 8005392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 faaf 	bl	80058f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_ConfigClockSource+0x18>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0b5      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x184>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f6:	d03e      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0xd4>
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fc:	f200 8087 	bhi.w	800550e <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005404:	f000 8085 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x170>
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d87f      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 800540e:	2b70      	cmp	r3, #112	; 0x70
 8005410:	d01a      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0xa6>
 8005412:	2b70      	cmp	r3, #112	; 0x70
 8005414:	d87b      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 8005416:	2b60      	cmp	r3, #96	; 0x60
 8005418:	d050      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x11a>
 800541a:	2b60      	cmp	r3, #96	; 0x60
 800541c:	d877      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 800541e:	2b50      	cmp	r3, #80	; 0x50
 8005420:	d03c      	beq.n	800549c <HAL_TIM_ConfigClockSource+0xfa>
 8005422:	2b50      	cmp	r3, #80	; 0x50
 8005424:	d873      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d058      	beq.n	80054dc <HAL_TIM_ConfigClockSource+0x13a>
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d86f      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 800542e:	2b30      	cmp	r3, #48	; 0x30
 8005430:	d064      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x15a>
 8005432:	2b30      	cmp	r3, #48	; 0x30
 8005434:	d86b      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 8005436:	2b20      	cmp	r3, #32
 8005438:	d060      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x15a>
 800543a:	2b20      	cmp	r3, #32
 800543c:	d867      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d05c      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x15a>
 8005442:	2b10      	cmp	r3, #16
 8005444:	d05a      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005446:	e062      	b.n	800550e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6899      	ldr	r1, [r3, #8]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f000 f9a6 	bl	80057a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800546a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]
      break;
 8005474:	e04e      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6899      	ldr	r1, [r3, #8]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f000 f98f 	bl	80057a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005498:	609a      	str	r2, [r3, #8]
      break;
 800549a:	e03b      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f000 f903 	bl	80056b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2150      	movs	r1, #80	; 0x50
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f95c 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 80054ba:	e02b      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6859      	ldr	r1, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f000 f922 	bl	8005712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2160      	movs	r1, #96	; 0x60
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f94c 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 80054da:	e01b      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6859      	ldr	r1, [r3, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	461a      	mov	r2, r3
 80054ea:	f000 f8e3 	bl	80056b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2140      	movs	r1, #64	; 0x40
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f93c 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 80054fa:	e00b      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f000 f933 	bl	8005772 <TIM_ITRx_SetConfig>
        break;
 800550c:	e002      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a40      	ldr	r2, [pc, #256]	; (8005694 <TIM_Base_SetConfig+0x114>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d00f      	beq.n	80055c0 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3d      	ldr	r2, [pc, #244]	; (8005698 <TIM_Base_SetConfig+0x118>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3c      	ldr	r2, [pc, #240]	; (800569c <TIM_Base_SetConfig+0x11c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3b      	ldr	r2, [pc, #236]	; (80056a0 <TIM_Base_SetConfig+0x120>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3a      	ldr	r2, [pc, #232]	; (80056a4 <TIM_Base_SetConfig+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d108      	bne.n	80055d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <TIM_Base_SetConfig+0x114>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01f      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e0:	d01b      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2c      	ldr	r2, [pc, #176]	; (8005698 <TIM_Base_SetConfig+0x118>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d017      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2b      	ldr	r2, [pc, #172]	; (800569c <TIM_Base_SetConfig+0x11c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <TIM_Base_SetConfig+0x120>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <TIM_Base_SetConfig+0x124>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a28      	ldr	r2, [pc, #160]	; (80056a8 <TIM_Base_SetConfig+0x128>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a27      	ldr	r2, [pc, #156]	; (80056ac <TIM_Base_SetConfig+0x12c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0x9a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <TIM_Base_SetConfig+0x130>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <TIM_Base_SetConfig+0x114>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0xf8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <TIM_Base_SetConfig+0x124>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0xf8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <TIM_Base_SetConfig+0x128>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0xf8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <TIM_Base_SetConfig+0x12c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0xf8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0f      	ldr	r2, [pc, #60]	; (80056b0 <TIM_Base_SetConfig+0x130>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d103      	bne.n	8005680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	615a      	str	r2, [r3, #20]
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800

080056b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f023 030a 	bic.w	r3, r3, #10
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005712:	b480      	push	{r7}
 8005714:	b087      	sub	sp, #28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0210 	bic.w	r2, r3, #16
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800574e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	f043 0307 	orr.w	r3, r3, #7
 8005794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	021a      	lsls	r2, r3, #8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	609a      	str	r2, [r3, #8]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e068      	b.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2e      	ldr	r2, [pc, #184]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2d      	ldr	r2, [pc, #180]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800583a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01d      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d018      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1b      	ldr	r2, [pc, #108]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10c      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000800 	.word	0x40000800
 80058f0:	40000c00 	.word	0x40000c00
 80058f4:	40014000 	.word	0x40014000

080058f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e040      	b.n	80059c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fc fc3a 	bl	80021d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8c0 	bl	8005af8 <UART_SetConfig>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e022      	b.n	80059c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fb3e 	bl	800600c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800599e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fbc5 	bl	8006150 <UART_CheckIdleState>
 80059c6:	4603      	mov	r3, r0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	f040 8082 	bne.w	8005aee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_UART_Transmit+0x26>
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07a      	b.n	8005af0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_UART_Transmit+0x38>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e073      	b.n	8005af0 <HAL_UART_Transmit+0x120>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2221      	movs	r2, #33	; 0x21
 8005a1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a1e:	f7fc fe01 	bl	8002624 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3c:	d108      	bne.n	8005a50 <HAL_UART_Transmit+0x80>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e003      	b.n	8005a58 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a60:	e02d      	b.n	8005abe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fbb8 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e039      	b.n	8005af0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8e:	b292      	uxth	r2, r2
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3302      	adds	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e008      	b.n	8005aac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1cb      	bne.n	8005a62 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2140      	movs	r1, #64	; 0x40
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fb84 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e005      	b.n	8005af0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b5b0      	push	{r4, r5, r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4bad      	ldr	r3, [pc, #692]	; (8005dd8 <UART_SetConfig+0x2e0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	69f9      	ldr	r1, [r7, #28]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4aa2      	ldr	r2, [pc, #648]	; (8005ddc <UART_SetConfig+0x2e4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a99      	ldr	r2, [pc, #612]	; (8005de0 <UART_SetConfig+0x2e8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d121      	bne.n	8005bc2 <UART_SetConfig+0xca>
 8005b7e:	4b99      	ldr	r3, [pc, #612]	; (8005de4 <UART_SetConfig+0x2ec>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d817      	bhi.n	8005bbc <UART_SetConfig+0xc4>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <UART_SetConfig+0x9c>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb1 	.word	0x08005bb1
 8005b9c:	08005bab 	.word	0x08005bab
 8005ba0:	08005bb7 	.word	0x08005bb7
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	76fb      	strb	r3, [r7, #27]
 8005ba8:	e0e7      	b.n	8005d7a <UART_SetConfig+0x282>
 8005baa:	2302      	movs	r3, #2
 8005bac:	76fb      	strb	r3, [r7, #27]
 8005bae:	e0e4      	b.n	8005d7a <UART_SetConfig+0x282>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	76fb      	strb	r3, [r7, #27]
 8005bb4:	e0e1      	b.n	8005d7a <UART_SetConfig+0x282>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	76fb      	strb	r3, [r7, #27]
 8005bba:	e0de      	b.n	8005d7a <UART_SetConfig+0x282>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	76fb      	strb	r3, [r7, #27]
 8005bc0:	e0db      	b.n	8005d7a <UART_SetConfig+0x282>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a88      	ldr	r2, [pc, #544]	; (8005de8 <UART_SetConfig+0x2f0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d132      	bne.n	8005c32 <UART_SetConfig+0x13a>
 8005bcc:	4b85      	ldr	r3, [pc, #532]	; (8005de4 <UART_SetConfig+0x2ec>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	2b0c      	cmp	r3, #12
 8005bd8:	d828      	bhi.n	8005c2c <UART_SetConfig+0x134>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0xe8>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c15 	.word	0x08005c15
 8005be4:	08005c2d 	.word	0x08005c2d
 8005be8:	08005c2d 	.word	0x08005c2d
 8005bec:	08005c2d 	.word	0x08005c2d
 8005bf0:	08005c21 	.word	0x08005c21
 8005bf4:	08005c2d 	.word	0x08005c2d
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c2d 	.word	0x08005c2d
 8005c00:	08005c1b 	.word	0x08005c1b
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c2d 	.word	0x08005c2d
 8005c10:	08005c27 	.word	0x08005c27
 8005c14:	2300      	movs	r3, #0
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e0af      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	76fb      	strb	r3, [r7, #27]
 8005c1e:	e0ac      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c20:	2304      	movs	r3, #4
 8005c22:	76fb      	strb	r3, [r7, #27]
 8005c24:	e0a9      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c26:	2308      	movs	r3, #8
 8005c28:	76fb      	strb	r3, [r7, #27]
 8005c2a:	e0a6      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	76fb      	strb	r3, [r7, #27]
 8005c30:	e0a3      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <UART_SetConfig+0x2f4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d120      	bne.n	8005c7e <UART_SetConfig+0x186>
 8005c3c:	4b69      	ldr	r3, [pc, #420]	; (8005de4 <UART_SetConfig+0x2ec>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c46:	2b30      	cmp	r3, #48	; 0x30
 8005c48:	d013      	beq.n	8005c72 <UART_SetConfig+0x17a>
 8005c4a:	2b30      	cmp	r3, #48	; 0x30
 8005c4c:	d814      	bhi.n	8005c78 <UART_SetConfig+0x180>
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d009      	beq.n	8005c66 <UART_SetConfig+0x16e>
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d810      	bhi.n	8005c78 <UART_SetConfig+0x180>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <UART_SetConfig+0x168>
 8005c5a:	2b10      	cmp	r3, #16
 8005c5c:	d006      	beq.n	8005c6c <UART_SetConfig+0x174>
 8005c5e:	e00b      	b.n	8005c78 <UART_SetConfig+0x180>
 8005c60:	2300      	movs	r3, #0
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e089      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c66:	2302      	movs	r3, #2
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e086      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	e083      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c72:	2308      	movs	r3, #8
 8005c74:	76fb      	strb	r3, [r7, #27]
 8005c76:	e080      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	e07d      	b.n	8005d7a <UART_SetConfig+0x282>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5b      	ldr	r2, [pc, #364]	; (8005df0 <UART_SetConfig+0x2f8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d120      	bne.n	8005cca <UART_SetConfig+0x1d2>
 8005c88:	4b56      	ldr	r3, [pc, #344]	; (8005de4 <UART_SetConfig+0x2ec>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c92:	2bc0      	cmp	r3, #192	; 0xc0
 8005c94:	d013      	beq.n	8005cbe <UART_SetConfig+0x1c6>
 8005c96:	2bc0      	cmp	r3, #192	; 0xc0
 8005c98:	d814      	bhi.n	8005cc4 <UART_SetConfig+0x1cc>
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d009      	beq.n	8005cb2 <UART_SetConfig+0x1ba>
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d810      	bhi.n	8005cc4 <UART_SetConfig+0x1cc>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <UART_SetConfig+0x1b4>
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d006      	beq.n	8005cb8 <UART_SetConfig+0x1c0>
 8005caa:	e00b      	b.n	8005cc4 <UART_SetConfig+0x1cc>
 8005cac:	2300      	movs	r3, #0
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e063      	b.n	8005d7a <UART_SetConfig+0x282>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e060      	b.n	8005d7a <UART_SetConfig+0x282>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e05d      	b.n	8005d7a <UART_SetConfig+0x282>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e05a      	b.n	8005d7a <UART_SetConfig+0x282>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e057      	b.n	8005d7a <UART_SetConfig+0x282>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a49      	ldr	r2, [pc, #292]	; (8005df4 <UART_SetConfig+0x2fc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d125      	bne.n	8005d20 <UART_SetConfig+0x228>
 8005cd4:	4b43      	ldr	r3, [pc, #268]	; (8005de4 <UART_SetConfig+0x2ec>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce2:	d017      	beq.n	8005d14 <UART_SetConfig+0x21c>
 8005ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce8:	d817      	bhi.n	8005d1a <UART_SetConfig+0x222>
 8005cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cee:	d00b      	beq.n	8005d08 <UART_SetConfig+0x210>
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf4:	d811      	bhi.n	8005d1a <UART_SetConfig+0x222>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <UART_SetConfig+0x20a>
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfe:	d006      	beq.n	8005d0e <UART_SetConfig+0x216>
 8005d00:	e00b      	b.n	8005d1a <UART_SetConfig+0x222>
 8005d02:	2300      	movs	r3, #0
 8005d04:	76fb      	strb	r3, [r7, #27]
 8005d06:	e038      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	76fb      	strb	r3, [r7, #27]
 8005d0c:	e035      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d0e:	2304      	movs	r3, #4
 8005d10:	76fb      	strb	r3, [r7, #27]
 8005d12:	e032      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d14:	2308      	movs	r3, #8
 8005d16:	76fb      	strb	r3, [r7, #27]
 8005d18:	e02f      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	76fb      	strb	r3, [r7, #27]
 8005d1e:	e02c      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2d      	ldr	r2, [pc, #180]	; (8005ddc <UART_SetConfig+0x2e4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d125      	bne.n	8005d76 <UART_SetConfig+0x27e>
 8005d2a:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <UART_SetConfig+0x2ec>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d38:	d017      	beq.n	8005d6a <UART_SetConfig+0x272>
 8005d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d3e:	d817      	bhi.n	8005d70 <UART_SetConfig+0x278>
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d44:	d00b      	beq.n	8005d5e <UART_SetConfig+0x266>
 8005d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4a:	d811      	bhi.n	8005d70 <UART_SetConfig+0x278>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <UART_SetConfig+0x260>
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d54:	d006      	beq.n	8005d64 <UART_SetConfig+0x26c>
 8005d56:	e00b      	b.n	8005d70 <UART_SetConfig+0x278>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	76fb      	strb	r3, [r7, #27]
 8005d5c:	e00d      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	76fb      	strb	r3, [r7, #27]
 8005d62:	e00a      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d64:	2304      	movs	r3, #4
 8005d66:	76fb      	strb	r3, [r7, #27]
 8005d68:	e007      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	76fb      	strb	r3, [r7, #27]
 8005d6e:	e004      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d70:	2310      	movs	r3, #16
 8005d72:	76fb      	strb	r3, [r7, #27]
 8005d74:	e001      	b.n	8005d7a <UART_SetConfig+0x282>
 8005d76:	2310      	movs	r3, #16
 8005d78:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <UART_SetConfig+0x2e4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f040 8087 	bne.w	8005e94 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d86:	7efb      	ldrb	r3, [r7, #27]
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d837      	bhi.n	8005dfc <UART_SetConfig+0x304>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x29c>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005dfd 	.word	0x08005dfd
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dfd 	.word	0x08005dfd
 8005da4:	08005dc7 	.word	0x08005dc7
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005dfd 	.word	0x08005dfd
 8005db0:	08005dfd 	.word	0x08005dfd
 8005db4:	08005dcf 	.word	0x08005dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db8:	f7fe fb92 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8005dbc:	6178      	str	r0, [r7, #20]
        break;
 8005dbe:	e022      	b.n	8005e06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <UART_SetConfig+0x300>)
 8005dc2:	617b      	str	r3, [r7, #20]
        break;
 8005dc4:	e01f      	b.n	8005e06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fe faf3 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005dca:	6178      	str	r0, [r7, #20]
        break;
 8005dcc:	e01b      	b.n	8005e06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd2:	617b      	str	r3, [r7, #20]
        break;
 8005dd4:	e017      	b.n	8005e06 <UART_SetConfig+0x30e>
 8005dd6:	bf00      	nop
 8005dd8:	efff69f3 	.word	0xefff69f3
 8005ddc:	40008000 	.word	0x40008000
 8005de0:	40013800 	.word	0x40013800
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40004400 	.word	0x40004400
 8005dec:	40004800 	.word	0x40004800
 8005df0:	40004c00 	.word	0x40004c00
 8005df4:	40005000 	.word	0x40005000
 8005df8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	76bb      	strb	r3, [r7, #26]
        break;
 8005e04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80f1 	beq.w	8005ff0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d305      	bcc.n	8005e2a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d902      	bls.n	8005e30 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	76bb      	strb	r3, [r7, #26]
 8005e2e:	e0df      	b.n	8005ff0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f04f 0100 	mov.w	r1, #0
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	020b      	lsls	r3, r1, #8
 8005e42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e46:	0202      	lsls	r2, r0, #8
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	6849      	ldr	r1, [r1, #4]
 8005e4c:	0849      	lsrs	r1, r1, #1
 8005e4e:	4608      	mov	r0, r1
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	1814      	adds	r4, r2, r0
 8005e56:	eb43 0501 	adc.w	r5, r3, r1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	4620      	mov	r0, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	f7fa fe9e 	bl	8000ba8 <__aeabi_uldivmod>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4613      	mov	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7a:	d308      	bcc.n	8005e8e <UART_SetConfig+0x396>
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e82:	d204      	bcs.n	8005e8e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	e0b0      	b.n	8005ff0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	76bb      	strb	r3, [r7, #26]
 8005e92:	e0ad      	b.n	8005ff0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9c:	d15c      	bne.n	8005f58 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005e9e:	7efb      	ldrb	r3, [r7, #27]
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d828      	bhi.n	8005ef6 <UART_SetConfig+0x3fe>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x3b4>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	08005ef7 	.word	0x08005ef7
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ef7 	.word	0x08005ef7
 8005ec4:	08005ef7 	.word	0x08005ef7
 8005ec8:	08005ef7 	.word	0x08005ef7
 8005ecc:	08005eef 	.word	0x08005eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fe fb06 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	6178      	str	r0, [r7, #20]
        break;
 8005ed6:	e013      	b.n	8005f00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7fe fb18 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8005edc:	6178      	str	r0, [r7, #20]
        break;
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee0:	4b49      	ldr	r3, [pc, #292]	; (8006008 <UART_SetConfig+0x510>)
 8005ee2:	617b      	str	r3, [r7, #20]
        break;
 8005ee4:	e00c      	b.n	8005f00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fe fa63 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005eea:	6178      	str	r0, [r7, #20]
        break;
 8005eec:	e008      	b.n	8005f00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef2:	617b      	str	r3, [r7, #20]
        break;
 8005ef4:	e004      	b.n	8005f00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	76bb      	strb	r3, [r7, #26]
        break;
 8005efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d074      	beq.n	8005ff0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	005a      	lsls	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b0f      	cmp	r3, #15
 8005f22:	d916      	bls.n	8005f52 <UART_SetConfig+0x45a>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2a:	d212      	bcs.n	8005f52 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f023 030f 	bic.w	r3, r3, #15
 8005f34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	89fb      	ldrh	r3, [r7, #14]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	89fa      	ldrh	r2, [r7, #14]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	e04e      	b.n	8005ff0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	76bb      	strb	r3, [r7, #26]
 8005f56:	e04b      	b.n	8005ff0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f58:	7efb      	ldrb	r3, [r7, #27]
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d827      	bhi.n	8005fae <UART_SetConfig+0x4b6>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x46c>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	08005faf 	.word	0x08005faf
 8005f74:	08005f9f 	.word	0x08005f9f
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005faf 	.word	0x08005faf
 8005f80:	08005faf 	.word	0x08005faf
 8005f84:	08005fa7 	.word	0x08005fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f88:	f7fe faaa 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	6178      	str	r0, [r7, #20]
        break;
 8005f8e:	e013      	b.n	8005fb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f90:	f7fe fabc 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8005f94:	6178      	str	r0, [r7, #20]
        break;
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <UART_SetConfig+0x510>)
 8005f9a:	617b      	str	r3, [r7, #20]
        break;
 8005f9c:	e00c      	b.n	8005fb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9e:	f7fe fa07 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005fa2:	6178      	str	r0, [r7, #20]
        break;
 8005fa4:	e008      	b.n	8005fb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005faa:	617b      	str	r3, [r7, #20]
        break;
 8005fac:	e004      	b.n	8005fb8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	76bb      	strb	r3, [r7, #26]
        break;
 8005fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d018      	beq.n	8005ff0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	085a      	lsrs	r2, r3, #1
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	441a      	add	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d908      	bls.n	8005fec <UART_SetConfig+0x4f4>
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d204      	bcs.n	8005fec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e001      	b.n	8005ff0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ffc:	7ebb      	ldrb	r3, [r7, #26]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bdb0      	pop	{r4, r5, r7, pc}
 8006006:	bf00      	nop
 8006008:	00f42400 	.word	0x00f42400

0800600c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01a      	beq.n	8006122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610a:	d10a      	bne.n	8006122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af02      	add	r7, sp, #8
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006160:	f7fc fa60 	bl	8002624 <HAL_GetTick>
 8006164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d10e      	bne.n	8006192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f82d 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e023      	b.n	80061da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d10e      	bne.n	80061be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f817 	bl	80061e2 <UART_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e00d      	b.n	80061da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f2:	e05e      	b.n	80062b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d05a      	beq.n	80062b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fc:	f7fc fa12 	bl	8002624 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <UART_WaitOnFlagUntilTimeout+0x30>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11b      	bne.n	800624a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006220:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e043      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d02c      	beq.n	80062b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006266:	d124      	bne.n	80062b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006270:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006280:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e00f      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d091      	beq.n	80061f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	4603      	mov	r3, r0
 80062e2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ec:	2b84      	cmp	r3, #132	; 0x84
 80062ee:	d005      	beq.n	80062fc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	3303      	adds	r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800630e:	f000 fadf 	bl	80068d0 <vTaskStartScheduler>
  
  return osOK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}

08006318 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	af04      	add	r7, sp, #16
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d020      	beq.n	800636c <osThreadCreate+0x54>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01c      	beq.n	800636c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685c      	ldr	r4, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691e      	ldr	r6, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff ffc8 	bl	80062da <makeFreeRtosPriority>
 800634a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006354:	9202      	str	r2, [sp, #8]
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	9100      	str	r1, [sp, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	4632      	mov	r2, r6
 800635e:	4629      	mov	r1, r5
 8006360:	4620      	mov	r0, r4
 8006362:	f000 f8ed 	bl	8006540 <xTaskCreateStatic>
 8006366:	4603      	mov	r3, r0
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e01c      	b.n	80063a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685c      	ldr	r4, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006378:	b29e      	uxth	r6, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ffaa 	bl	80062da <makeFreeRtosPriority>
 8006386:	4602      	mov	r2, r0
 8006388:	f107 030c 	add.w	r3, r7, #12
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	9200      	str	r2, [sp, #0]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4632      	mov	r2, r6
 8006394:	4629      	mov	r1, r5
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f92f 	bl	80065fa <xTaskCreate>
 800639c:	4603      	mov	r3, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <osDelay+0x16>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	e000      	b.n	80063c8 <osDelay+0x18>
 80063c6:	2301      	movs	r3, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fa4d 	bl	8006868 <vTaskDelay>
  
  return osOK;
 80063ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f103 0208 	add.w	r2, r3, #8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f103 0208 	add.w	r2, r3, #8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f103 0208 	add.w	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e00c      	b.n	80064b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3308      	adds	r3, #8
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e002      	b.n	80064a8 <vListInsert+0x2e>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d2f6      	bcs.n	80064a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6852      	ldr	r2, [r2, #4]
 800650c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d103      	bne.n	8006520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af04      	add	r7, sp, #16
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xTaskCreateStatic+0x46>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	61fb      	str	r3, [r7, #28]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006586:	2354      	movs	r3, #84	; 0x54
 8006588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b54      	cmp	r3, #84	; 0x54
 800658e:	d00a      	beq.n	80065a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	61bb      	str	r3, [r7, #24]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01e      	beq.n	80065ec <xTaskCreateStatic+0xac>
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065c6:	2300      	movs	r3, #0
 80065c8:	9303      	str	r3, [sp, #12]
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	9302      	str	r3, [sp, #8]
 80065ce:	f107 0314 	add.w	r3, r7, #20
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f850 	bl	8006684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065e6:	f000 f8d5 	bl	8006794 <prvAddNewTaskToReadyList>
 80065ea:	e001      	b.n	80065f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065f0:	697b      	ldr	r3, [r7, #20]
	}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3728      	adds	r7, #40	; 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b08c      	sub	sp, #48	; 0x30
 80065fe:	af04      	add	r7, sp, #16
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 feca 	bl	80073a8 <pvPortMalloc>
 8006614:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800661c:	2054      	movs	r0, #84	; 0x54
 800661e:	f000 fec3 	bl	80073a8 <pvPortMalloc>
 8006622:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
 8006630:	e005      	b.n	800663e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006632:	6978      	ldr	r0, [r7, #20]
 8006634:	f000 ff84 	bl	8007540 <vPortFree>
 8006638:	e001      	b.n	800663e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	2300      	movs	r3, #0
 8006650:	9303      	str	r3, [sp, #12]
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	9302      	str	r3, [sp, #8]
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f80e 	bl	8006684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006668:	69f8      	ldr	r0, [r7, #28]
 800666a:	f000 f893 	bl	8006794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	e002      	b.n	800667a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006674:	f04f 33ff 	mov.w	r3, #4294967295
 8006678:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800667a:	69bb      	ldr	r3, [r7, #24]
	}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800669c:	3b01      	subs	r3, #1
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	617b      	str	r3, [r7, #20]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01f      	beq.n	8006712 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066d2:	2300      	movs	r3, #0
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e012      	b.n	80066fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	7819      	ldrb	r1, [r3, #0]
 80066e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	3334      	adds	r3, #52	; 0x34
 80066e8:	460a      	mov	r2, r1
 80066ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d006      	beq.n	8006706 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d9e9      	bls.n	80066d8 <prvInitialiseNewTask+0x54>
 8006704:	e000      	b.n	8006708 <prvInitialiseNewTask+0x84>
			{
				break;
 8006706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006710:	e003      	b.n	800671a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	2b06      	cmp	r3, #6
 800671e:	d901      	bls.n	8006724 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006720:	2306      	movs	r3, #6
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	2200      	movs	r2, #0
 8006734:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	3304      	adds	r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fe6c 	bl	8006418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	3318      	adds	r3, #24
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fe67 	bl	8006418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	f1c3 0207 	rsb	r2, r3, #7
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	2200      	movs	r2, #0
 8006764:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	69b8      	ldr	r0, [r7, #24]
 8006774:	f000 fc06 	bl	8006f84 <pxPortInitialiseStack>
 8006778:	4602      	mov	r2, r0
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678a:	bf00      	nop
 800678c:	3720      	adds	r7, #32
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800679c:	f000 fd22 	bl	80071e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067a0:	4b2a      	ldr	r3, [pc, #168]	; (800684c <prvAddNewTaskToReadyList+0xb8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	4a29      	ldr	r2, [pc, #164]	; (800684c <prvAddNewTaskToReadyList+0xb8>)
 80067a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <prvAddNewTaskToReadyList+0xbc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067b2:	4a27      	ldr	r2, [pc, #156]	; (8006850 <prvAddNewTaskToReadyList+0xbc>)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <prvAddNewTaskToReadyList+0xb8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d110      	bne.n	80067e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067c0:	f000 fabc 	bl	8006d3c <prvInitialiseTaskLists>
 80067c4:	e00d      	b.n	80067e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <prvAddNewTaskToReadyList+0xc0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ce:	4b20      	ldr	r3, [pc, #128]	; (8006850 <prvAddNewTaskToReadyList+0xbc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	429a      	cmp	r2, r3
 80067da:	d802      	bhi.n	80067e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067dc:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <prvAddNewTaskToReadyList+0xbc>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <prvAddNewTaskToReadyList+0xc4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <prvAddNewTaskToReadyList+0xc4>)
 80067ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	2201      	movs	r2, #1
 80067f2:	409a      	lsls	r2, r3
 80067f4:	4b19      	ldr	r3, [pc, #100]	; (800685c <prvAddNewTaskToReadyList+0xc8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	4a18      	ldr	r2, [pc, #96]	; (800685c <prvAddNewTaskToReadyList+0xc8>)
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4a15      	ldr	r2, [pc, #84]	; (8006860 <prvAddNewTaskToReadyList+0xcc>)
 800680c:	441a      	add	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f7ff fe0c 	bl	8006432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800681a:	f000 fd13 	bl	8007244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800681e:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <prvAddNewTaskToReadyList+0xc0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00e      	beq.n	8006844 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006826:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvAddNewTaskToReadyList+0xbc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	429a      	cmp	r2, r3
 8006832:	d207      	bcs.n	8006844 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <prvAddNewTaskToReadyList+0xd0>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000604 	.word	0x20000604
 8006850:	20000504 	.word	0x20000504
 8006854:	20000610 	.word	0x20000610
 8006858:	20000620 	.word	0x20000620
 800685c:	2000060c 	.word	0x2000060c
 8006860:	20000508 	.word	0x20000508
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <vTaskDelay+0x60>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <vTaskDelay+0x30>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006898:	f000 f87a 	bl	8006990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb0a 	bl	8006eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068a4:	f000 f882 	bl	80069ac <xTaskResumeAll>
 80068a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d107      	bne.n	80068c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <vTaskDelay+0x64>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	2000062c 	.word	0x2000062c
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068de:	463a      	mov	r2, r7
 80068e0:	1d39      	adds	r1, r7, #4
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fa fe8e 	bl	8001608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	9202      	str	r2, [sp, #8]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	460a      	mov	r2, r1
 80068fe:	491e      	ldr	r1, [pc, #120]	; (8006978 <vTaskStartScheduler+0xa8>)
 8006900:	481e      	ldr	r0, [pc, #120]	; (800697c <vTaskStartScheduler+0xac>)
 8006902:	f7ff fe1d 	bl	8006540 <xTaskCreateStatic>
 8006906:	4603      	mov	r3, r0
 8006908:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <vTaskStartScheduler+0xb0>)
 800690a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800690c:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <vTaskStartScheduler+0xb0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e001      	b.n	800691e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d116      	bne.n	8006952 <vTaskStartScheduler+0x82>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	613b      	str	r3, [r7, #16]
}
 8006936:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006938:	4b12      	ldr	r3, [pc, #72]	; (8006984 <vTaskStartScheduler+0xb4>)
 800693a:	f04f 32ff 	mov.w	r2, #4294967295
 800693e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <vTaskStartScheduler+0xb8>)
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <vTaskStartScheduler+0xbc>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800694c:	f000 fba8 	bl	80070a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006950:	e00e      	b.n	8006970 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d10a      	bne.n	8006970 <vTaskStartScheduler+0xa0>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	60fb      	str	r3, [r7, #12]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <vTaskStartScheduler+0x9e>
}
 8006970:	bf00      	nop
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	0800a608 	.word	0x0800a608
 800697c:	08006d0d 	.word	0x08006d0d
 8006980:	20000628 	.word	0x20000628
 8006984:	20000624 	.word	0x20000624
 8006988:	20000610 	.word	0x20000610
 800698c:	20000608 	.word	0x20000608

08006990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006994:	4b04      	ldr	r3, [pc, #16]	; (80069a8 <vTaskSuspendAll+0x18>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	4a03      	ldr	r2, [pc, #12]	; (80069a8 <vTaskSuspendAll+0x18>)
 800699c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800699e:	bf00      	nop
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	2000062c 	.word	0x2000062c

080069ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069ba:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <xTaskResumeAll+0x114>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	603b      	str	r3, [r7, #0]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069d8:	f000 fc04 	bl	80071e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069dc:	4b38      	ldr	r3, [pc, #224]	; (8006ac0 <xTaskResumeAll+0x114>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	4a37      	ldr	r2, [pc, #220]	; (8006ac0 <xTaskResumeAll+0x114>)
 80069e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e6:	4b36      	ldr	r3, [pc, #216]	; (8006ac0 <xTaskResumeAll+0x114>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d161      	bne.n	8006ab2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069ee:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <xTaskResumeAll+0x118>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d05d      	beq.n	8006ab2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069f6:	e02e      	b.n	8006a56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f8:	4b33      	ldr	r3, [pc, #204]	; (8006ac8 <xTaskResumeAll+0x11c>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3318      	adds	r3, #24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fd71 	bl	80064ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fd6c 	bl	80064ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	2201      	movs	r2, #1
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <xTaskResumeAll+0x120>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	4a2a      	ldr	r2, [pc, #168]	; (8006acc <xTaskResumeAll+0x120>)
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <xTaskResumeAll+0x124>)
 8006a34:	441a      	add	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7ff fcf8 	bl	8006432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	4b23      	ldr	r3, [pc, #140]	; (8006ad4 <xTaskResumeAll+0x128>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d302      	bcc.n	8006a56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a50:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <xTaskResumeAll+0x12c>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a56:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <xTaskResumeAll+0x11c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1cc      	bne.n	80069f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a64:	f000 fa08 	bl	8006e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a68:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <xTaskResumeAll+0x130>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d010      	beq.n	8006a96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a74:	f000 f836 	bl	8006ae4 <xTaskIncrementTick>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a7e:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <xTaskResumeAll+0x12c>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f1      	bne.n	8006a74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <xTaskResumeAll+0x130>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <xTaskResumeAll+0x12c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <xTaskResumeAll+0x134>)
 8006aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ab2:	f000 fbc7 	bl	8007244 <vPortExitCritical>

	return xAlreadyYielded;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	2000062c 	.word	0x2000062c
 8006ac4:	20000604 	.word	0x20000604
 8006ac8:	200005c4 	.word	0x200005c4
 8006acc:	2000060c 	.word	0x2000060c
 8006ad0:	20000508 	.word	0x20000508
 8006ad4:	20000504 	.word	0x20000504
 8006ad8:	20000618 	.word	0x20000618
 8006adc:	20000614 	.word	0x20000614
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aee:	4b4e      	ldr	r3, [pc, #312]	; (8006c28 <xTaskIncrementTick+0x144>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 808e 	bne.w	8006c14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006af8:	4b4c      	ldr	r3, [pc, #304]	; (8006c2c <xTaskIncrementTick+0x148>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3301      	adds	r3, #1
 8006afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b00:	4a4a      	ldr	r2, [pc, #296]	; (8006c2c <xTaskIncrementTick+0x148>)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d120      	bne.n	8006b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b0c:	4b48      	ldr	r3, [pc, #288]	; (8006c30 <xTaskIncrementTick+0x14c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	603b      	str	r3, [r7, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xTaskIncrementTick+0x46>
 8006b2c:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <xTaskIncrementTick+0x14c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	4b40      	ldr	r3, [pc, #256]	; (8006c34 <xTaskIncrementTick+0x150>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a3e      	ldr	r2, [pc, #248]	; (8006c30 <xTaskIncrementTick+0x14c>)
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	4a3e      	ldr	r2, [pc, #248]	; (8006c34 <xTaskIncrementTick+0x150>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <xTaskIncrementTick+0x154>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a3c      	ldr	r2, [pc, #240]	; (8006c38 <xTaskIncrementTick+0x154>)
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	f000 f995 	bl	8006e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b4e:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <xTaskIncrementTick+0x158>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d348      	bcc.n	8006bea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b58:	4b35      	ldr	r3, [pc, #212]	; (8006c30 <xTaskIncrementTick+0x14c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d104      	bne.n	8006b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <xTaskIncrementTick+0x158>)
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295
 8006b68:	601a      	str	r2, [r3, #0]
					break;
 8006b6a:	e03e      	b.n	8006bea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6c:	4b30      	ldr	r3, [pc, #192]	; (8006c30 <xTaskIncrementTick+0x14c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d203      	bcs.n	8006b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b84:	4a2d      	ldr	r2, [pc, #180]	; (8006c3c <xTaskIncrementTick+0x158>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b8a:	e02e      	b.n	8006bea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fcab 	bl	80064ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	3318      	adds	r3, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fca2 	bl	80064ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2201      	movs	r2, #1
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <xTaskIncrementTick+0x15c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	4a22      	ldr	r2, [pc, #136]	; (8006c40 <xTaskIncrementTick+0x15c>)
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <xTaskIncrementTick+0x160>)
 8006bc8:	441a      	add	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f7ff fc2e 	bl	8006432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bda:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <xTaskIncrementTick+0x164>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d3b9      	bcc.n	8006b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be8:	e7b6      	b.n	8006b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bea:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <xTaskIncrementTick+0x164>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4914      	ldr	r1, [pc, #80]	; (8006c44 <xTaskIncrementTick+0x160>)
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d901      	bls.n	8006c06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006c02:	2301      	movs	r3, #1
 8006c04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c06:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <xTaskIncrementTick+0x168>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e004      	b.n	8006c1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <xTaskIncrementTick+0x16c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <xTaskIncrementTick+0x16c>)
 8006c1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c1e:	697b      	ldr	r3, [r7, #20]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	2000062c 	.word	0x2000062c
 8006c2c:	20000608 	.word	0x20000608
 8006c30:	200005bc 	.word	0x200005bc
 8006c34:	200005c0 	.word	0x200005c0
 8006c38:	2000061c 	.word	0x2000061c
 8006c3c:	20000624 	.word	0x20000624
 8006c40:	2000060c 	.word	0x2000060c
 8006c44:	20000508 	.word	0x20000508
 8006c48:	20000504 	.word	0x20000504
 8006c4c:	20000618 	.word	0x20000618
 8006c50:	20000614 	.word	0x20000614

08006c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c5a:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <vTaskSwitchContext+0xa4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <vTaskSwitchContext+0xa8>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c68:	e03f      	b.n	8006cea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <vTaskSwitchContext+0xa8>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c70:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <vTaskSwitchContext+0xac>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	f1c3 031f 	rsb	r3, r3, #31
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	491f      	ldr	r1, [pc, #124]	; (8006d04 <vTaskSwitchContext+0xb0>)
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	607b      	str	r3, [r7, #4]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <vTaskSwitchContext+0x5a>
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <vTaskSwitchContext+0xb0>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d104      	bne.n	8006ce0 <vTaskSwitchContext+0x8c>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	605a      	str	r2, [r3, #4]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <vTaskSwitchContext+0xb4>)
 8006ce8:	6013      	str	r3, [r2, #0]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	2000062c 	.word	0x2000062c
 8006cfc:	20000618 	.word	0x20000618
 8006d00:	2000060c 	.word	0x2000060c
 8006d04:	20000508 	.word	0x20000508
 8006d08:	20000504 	.word	0x20000504

08006d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d14:	f000 f852 	bl	8006dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <prvIdleTask+0x28>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d9f9      	bls.n	8006d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <prvIdleTask+0x2c>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d30:	e7f0      	b.n	8006d14 <prvIdleTask+0x8>
 8006d32:	bf00      	nop
 8006d34:	20000508 	.word	0x20000508
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	e00c      	b.n	8006d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <prvInitialiseTaskLists+0x60>)
 8006d54:	4413      	add	r3, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fb3e 	bl	80063d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d9ef      	bls.n	8006d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d68:	480d      	ldr	r0, [pc, #52]	; (8006da0 <prvInitialiseTaskLists+0x64>)
 8006d6a:	f7ff fb35 	bl	80063d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d6e:	480d      	ldr	r0, [pc, #52]	; (8006da4 <prvInitialiseTaskLists+0x68>)
 8006d70:	f7ff fb32 	bl	80063d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d74:	480c      	ldr	r0, [pc, #48]	; (8006da8 <prvInitialiseTaskLists+0x6c>)
 8006d76:	f7ff fb2f 	bl	80063d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d7a:	480c      	ldr	r0, [pc, #48]	; (8006dac <prvInitialiseTaskLists+0x70>)
 8006d7c:	f7ff fb2c 	bl	80063d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d80:	480b      	ldr	r0, [pc, #44]	; (8006db0 <prvInitialiseTaskLists+0x74>)
 8006d82:	f7ff fb29 	bl	80063d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <prvInitialiseTaskLists+0x78>)
 8006d88:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <prvInitialiseTaskLists+0x64>)
 8006d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <prvInitialiseTaskLists+0x7c>)
 8006d8e:	4a05      	ldr	r2, [pc, #20]	; (8006da4 <prvInitialiseTaskLists+0x68>)
 8006d90:	601a      	str	r2, [r3, #0]
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000508 	.word	0x20000508
 8006da0:	20000594 	.word	0x20000594
 8006da4:	200005a8 	.word	0x200005a8
 8006da8:	200005c4 	.word	0x200005c4
 8006dac:	200005d8 	.word	0x200005d8
 8006db0:	200005f0 	.word	0x200005f0
 8006db4:	200005bc 	.word	0x200005bc
 8006db8:	200005c0 	.word	0x200005c0

08006dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dc2:	e019      	b.n	8006df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dc4:	f000 fa0e 	bl	80071e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc8:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <prvCheckTasksWaitingTermination+0x50>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fb89 	bl	80064ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <prvCheckTasksWaitingTermination+0x54>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4a0b      	ldr	r2, [pc, #44]	; (8006e10 <prvCheckTasksWaitingTermination+0x54>)
 8006de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <prvCheckTasksWaitingTermination+0x58>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <prvCheckTasksWaitingTermination+0x58>)
 8006dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dee:	f000 fa29 	bl	8007244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f810 	bl	8006e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <prvCheckTasksWaitingTermination+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e1      	bne.n	8006dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200005d8 	.word	0x200005d8
 8006e10:	20000604 	.word	0x20000604
 8006e14:	200005ec 	.word	0x200005ec

08006e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d108      	bne.n	8006e3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fb86 	bl	8007540 <vPortFree>
				vPortFree( pxTCB );
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fb83 	bl	8007540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e3a:	e018      	b.n	8006e6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d103      	bne.n	8006e4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb7a 	bl	8007540 <vPortFree>
	}
 8006e4c:	e00f      	b.n	8006e6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d00a      	beq.n	8006e6e <prvDeleteTCB+0x56>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <prvDeleteTCB+0x54>
	}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <prvResetNextTaskUnblockTime+0x38>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e90:	e008      	b.n	8006ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <prvResetNextTaskUnblockTime+0x38>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	200005bc 	.word	0x200005bc
 8006eb4:	20000624 	.word	0x20000624

08006eb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ec2:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec8:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff fb0c 	bl	80064ec <uxListRemove>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	43da      	mvns	r2, r3
 8006ee8:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4013      	ands	r3, r2
 8006eee:	4a20      	ldr	r2, [pc, #128]	; (8006f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ef0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d10a      	bne.n	8006f10 <prvAddCurrentTaskToDelayedList+0x58>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f00:	4b1a      	ldr	r3, [pc, #104]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4619      	mov	r1, r3
 8006f08:	481a      	ldr	r0, [pc, #104]	; (8006f74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f0a:	f7ff fa92 	bl	8006432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f0e:	e026      	b.n	8006f5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f18:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d209      	bcs.n	8006f3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f7ff faa0 	bl	800647a <vListInsert>
}
 8006f3a:	e010      	b.n	8006f5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f7ff fa96 	bl	800647a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d202      	bcs.n	8006f5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6013      	str	r3, [r2, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000608 	.word	0x20000608
 8006f6c:	20000504 	.word	0x20000504
 8006f70:	2000060c 	.word	0x2000060c
 8006f74:	200005f0 	.word	0x200005f0
 8006f78:	200005c0 	.word	0x200005c0
 8006f7c:	200005bc 	.word	0x200005bc
 8006f80:	20000624 	.word	0x20000624

08006f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3b04      	subs	r3, #4
 8006f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3b04      	subs	r3, #4
 8006fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 0201 	bic.w	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fb4:	4a0c      	ldr	r2, [pc, #48]	; (8006fe8 <pxPortInitialiseStack+0x64>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b14      	subs	r3, #20
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f06f 0202 	mvn.w	r2, #2
 8006fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3b20      	subs	r3, #32
 8006fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	08006fed 	.word	0x08006fed

08006fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ff6:	4b12      	ldr	r3, [pc, #72]	; (8007040 <prvTaskExitError+0x54>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d00a      	beq.n	8007016 <prvTaskExitError+0x2a>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <prvTaskExitError+0x28>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60bb      	str	r3, [r7, #8]
}
 8007028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800702a:	bf00      	nop
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0fc      	beq.n	800702c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007032:	bf00      	nop
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	2000008c 	.word	0x2000008c
	...

08007050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <pxCurrentTCBConst2>)
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	6808      	ldr	r0, [r1, #0]
 8007056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	f380 8809 	msr	PSP, r0
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	4770      	bx	lr
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst2>:
 8007070:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <prvPortStartFirstTask+0x24>)
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f380 8808 	msr	MSP, r0
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8814 	msr	CONTROL, r0
 800708a:	b662      	cpsie	i
 800708c:	b661      	cpsie	f
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	df00      	svc	0
 8007098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800709a:	bf00      	nop
 800709c:	e000ed08 	.word	0xe000ed08

080070a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070a6:	4b46      	ldr	r3, [pc, #280]	; (80071c0 <xPortStartScheduler+0x120>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a46      	ldr	r2, [pc, #280]	; (80071c4 <xPortStartScheduler+0x124>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d10a      	bne.n	80070c6 <xPortStartScheduler+0x26>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	613b      	str	r3, [r7, #16]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070c6:	4b3e      	ldr	r3, [pc, #248]	; (80071c0 <xPortStartScheduler+0x120>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a3f      	ldr	r2, [pc, #252]	; (80071c8 <xPortStartScheduler+0x128>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10a      	bne.n	80070e6 <xPortStartScheduler+0x46>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <xPortStartScheduler+0x12c>)
 80070e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	22ff      	movs	r2, #255	; 0xff
 80070f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <xPortStartScheduler+0x130>)
 800710c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800710e:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <xPortStartScheduler+0x134>)
 8007110:	2207      	movs	r2, #7
 8007112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007114:	e009      	b.n	800712a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007116:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <xPortStartScheduler+0x134>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3b01      	subs	r3, #1
 800711c:	4a2d      	ldr	r2, [pc, #180]	; (80071d4 <xPortStartScheduler+0x134>)
 800711e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d0ef      	beq.n	8007116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007136:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <xPortStartScheduler+0x134>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1c3 0307 	rsb	r3, r3, #7
 800713e:	2b04      	cmp	r3, #4
 8007140:	d00a      	beq.n	8007158 <xPortStartScheduler+0xb8>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60bb      	str	r3, [r7, #8]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007158:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <xPortStartScheduler+0x134>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <xPortStartScheduler+0x134>)
 8007160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <xPortStartScheduler+0x134>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800716a:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <xPortStartScheduler+0x134>)
 800716c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007176:	4b18      	ldr	r3, [pc, #96]	; (80071d8 <xPortStartScheduler+0x138>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <xPortStartScheduler+0x138>)
 800717c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <xPortStartScheduler+0x138>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a14      	ldr	r2, [pc, #80]	; (80071d8 <xPortStartScheduler+0x138>)
 8007188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800718c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800718e:	f000 f8dd 	bl	800734c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <xPortStartScheduler+0x13c>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007198:	f000 f8fc 	bl	8007394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800719c:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <xPortStartScheduler+0x140>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0f      	ldr	r2, [pc, #60]	; (80071e0 <xPortStartScheduler+0x140>)
 80071a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071a8:	f7ff ff66 	bl	8007078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071ac:	f7ff fd52 	bl	8006c54 <vTaskSwitchContext>
	prvTaskExitError();
 80071b0:	f7ff ff1c 	bl	8006fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	e000ed00 	.word	0xe000ed00
 80071c4:	410fc271 	.word	0x410fc271
 80071c8:	410fc270 	.word	0x410fc270
 80071cc:	e000e400 	.word	0xe000e400
 80071d0:	20000630 	.word	0x20000630
 80071d4:	20000634 	.word	0x20000634
 80071d8:	e000ed20 	.word	0xe000ed20
 80071dc:	2000008c 	.word	0x2000008c
 80071e0:	e000ef34 	.word	0xe000ef34

080071e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	607b      	str	r3, [r7, #4]
}
 80071fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <vPortEnterCritical+0x58>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a0d      	ldr	r2, [pc, #52]	; (800723c <vPortEnterCritical+0x58>)
 8007206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <vPortEnterCritical+0x58>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10f      	bne.n	8007230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <vPortEnterCritical+0x5c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <vPortEnterCritical+0x4c>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	603b      	str	r3, [r7, #0]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <vPortEnterCritical+0x4a>
	}
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	2000008c 	.word	0x2000008c
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800724a:	4b12      	ldr	r3, [pc, #72]	; (8007294 <vPortExitCritical+0x50>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <vPortExitCritical+0x24>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	607b      	str	r3, [r7, #4]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <vPortExitCritical+0x50>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3b01      	subs	r3, #1
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <vPortExitCritical+0x50>)
 8007270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <vPortExitCritical+0x50>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d105      	bne.n	8007286 <vPortExitCritical+0x42>
 800727a:	2300      	movs	r3, #0
 800727c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	2000008c 	.word	0x2000008c
	...

080072a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072a0:	f3ef 8009 	mrs	r0, PSP
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <pxCurrentTCBConst>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	f01e 0f10 	tst.w	lr, #16
 80072b0:	bf08      	it	eq
 80072b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	6010      	str	r0, [r2, #0]
 80072bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072c4:	f380 8811 	msr	BASEPRI, r0
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f7ff fcc0 	bl	8006c54 <vTaskSwitchContext>
 80072d4:	f04f 0000 	mov.w	r0, #0
 80072d8:	f380 8811 	msr	BASEPRI, r0
 80072dc:	bc09      	pop	{r0, r3}
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	6808      	ldr	r0, [r1, #0]
 80072e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e6:	f01e 0f10 	tst.w	lr, #16
 80072ea:	bf08      	it	eq
 80072ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072f0:	f380 8809 	msr	PSP, r0
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w

08007300 <pxCurrentTCBConst>:
 8007300:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop

08007308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007322:	f7ff fbdf 	bl	8006ae4 <xTaskIncrementTick>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <SysTick_Handler+0x40>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f383 8811 	msr	BASEPRI, r3
}
 800733e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007350:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <vPortSetupTimerInterrupt+0x38>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <vPortSetupTimerInterrupt+0x3c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0a      	ldr	r2, [pc, #40]	; (800738c <vPortSetupTimerInterrupt+0x40>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	4a09      	ldr	r2, [pc, #36]	; (8007390 <vPortSetupTimerInterrupt+0x44>)
 800736a:	3b01      	subs	r3, #1
 800736c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	e000e010 	.word	0xe000e010
 8007384:	e000e018 	.word	0xe000e018
 8007388:	20000080 	.word	0x20000080
 800738c:	10624dd3 	.word	0x10624dd3
 8007390:	e000e014 	.word	0xe000e014

08007394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073a4 <vPortEnableVFP+0x10>
 8007398:	6801      	ldr	r1, [r0, #0]
 800739a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800739e:	6001      	str	r1, [r0, #0]
 80073a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073a2:	bf00      	nop
 80073a4:	e000ed88 	.word	0xe000ed88

080073a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08a      	sub	sp, #40	; 0x28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073b4:	f7ff faec 	bl	8006990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073b8:	4b5b      	ldr	r3, [pc, #364]	; (8007528 <pvPortMalloc+0x180>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073c0:	f000 f920 	bl	8007604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073c4:	4b59      	ldr	r3, [pc, #356]	; (800752c <pvPortMalloc+0x184>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 8093 	bne.w	80074f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01d      	beq.n	8007414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073d8:	2208      	movs	r2, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f023 0307 	bic.w	r3, r3, #7
 80073f0:	3308      	adds	r3, #8
 80073f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <pvPortMalloc+0x6c>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	617b      	str	r3, [r7, #20]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d06e      	beq.n	80074f8 <pvPortMalloc+0x150>
 800741a:	4b45      	ldr	r3, [pc, #276]	; (8007530 <pvPortMalloc+0x188>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d869      	bhi.n	80074f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007424:	4b43      	ldr	r3, [pc, #268]	; (8007534 <pvPortMalloc+0x18c>)
 8007426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007428:	4b42      	ldr	r3, [pc, #264]	; (8007534 <pvPortMalloc+0x18c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800742e:	e004      	b.n	800743a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d903      	bls.n	800744c <pvPortMalloc+0xa4>
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f1      	bne.n	8007430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800744c:	4b36      	ldr	r3, [pc, #216]	; (8007528 <pvPortMalloc+0x180>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	429a      	cmp	r2, r3
 8007454:	d050      	beq.n	80074f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2208      	movs	r2, #8
 800745c:	4413      	add	r3, r2
 800745e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	2308      	movs	r3, #8
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	429a      	cmp	r2, r3
 8007476:	d91f      	bls.n	80074b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4413      	add	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <pvPortMalloc+0xf8>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	613b      	str	r3, [r7, #16]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074b2:	69b8      	ldr	r0, [r7, #24]
 80074b4:	f000 f908 	bl	80076c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074b8:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <pvPortMalloc+0x188>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <pvPortMalloc+0x188>)
 80074c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <pvPortMalloc+0x188>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <pvPortMalloc+0x190>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d203      	bcs.n	80074da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074d2:	4b17      	ldr	r3, [pc, #92]	; (8007530 <pvPortMalloc+0x188>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a18      	ldr	r2, [pc, #96]	; (8007538 <pvPortMalloc+0x190>)
 80074d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <pvPortMalloc+0x184>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <pvPortMalloc+0x194>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	4a11      	ldr	r2, [pc, #68]	; (800753c <pvPortMalloc+0x194>)
 80074f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074f8:	f7ff fa58 	bl	80069ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <pvPortMalloc+0x174>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <pvPortMalloc+0x172>
	return pvReturn;
 800751c:	69fb      	ldr	r3, [r7, #28]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3728      	adds	r7, #40	; 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	200011f8 	.word	0x200011f8
 800752c:	2000120c 	.word	0x2000120c
 8007530:	200011fc 	.word	0x200011fc
 8007534:	200011f0 	.word	0x200011f0
 8007538:	20001200 	.word	0x20001200
 800753c:	20001204 	.word	0x20001204

08007540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d04d      	beq.n	80075ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007552:	2308      	movs	r3, #8
 8007554:	425b      	negs	r3, r3
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4413      	add	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <vPortFree+0xb8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4013      	ands	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <vPortFree+0x44>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60fb      	str	r3, [r7, #12]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <vPortFree+0x62>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60bb      	str	r3, [r7, #8]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <vPortFree+0xb8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01e      	beq.n	80075ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11a      	bne.n	80075ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <vPortFree+0xb8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	43db      	mvns	r3, r3
 80075c2:	401a      	ands	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075c8:	f7ff f9e2 	bl	8006990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <vPortFree+0xbc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4413      	add	r3, r2
 80075d6:	4a09      	ldr	r2, [pc, #36]	; (80075fc <vPortFree+0xbc>)
 80075d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f000 f874 	bl	80076c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <vPortFree+0xc0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <vPortFree+0xc0>)
 80075e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ea:	f7ff f9df 	bl	80069ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	2000120c 	.word	0x2000120c
 80075fc:	200011fc 	.word	0x200011fc
 8007600:	20001208 	.word	0x20001208

08007604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800760a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800760e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007610:	4b27      	ldr	r3, [pc, #156]	; (80076b0 <prvHeapInit+0xac>)
 8007612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <prvHeapInit+0xac>)
 8007634:	4413      	add	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <prvHeapInit+0xb0>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <prvHeapInit+0xb0>)
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007650:	2208      	movs	r2, #8
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0307 	bic.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <prvHeapInit+0xb4>)
 8007664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <prvHeapInit+0xb4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <prvHeapInit+0xb4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvHeapInit+0xb4>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <prvHeapInit+0xb8>)
 8007692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <prvHeapInit+0xbc>)
 800769a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <prvHeapInit+0xc0>)
 800769e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000638 	.word	0x20000638
 80076b4:	200011f0 	.word	0x200011f0
 80076b8:	200011f8 	.word	0x200011f8
 80076bc:	20001200 	.word	0x20001200
 80076c0:	200011fc 	.word	0x200011fc
 80076c4:	2000120c 	.word	0x2000120c

080076c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076d0:	4b28      	ldr	r3, [pc, #160]	; (8007774 <prvInsertBlockIntoFreeList+0xac>)
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e002      	b.n	80076dc <prvInsertBlockIntoFreeList+0x14>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d8f7      	bhi.n	80076d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4413      	add	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d108      	bne.n	800770a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	441a      	add	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d118      	bne.n	8007750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <prvInsertBlockIntoFreeList+0xb0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d00d      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	441a      	add	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e008      	b.n	8007758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <prvInsertBlockIntoFreeList+0xb0>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e003      	b.n	8007758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d002      	beq.n	8007766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200011f0 	.word	0x200011f0
 8007778:	200011f8 	.word	0x200011f8

0800777c <__errno>:
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <__errno+0x8>)
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000090 	.word	0x20000090

08007788 <__libc_init_array>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	4d0d      	ldr	r5, [pc, #52]	; (80077c0 <__libc_init_array+0x38>)
 800778c:	4c0d      	ldr	r4, [pc, #52]	; (80077c4 <__libc_init_array+0x3c>)
 800778e:	1b64      	subs	r4, r4, r5
 8007790:	10a4      	asrs	r4, r4, #2
 8007792:	2600      	movs	r6, #0
 8007794:	42a6      	cmp	r6, r4
 8007796:	d109      	bne.n	80077ac <__libc_init_array+0x24>
 8007798:	4d0b      	ldr	r5, [pc, #44]	; (80077c8 <__libc_init_array+0x40>)
 800779a:	4c0c      	ldr	r4, [pc, #48]	; (80077cc <__libc_init_array+0x44>)
 800779c:	f002 feb4 	bl	800a508 <_init>
 80077a0:	1b64      	subs	r4, r4, r5
 80077a2:	10a4      	asrs	r4, r4, #2
 80077a4:	2600      	movs	r6, #0
 80077a6:	42a6      	cmp	r6, r4
 80077a8:	d105      	bne.n	80077b6 <__libc_init_array+0x2e>
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b0:	4798      	blx	r3
 80077b2:	3601      	adds	r6, #1
 80077b4:	e7ee      	b.n	8007794 <__libc_init_array+0xc>
 80077b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ba:	4798      	blx	r3
 80077bc:	3601      	adds	r6, #1
 80077be:	e7f2      	b.n	80077a6 <__libc_init_array+0x1e>
 80077c0:	0800aa44 	.word	0x0800aa44
 80077c4:	0800aa44 	.word	0x0800aa44
 80077c8:	0800aa44 	.word	0x0800aa44
 80077cc:	0800aa48 	.word	0x0800aa48

080077d0 <memcpy>:
 80077d0:	440a      	add	r2, r1
 80077d2:	4291      	cmp	r1, r2
 80077d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077d8:	d100      	bne.n	80077dc <memcpy+0xc>
 80077da:	4770      	bx	lr
 80077dc:	b510      	push	{r4, lr}
 80077de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077e6:	4291      	cmp	r1, r2
 80077e8:	d1f9      	bne.n	80077de <memcpy+0xe>
 80077ea:	bd10      	pop	{r4, pc}

080077ec <memset>:
 80077ec:	4402      	add	r2, r0
 80077ee:	4603      	mov	r3, r0
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	f803 1b01 	strb.w	r1, [r3], #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <__cvt>:
 80077fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	ec55 4b10 	vmov	r4, r5, d0
 8007804:	2d00      	cmp	r5, #0
 8007806:	460e      	mov	r6, r1
 8007808:	4619      	mov	r1, r3
 800780a:	462b      	mov	r3, r5
 800780c:	bfbb      	ittet	lt
 800780e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007812:	461d      	movlt	r5, r3
 8007814:	2300      	movge	r3, #0
 8007816:	232d      	movlt	r3, #45	; 0x2d
 8007818:	700b      	strb	r3, [r1, #0]
 800781a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800781c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007820:	4691      	mov	r9, r2
 8007822:	f023 0820 	bic.w	r8, r3, #32
 8007826:	bfbc      	itt	lt
 8007828:	4622      	movlt	r2, r4
 800782a:	4614      	movlt	r4, r2
 800782c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007830:	d005      	beq.n	800783e <__cvt+0x42>
 8007832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007836:	d100      	bne.n	800783a <__cvt+0x3e>
 8007838:	3601      	adds	r6, #1
 800783a:	2102      	movs	r1, #2
 800783c:	e000      	b.n	8007840 <__cvt+0x44>
 800783e:	2103      	movs	r1, #3
 8007840:	ab03      	add	r3, sp, #12
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	ab02      	add	r3, sp, #8
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	ec45 4b10 	vmov	d0, r4, r5
 800784c:	4653      	mov	r3, sl
 800784e:	4632      	mov	r2, r6
 8007850:	f000 fcea 	bl	8008228 <_dtoa_r>
 8007854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007858:	4607      	mov	r7, r0
 800785a:	d102      	bne.n	8007862 <__cvt+0x66>
 800785c:	f019 0f01 	tst.w	r9, #1
 8007860:	d022      	beq.n	80078a8 <__cvt+0xac>
 8007862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007866:	eb07 0906 	add.w	r9, r7, r6
 800786a:	d110      	bne.n	800788e <__cvt+0x92>
 800786c:	783b      	ldrb	r3, [r7, #0]
 800786e:	2b30      	cmp	r3, #48	; 0x30
 8007870:	d10a      	bne.n	8007888 <__cvt+0x8c>
 8007872:	2200      	movs	r2, #0
 8007874:	2300      	movs	r3, #0
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800787e:	b918      	cbnz	r0, 8007888 <__cvt+0x8c>
 8007880:	f1c6 0601 	rsb	r6, r6, #1
 8007884:	f8ca 6000 	str.w	r6, [sl]
 8007888:	f8da 3000 	ldr.w	r3, [sl]
 800788c:	4499      	add	r9, r3
 800788e:	2200      	movs	r2, #0
 8007890:	2300      	movs	r3, #0
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f9 f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800789a:	b108      	cbz	r0, 80078a0 <__cvt+0xa4>
 800789c:	f8cd 900c 	str.w	r9, [sp, #12]
 80078a0:	2230      	movs	r2, #48	; 0x30
 80078a2:	9b03      	ldr	r3, [sp, #12]
 80078a4:	454b      	cmp	r3, r9
 80078a6:	d307      	bcc.n	80078b8 <__cvt+0xbc>
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ac:	1bdb      	subs	r3, r3, r7
 80078ae:	4638      	mov	r0, r7
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	b004      	add	sp, #16
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	1c59      	adds	r1, r3, #1
 80078ba:	9103      	str	r1, [sp, #12]
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e7f0      	b.n	80078a2 <__cvt+0xa6>

080078c0 <__exponent>:
 80078c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078c2:	4603      	mov	r3, r0
 80078c4:	2900      	cmp	r1, #0
 80078c6:	bfb8      	it	lt
 80078c8:	4249      	neglt	r1, r1
 80078ca:	f803 2b02 	strb.w	r2, [r3], #2
 80078ce:	bfb4      	ite	lt
 80078d0:	222d      	movlt	r2, #45	; 0x2d
 80078d2:	222b      	movge	r2, #43	; 0x2b
 80078d4:	2909      	cmp	r1, #9
 80078d6:	7042      	strb	r2, [r0, #1]
 80078d8:	dd2a      	ble.n	8007930 <__exponent+0x70>
 80078da:	f10d 0407 	add.w	r4, sp, #7
 80078de:	46a4      	mov	ip, r4
 80078e0:	270a      	movs	r7, #10
 80078e2:	46a6      	mov	lr, r4
 80078e4:	460a      	mov	r2, r1
 80078e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80078ea:	fb07 1516 	mls	r5, r7, r6, r1
 80078ee:	3530      	adds	r5, #48	; 0x30
 80078f0:	2a63      	cmp	r2, #99	; 0x63
 80078f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80078f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078fa:	4631      	mov	r1, r6
 80078fc:	dcf1      	bgt.n	80078e2 <__exponent+0x22>
 80078fe:	3130      	adds	r1, #48	; 0x30
 8007900:	f1ae 0502 	sub.w	r5, lr, #2
 8007904:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007908:	1c44      	adds	r4, r0, #1
 800790a:	4629      	mov	r1, r5
 800790c:	4561      	cmp	r1, ip
 800790e:	d30a      	bcc.n	8007926 <__exponent+0x66>
 8007910:	f10d 0209 	add.w	r2, sp, #9
 8007914:	eba2 020e 	sub.w	r2, r2, lr
 8007918:	4565      	cmp	r5, ip
 800791a:	bf88      	it	hi
 800791c:	2200      	movhi	r2, #0
 800791e:	4413      	add	r3, r2
 8007920:	1a18      	subs	r0, r3, r0
 8007922:	b003      	add	sp, #12
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800792a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800792e:	e7ed      	b.n	800790c <__exponent+0x4c>
 8007930:	2330      	movs	r3, #48	; 0x30
 8007932:	3130      	adds	r1, #48	; 0x30
 8007934:	7083      	strb	r3, [r0, #2]
 8007936:	70c1      	strb	r1, [r0, #3]
 8007938:	1d03      	adds	r3, r0, #4
 800793a:	e7f1      	b.n	8007920 <__exponent+0x60>

0800793c <_printf_float>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	ed2d 8b02 	vpush	{d8}
 8007944:	b08d      	sub	sp, #52	; 0x34
 8007946:	460c      	mov	r4, r1
 8007948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800794c:	4616      	mov	r6, r2
 800794e:	461f      	mov	r7, r3
 8007950:	4605      	mov	r5, r0
 8007952:	f001 fa55 	bl	8008e00 <_localeconv_r>
 8007956:	f8d0 a000 	ldr.w	sl, [r0]
 800795a:	4650      	mov	r0, sl
 800795c:	f7f8 fc38 	bl	80001d0 <strlen>
 8007960:	2300      	movs	r3, #0
 8007962:	930a      	str	r3, [sp, #40]	; 0x28
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	9305      	str	r3, [sp, #20]
 8007968:	f8d8 3000 	ldr.w	r3, [r8]
 800796c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007970:	3307      	adds	r3, #7
 8007972:	f023 0307 	bic.w	r3, r3, #7
 8007976:	f103 0208 	add.w	r2, r3, #8
 800797a:	f8c8 2000 	str.w	r2, [r8]
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007986:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800798a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	f8cd 8018 	str.w	r8, [sp, #24]
 8007994:	ee08 0a10 	vmov	s16, r0
 8007998:	4b9f      	ldr	r3, [pc, #636]	; (8007c18 <_printf_float+0x2dc>)
 800799a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	f7f9 f8c3 	bl	8000b2c <__aeabi_dcmpun>
 80079a6:	bb88      	cbnz	r0, 8007a0c <_printf_float+0xd0>
 80079a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ac:	4b9a      	ldr	r3, [pc, #616]	; (8007c18 <_printf_float+0x2dc>)
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	f7f9 f89d 	bl	8000af0 <__aeabi_dcmple>
 80079b6:	bb48      	cbnz	r0, 8007a0c <_printf_float+0xd0>
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f88c 	bl	8000adc <__aeabi_dcmplt>
 80079c4:	b110      	cbz	r0, 80079cc <_printf_float+0x90>
 80079c6:	232d      	movs	r3, #45	; 0x2d
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079cc:	4b93      	ldr	r3, [pc, #588]	; (8007c1c <_printf_float+0x2e0>)
 80079ce:	4894      	ldr	r0, [pc, #592]	; (8007c20 <_printf_float+0x2e4>)
 80079d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079d4:	bf94      	ite	ls
 80079d6:	4698      	movls	r8, r3
 80079d8:	4680      	movhi	r8, r0
 80079da:	2303      	movs	r3, #3
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	9b05      	ldr	r3, [sp, #20]
 80079e0:	f023 0204 	bic.w	r2, r3, #4
 80079e4:	6022      	str	r2, [r4, #0]
 80079e6:	f04f 0900 	mov.w	r9, #0
 80079ea:	9700      	str	r7, [sp, #0]
 80079ec:	4633      	mov	r3, r6
 80079ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f9d8 	bl	8007da8 <_printf_common>
 80079f8:	3001      	adds	r0, #1
 80079fa:	f040 8090 	bne.w	8007b1e <_printf_float+0x1e2>
 80079fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007a02:	b00d      	add	sp, #52	; 0x34
 8007a04:	ecbd 8b02 	vpop	{d8}
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	4649      	mov	r1, r9
 8007a14:	f7f9 f88a 	bl	8000b2c <__aeabi_dcmpun>
 8007a18:	b140      	cbz	r0, 8007a2c <_printf_float+0xf0>
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bfbc      	itt	lt
 8007a20:	232d      	movlt	r3, #45	; 0x2d
 8007a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a26:	487f      	ldr	r0, [pc, #508]	; (8007c24 <_printf_float+0x2e8>)
 8007a28:	4b7f      	ldr	r3, [pc, #508]	; (8007c28 <_printf_float+0x2ec>)
 8007a2a:	e7d1      	b.n	80079d0 <_printf_float+0x94>
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a32:	9206      	str	r2, [sp, #24]
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	d13f      	bne.n	8007ab8 <_printf_float+0x17c>
 8007a38:	2306      	movs	r3, #6
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	6861      	ldr	r1, [r4, #4]
 8007a40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a44:	2300      	movs	r3, #0
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	ab0a      	add	r3, sp, #40	; 0x28
 8007a4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a4e:	ab09      	add	r3, sp, #36	; 0x24
 8007a50:	ec49 8b10 	vmov	d0, r8, r9
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	6022      	str	r2, [r4, #0]
 8007a58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f7ff fecd 	bl	80077fc <__cvt>
 8007a62:	9b06      	ldr	r3, [sp, #24]
 8007a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a66:	2b47      	cmp	r3, #71	; 0x47
 8007a68:	4680      	mov	r8, r0
 8007a6a:	d108      	bne.n	8007a7e <_printf_float+0x142>
 8007a6c:	1cc8      	adds	r0, r1, #3
 8007a6e:	db02      	blt.n	8007a76 <_printf_float+0x13a>
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	4299      	cmp	r1, r3
 8007a74:	dd41      	ble.n	8007afa <_printf_float+0x1be>
 8007a76:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a7a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a82:	d820      	bhi.n	8007ac6 <_printf_float+0x18a>
 8007a84:	3901      	subs	r1, #1
 8007a86:	465a      	mov	r2, fp
 8007a88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a8e:	f7ff ff17 	bl	80078c0 <__exponent>
 8007a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a94:	1813      	adds	r3, r2, r0
 8007a96:	2a01      	cmp	r2, #1
 8007a98:	4681      	mov	r9, r0
 8007a9a:	6123      	str	r3, [r4, #16]
 8007a9c:	dc02      	bgt.n	8007aa4 <_printf_float+0x168>
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	07d2      	lsls	r2, r2, #31
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_float+0x16c>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d09c      	beq.n	80079ea <_printf_float+0xae>
 8007ab0:	232d      	movs	r3, #45	; 0x2d
 8007ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab6:	e798      	b.n	80079ea <_printf_float+0xae>
 8007ab8:	9a06      	ldr	r2, [sp, #24]
 8007aba:	2a47      	cmp	r2, #71	; 0x47
 8007abc:	d1be      	bne.n	8007a3c <_printf_float+0x100>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1bc      	bne.n	8007a3c <_printf_float+0x100>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7b9      	b.n	8007a3a <_printf_float+0xfe>
 8007ac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aca:	d118      	bne.n	8007afe <_printf_float+0x1c2>
 8007acc:	2900      	cmp	r1, #0
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	dd0b      	ble.n	8007aea <_printf_float+0x1ae>
 8007ad2:	6121      	str	r1, [r4, #16]
 8007ad4:	b913      	cbnz	r3, 8007adc <_printf_float+0x1a0>
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	07d0      	lsls	r0, r2, #31
 8007ada:	d502      	bpl.n	8007ae2 <_printf_float+0x1a6>
 8007adc:	3301      	adds	r3, #1
 8007ade:	440b      	add	r3, r1
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ae4:	f04f 0900 	mov.w	r9, #0
 8007ae8:	e7de      	b.n	8007aa8 <_printf_float+0x16c>
 8007aea:	b913      	cbnz	r3, 8007af2 <_printf_float+0x1b6>
 8007aec:	6822      	ldr	r2, [r4, #0]
 8007aee:	07d2      	lsls	r2, r2, #31
 8007af0:	d501      	bpl.n	8007af6 <_printf_float+0x1ba>
 8007af2:	3302      	adds	r3, #2
 8007af4:	e7f4      	b.n	8007ae0 <_printf_float+0x1a4>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e7f2      	b.n	8007ae0 <_printf_float+0x1a4>
 8007afa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	4299      	cmp	r1, r3
 8007b02:	db05      	blt.n	8007b10 <_printf_float+0x1d4>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	6121      	str	r1, [r4, #16]
 8007b08:	07d8      	lsls	r0, r3, #31
 8007b0a:	d5ea      	bpl.n	8007ae2 <_printf_float+0x1a6>
 8007b0c:	1c4b      	adds	r3, r1, #1
 8007b0e:	e7e7      	b.n	8007ae0 <_printf_float+0x1a4>
 8007b10:	2900      	cmp	r1, #0
 8007b12:	bfd4      	ite	le
 8007b14:	f1c1 0202 	rsble	r2, r1, #2
 8007b18:	2201      	movgt	r2, #1
 8007b1a:	4413      	add	r3, r2
 8007b1c:	e7e0      	b.n	8007ae0 <_printf_float+0x1a4>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	055a      	lsls	r2, r3, #21
 8007b22:	d407      	bmi.n	8007b34 <_printf_float+0x1f8>
 8007b24:	6923      	ldr	r3, [r4, #16]
 8007b26:	4642      	mov	r2, r8
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d12c      	bne.n	8007b8c <_printf_float+0x250>
 8007b32:	e764      	b.n	80079fe <_printf_float+0xc2>
 8007b34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b38:	f240 80e0 	bls.w	8007cfc <_printf_float+0x3c0>
 8007b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b40:	2200      	movs	r2, #0
 8007b42:	2300      	movs	r3, #0
 8007b44:	f7f8 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d034      	beq.n	8007bb6 <_printf_float+0x27a>
 8007b4c:	4a37      	ldr	r2, [pc, #220]	; (8007c2c <_printf_float+0x2f0>)
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af51 	beq.w	80079fe <_printf_float+0xc2>
 8007b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b60:	429a      	cmp	r2, r3
 8007b62:	db02      	blt.n	8007b6a <_printf_float+0x22e>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07d8      	lsls	r0, r3, #31
 8007b68:	d510      	bpl.n	8007b8c <_printf_float+0x250>
 8007b6a:	ee18 3a10 	vmov	r3, s16
 8007b6e:	4652      	mov	r2, sl
 8007b70:	4631      	mov	r1, r6
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f af41 	beq.w	80079fe <_printf_float+0xc2>
 8007b7c:	f04f 0800 	mov.w	r8, #0
 8007b80:	f104 091a 	add.w	r9, r4, #26
 8007b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b86:	3b01      	subs	r3, #1
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	dc09      	bgt.n	8007ba0 <_printf_float+0x264>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	079b      	lsls	r3, r3, #30
 8007b90:	f100 8105 	bmi.w	8007d9e <_printf_float+0x462>
 8007b94:	68e0      	ldr	r0, [r4, #12]
 8007b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b98:	4298      	cmp	r0, r3
 8007b9a:	bfb8      	it	lt
 8007b9c:	4618      	movlt	r0, r3
 8007b9e:	e730      	b.n	8007a02 <_printf_float+0xc6>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	464a      	mov	r2, r9
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	f43f af27 	beq.w	80079fe <_printf_float+0xc2>
 8007bb0:	f108 0801 	add.w	r8, r8, #1
 8007bb4:	e7e6      	b.n	8007b84 <_printf_float+0x248>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	dc39      	bgt.n	8007c30 <_printf_float+0x2f4>
 8007bbc:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <_printf_float+0x2f0>)
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af19 	beq.w	80079fe <_printf_float+0xc2>
 8007bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d102      	bne.n	8007bda <_printf_float+0x29e>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	07d9      	lsls	r1, r3, #31
 8007bd8:	d5d8      	bpl.n	8007b8c <_printf_float+0x250>
 8007bda:	ee18 3a10 	vmov	r3, s16
 8007bde:	4652      	mov	r2, sl
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f af09 	beq.w	80079fe <_printf_float+0xc2>
 8007bec:	f04f 0900 	mov.w	r9, #0
 8007bf0:	f104 0a1a 	add.w	sl, r4, #26
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	425b      	negs	r3, r3
 8007bf8:	454b      	cmp	r3, r9
 8007bfa:	dc01      	bgt.n	8007c00 <_printf_float+0x2c4>
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfe:	e792      	b.n	8007b26 <_printf_float+0x1ea>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4652      	mov	r2, sl
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f aef7 	beq.w	80079fe <_printf_float+0xc2>
 8007c10:	f109 0901 	add.w	r9, r9, #1
 8007c14:	e7ee      	b.n	8007bf4 <_printf_float+0x2b8>
 8007c16:	bf00      	nop
 8007c18:	7fefffff 	.word	0x7fefffff
 8007c1c:	0800a65c 	.word	0x0800a65c
 8007c20:	0800a660 	.word	0x0800a660
 8007c24:	0800a668 	.word	0x0800a668
 8007c28:	0800a664 	.word	0x0800a664
 8007c2c:	0800a66c 	.word	0x0800a66c
 8007c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c34:	429a      	cmp	r2, r3
 8007c36:	bfa8      	it	ge
 8007c38:	461a      	movge	r2, r3
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	4691      	mov	r9, r2
 8007c3e:	dc37      	bgt.n	8007cb0 <_printf_float+0x374>
 8007c40:	f04f 0b00 	mov.w	fp, #0
 8007c44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c48:	f104 021a 	add.w	r2, r4, #26
 8007c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	eba3 0309 	sub.w	r3, r3, r9
 8007c54:	455b      	cmp	r3, fp
 8007c56:	dc33      	bgt.n	8007cc0 <_printf_float+0x384>
 8007c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	db3b      	blt.n	8007cd8 <_printf_float+0x39c>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07da      	lsls	r2, r3, #31
 8007c64:	d438      	bmi.n	8007cd8 <_printf_float+0x39c>
 8007c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	eba2 0901 	sub.w	r9, r2, r1
 8007c72:	4599      	cmp	r9, r3
 8007c74:	bfa8      	it	ge
 8007c76:	4699      	movge	r9, r3
 8007c78:	f1b9 0f00 	cmp.w	r9, #0
 8007c7c:	dc35      	bgt.n	8007cea <_printf_float+0x3ae>
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c86:	f104 0a1a 	add.w	sl, r4, #26
 8007c8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	eba3 0309 	sub.w	r3, r3, r9
 8007c94:	4543      	cmp	r3, r8
 8007c96:	f77f af79 	ble.w	8007b8c <_printf_float+0x250>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f43f aeaa 	beq.w	80079fe <_printf_float+0xc2>
 8007caa:	f108 0801 	add.w	r8, r8, #1
 8007cae:	e7ec      	b.n	8007c8a <_printf_float+0x34e>
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d1c0      	bne.n	8007c40 <_printf_float+0x304>
 8007cbe:	e69e      	b.n	80079fe <_printf_float+0xc2>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	9205      	str	r2, [sp, #20]
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f43f ae97 	beq.w	80079fe <_printf_float+0xc2>
 8007cd0:	9a05      	ldr	r2, [sp, #20]
 8007cd2:	f10b 0b01 	add.w	fp, fp, #1
 8007cd6:	e7b9      	b.n	8007c4c <_printf_float+0x310>
 8007cd8:	ee18 3a10 	vmov	r3, s16
 8007cdc:	4652      	mov	r2, sl
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d1be      	bne.n	8007c66 <_printf_float+0x32a>
 8007ce8:	e689      	b.n	80079fe <_printf_float+0xc2>
 8007cea:	9a05      	ldr	r2, [sp, #20]
 8007cec:	464b      	mov	r3, r9
 8007cee:	4442      	add	r2, r8
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b8      	blx	r7
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d1c1      	bne.n	8007c7e <_printf_float+0x342>
 8007cfa:	e680      	b.n	80079fe <_printf_float+0xc2>
 8007cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfe:	2a01      	cmp	r2, #1
 8007d00:	dc01      	bgt.n	8007d06 <_printf_float+0x3ca>
 8007d02:	07db      	lsls	r3, r3, #31
 8007d04:	d538      	bpl.n	8007d78 <_printf_float+0x43c>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4642      	mov	r2, r8
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f ae74 	beq.w	80079fe <_printf_float+0xc2>
 8007d16:	ee18 3a10 	vmov	r3, s16
 8007d1a:	4652      	mov	r2, sl
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4628      	mov	r0, r5
 8007d20:	47b8      	blx	r7
 8007d22:	3001      	adds	r0, #1
 8007d24:	f43f ae6b 	beq.w	80079fe <_printf_float+0xc2>
 8007d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f7f8 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d34:	b9d8      	cbnz	r0, 8007d6e <_printf_float+0x432>
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	f108 0201 	add.w	r2, r8, #1
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	d10e      	bne.n	8007d66 <_printf_float+0x42a>
 8007d48:	e659      	b.n	80079fe <_printf_float+0xc2>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	f43f ae52 	beq.w	80079fe <_printf_float+0xc2>
 8007d5a:	f108 0801 	add.w	r8, r8, #1
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	3b01      	subs	r3, #1
 8007d62:	4543      	cmp	r3, r8
 8007d64:	dcf1      	bgt.n	8007d4a <_printf_float+0x40e>
 8007d66:	464b      	mov	r3, r9
 8007d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d6c:	e6dc      	b.n	8007b28 <_printf_float+0x1ec>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	f104 0a1a 	add.w	sl, r4, #26
 8007d76:	e7f2      	b.n	8007d5e <_printf_float+0x422>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	e7df      	b.n	8007d3e <_printf_float+0x402>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	464a      	mov	r2, r9
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f43f ae38 	beq.w	80079fe <_printf_float+0xc2>
 8007d8e:	f108 0801 	add.w	r8, r8, #1
 8007d92:	68e3      	ldr	r3, [r4, #12]
 8007d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d96:	1a5b      	subs	r3, r3, r1
 8007d98:	4543      	cmp	r3, r8
 8007d9a:	dcf0      	bgt.n	8007d7e <_printf_float+0x442>
 8007d9c:	e6fa      	b.n	8007b94 <_printf_float+0x258>
 8007d9e:	f04f 0800 	mov.w	r8, #0
 8007da2:	f104 0919 	add.w	r9, r4, #25
 8007da6:	e7f4      	b.n	8007d92 <_printf_float+0x456>

08007da8 <_printf_common>:
 8007da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	4616      	mov	r6, r2
 8007dae:	4699      	mov	r9, r3
 8007db0:	688a      	ldr	r2, [r1, #8]
 8007db2:	690b      	ldr	r3, [r1, #16]
 8007db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bfb8      	it	lt
 8007dbc:	4613      	movlt	r3, r2
 8007dbe:	6033      	str	r3, [r6, #0]
 8007dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	b10a      	cbz	r2, 8007dce <_printf_common+0x26>
 8007dca:	3301      	adds	r3, #1
 8007dcc:	6033      	str	r3, [r6, #0]
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	0699      	lsls	r1, r3, #26
 8007dd2:	bf42      	ittt	mi
 8007dd4:	6833      	ldrmi	r3, [r6, #0]
 8007dd6:	3302      	addmi	r3, #2
 8007dd8:	6033      	strmi	r3, [r6, #0]
 8007dda:	6825      	ldr	r5, [r4, #0]
 8007ddc:	f015 0506 	ands.w	r5, r5, #6
 8007de0:	d106      	bne.n	8007df0 <_printf_common+0x48>
 8007de2:	f104 0a19 	add.w	sl, r4, #25
 8007de6:	68e3      	ldr	r3, [r4, #12]
 8007de8:	6832      	ldr	r2, [r6, #0]
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	42ab      	cmp	r3, r5
 8007dee:	dc26      	bgt.n	8007e3e <_printf_common+0x96>
 8007df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007df4:	1e13      	subs	r3, r2, #0
 8007df6:	6822      	ldr	r2, [r4, #0]
 8007df8:	bf18      	it	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	0692      	lsls	r2, r2, #26
 8007dfe:	d42b      	bmi.n	8007e58 <_printf_common+0xb0>
 8007e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e04:	4649      	mov	r1, r9
 8007e06:	4638      	mov	r0, r7
 8007e08:	47c0      	blx	r8
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d01e      	beq.n	8007e4c <_printf_common+0xa4>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	68e5      	ldr	r5, [r4, #12]
 8007e12:	6832      	ldr	r2, [r6, #0]
 8007e14:	f003 0306 	and.w	r3, r3, #6
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	bf08      	it	eq
 8007e1c:	1aad      	subeq	r5, r5, r2
 8007e1e:	68a3      	ldr	r3, [r4, #8]
 8007e20:	6922      	ldr	r2, [r4, #16]
 8007e22:	bf0c      	ite	eq
 8007e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e28:	2500      	movne	r5, #0
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	bfc4      	itt	gt
 8007e2e:	1a9b      	subgt	r3, r3, r2
 8007e30:	18ed      	addgt	r5, r5, r3
 8007e32:	2600      	movs	r6, #0
 8007e34:	341a      	adds	r4, #26
 8007e36:	42b5      	cmp	r5, r6
 8007e38:	d11a      	bne.n	8007e70 <_printf_common+0xc8>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e008      	b.n	8007e50 <_printf_common+0xa8>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4652      	mov	r2, sl
 8007e42:	4649      	mov	r1, r9
 8007e44:	4638      	mov	r0, r7
 8007e46:	47c0      	blx	r8
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d103      	bne.n	8007e54 <_printf_common+0xac>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e54:	3501      	adds	r5, #1
 8007e56:	e7c6      	b.n	8007de6 <_printf_common+0x3e>
 8007e58:	18e1      	adds	r1, r4, r3
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	2030      	movs	r0, #48	; 0x30
 8007e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e62:	4422      	add	r2, r4
 8007e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	e7c7      	b.n	8007e00 <_printf_common+0x58>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4622      	mov	r2, r4
 8007e74:	4649      	mov	r1, r9
 8007e76:	4638      	mov	r0, r7
 8007e78:	47c0      	blx	r8
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d0e6      	beq.n	8007e4c <_printf_common+0xa4>
 8007e7e:	3601      	adds	r6, #1
 8007e80:	e7d9      	b.n	8007e36 <_printf_common+0x8e>
	...

08007e84 <_printf_i>:
 8007e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4691      	mov	r9, r2
 8007e8c:	7e27      	ldrb	r7, [r4, #24]
 8007e8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e90:	2f78      	cmp	r7, #120	; 0x78
 8007e92:	4680      	mov	r8, r0
 8007e94:	469a      	mov	sl, r3
 8007e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e9a:	d807      	bhi.n	8007eac <_printf_i+0x28>
 8007e9c:	2f62      	cmp	r7, #98	; 0x62
 8007e9e:	d80a      	bhi.n	8007eb6 <_printf_i+0x32>
 8007ea0:	2f00      	cmp	r7, #0
 8007ea2:	f000 80d8 	beq.w	8008056 <_printf_i+0x1d2>
 8007ea6:	2f58      	cmp	r7, #88	; 0x58
 8007ea8:	f000 80a3 	beq.w	8007ff2 <_printf_i+0x16e>
 8007eac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007eb4:	e03a      	b.n	8007f2c <_printf_i+0xa8>
 8007eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eba:	2b15      	cmp	r3, #21
 8007ebc:	d8f6      	bhi.n	8007eac <_printf_i+0x28>
 8007ebe:	a001      	add	r0, pc, #4	; (adr r0, 8007ec4 <_printf_i+0x40>)
 8007ec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ec4:	08007f1d 	.word	0x08007f1d
 8007ec8:	08007f31 	.word	0x08007f31
 8007ecc:	08007ead 	.word	0x08007ead
 8007ed0:	08007ead 	.word	0x08007ead
 8007ed4:	08007ead 	.word	0x08007ead
 8007ed8:	08007ead 	.word	0x08007ead
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007ead 	.word	0x08007ead
 8007ee4:	08007ead 	.word	0x08007ead
 8007ee8:	08007ead 	.word	0x08007ead
 8007eec:	08007ead 	.word	0x08007ead
 8007ef0:	0800803d 	.word	0x0800803d
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	0800801f 	.word	0x0800801f
 8007efc:	08007ead 	.word	0x08007ead
 8007f00:	08007ead 	.word	0x08007ead
 8007f04:	0800805f 	.word	0x0800805f
 8007f08:	08007ead 	.word	0x08007ead
 8007f0c:	08007f61 	.word	0x08007f61
 8007f10:	08007ead 	.word	0x08007ead
 8007f14:	08007ead 	.word	0x08007ead
 8007f18:	08008027 	.word	0x08008027
 8007f1c:	680b      	ldr	r3, [r1, #0]
 8007f1e:	1d1a      	adds	r2, r3, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	600a      	str	r2, [r1, #0]
 8007f24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e0a3      	b.n	8008078 <_printf_i+0x1f4>
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	6808      	ldr	r0, [r1, #0]
 8007f34:	062e      	lsls	r6, r5, #24
 8007f36:	f100 0304 	add.w	r3, r0, #4
 8007f3a:	d50a      	bpl.n	8007f52 <_printf_i+0xce>
 8007f3c:	6805      	ldr	r5, [r0, #0]
 8007f3e:	600b      	str	r3, [r1, #0]
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	da03      	bge.n	8007f4c <_printf_i+0xc8>
 8007f44:	232d      	movs	r3, #45	; 0x2d
 8007f46:	426d      	negs	r5, r5
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4c:	485e      	ldr	r0, [pc, #376]	; (80080c8 <_printf_i+0x244>)
 8007f4e:	230a      	movs	r3, #10
 8007f50:	e019      	b.n	8007f86 <_printf_i+0x102>
 8007f52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f56:	6805      	ldr	r5, [r0, #0]
 8007f58:	600b      	str	r3, [r1, #0]
 8007f5a:	bf18      	it	ne
 8007f5c:	b22d      	sxthne	r5, r5
 8007f5e:	e7ef      	b.n	8007f40 <_printf_i+0xbc>
 8007f60:	680b      	ldr	r3, [r1, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	1d18      	adds	r0, r3, #4
 8007f66:	6008      	str	r0, [r1, #0]
 8007f68:	0628      	lsls	r0, r5, #24
 8007f6a:	d501      	bpl.n	8007f70 <_printf_i+0xec>
 8007f6c:	681d      	ldr	r5, [r3, #0]
 8007f6e:	e002      	b.n	8007f76 <_printf_i+0xf2>
 8007f70:	0669      	lsls	r1, r5, #25
 8007f72:	d5fb      	bpl.n	8007f6c <_printf_i+0xe8>
 8007f74:	881d      	ldrh	r5, [r3, #0]
 8007f76:	4854      	ldr	r0, [pc, #336]	; (80080c8 <_printf_i+0x244>)
 8007f78:	2f6f      	cmp	r7, #111	; 0x6f
 8007f7a:	bf0c      	ite	eq
 8007f7c:	2308      	moveq	r3, #8
 8007f7e:	230a      	movne	r3, #10
 8007f80:	2100      	movs	r1, #0
 8007f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f86:	6866      	ldr	r6, [r4, #4]
 8007f88:	60a6      	str	r6, [r4, #8]
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	bfa2      	ittt	ge
 8007f8e:	6821      	ldrge	r1, [r4, #0]
 8007f90:	f021 0104 	bicge.w	r1, r1, #4
 8007f94:	6021      	strge	r1, [r4, #0]
 8007f96:	b90d      	cbnz	r5, 8007f9c <_printf_i+0x118>
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	d04d      	beq.n	8008038 <_printf_i+0x1b4>
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8007fa6:	5dc7      	ldrb	r7, [r0, r7]
 8007fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fac:	462f      	mov	r7, r5
 8007fae:	42bb      	cmp	r3, r7
 8007fb0:	460d      	mov	r5, r1
 8007fb2:	d9f4      	bls.n	8007f9e <_printf_i+0x11a>
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d10b      	bne.n	8007fd0 <_printf_i+0x14c>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07df      	lsls	r7, r3, #31
 8007fbc:	d508      	bpl.n	8007fd0 <_printf_i+0x14c>
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	6861      	ldr	r1, [r4, #4]
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	bfde      	ittt	le
 8007fc6:	2330      	movle	r3, #48	; 0x30
 8007fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fd0:	1b92      	subs	r2, r2, r6
 8007fd2:	6122      	str	r2, [r4, #16]
 8007fd4:	f8cd a000 	str.w	sl, [sp]
 8007fd8:	464b      	mov	r3, r9
 8007fda:	aa03      	add	r2, sp, #12
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4640      	mov	r0, r8
 8007fe0:	f7ff fee2 	bl	8007da8 <_printf_common>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d14c      	bne.n	8008082 <_printf_i+0x1fe>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b004      	add	sp, #16
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	4835      	ldr	r0, [pc, #212]	; (80080c8 <_printf_i+0x244>)
 8007ff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	680e      	ldr	r6, [r1, #0]
 8007ffc:	061f      	lsls	r7, r3, #24
 8007ffe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008002:	600e      	str	r6, [r1, #0]
 8008004:	d514      	bpl.n	8008030 <_printf_i+0x1ac>
 8008006:	07d9      	lsls	r1, r3, #31
 8008008:	bf44      	itt	mi
 800800a:	f043 0320 	orrmi.w	r3, r3, #32
 800800e:	6023      	strmi	r3, [r4, #0]
 8008010:	b91d      	cbnz	r5, 800801a <_printf_i+0x196>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f023 0320 	bic.w	r3, r3, #32
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	2310      	movs	r3, #16
 800801c:	e7b0      	b.n	8007f80 <_printf_i+0xfc>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	f043 0320 	orr.w	r3, r3, #32
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	2378      	movs	r3, #120	; 0x78
 8008028:	4828      	ldr	r0, [pc, #160]	; (80080cc <_printf_i+0x248>)
 800802a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800802e:	e7e3      	b.n	8007ff8 <_printf_i+0x174>
 8008030:	065e      	lsls	r6, r3, #25
 8008032:	bf48      	it	mi
 8008034:	b2ad      	uxthmi	r5, r5
 8008036:	e7e6      	b.n	8008006 <_printf_i+0x182>
 8008038:	4616      	mov	r6, r2
 800803a:	e7bb      	b.n	8007fb4 <_printf_i+0x130>
 800803c:	680b      	ldr	r3, [r1, #0]
 800803e:	6826      	ldr	r6, [r4, #0]
 8008040:	6960      	ldr	r0, [r4, #20]
 8008042:	1d1d      	adds	r5, r3, #4
 8008044:	600d      	str	r5, [r1, #0]
 8008046:	0635      	lsls	r5, r6, #24
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	d501      	bpl.n	8008050 <_printf_i+0x1cc>
 800804c:	6018      	str	r0, [r3, #0]
 800804e:	e002      	b.n	8008056 <_printf_i+0x1d2>
 8008050:	0671      	lsls	r1, r6, #25
 8008052:	d5fb      	bpl.n	800804c <_printf_i+0x1c8>
 8008054:	8018      	strh	r0, [r3, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	4616      	mov	r6, r2
 800805c:	e7ba      	b.n	8007fd4 <_printf_i+0x150>
 800805e:	680b      	ldr	r3, [r1, #0]
 8008060:	1d1a      	adds	r2, r3, #4
 8008062:	600a      	str	r2, [r1, #0]
 8008064:	681e      	ldr	r6, [r3, #0]
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	2100      	movs	r1, #0
 800806a:	4630      	mov	r0, r6
 800806c:	f7f8 f8b8 	bl	80001e0 <memchr>
 8008070:	b108      	cbz	r0, 8008076 <_printf_i+0x1f2>
 8008072:	1b80      	subs	r0, r0, r6
 8008074:	6060      	str	r0, [r4, #4]
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	2300      	movs	r3, #0
 800807c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008080:	e7a8      	b.n	8007fd4 <_printf_i+0x150>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	4632      	mov	r2, r6
 8008086:	4649      	mov	r1, r9
 8008088:	4640      	mov	r0, r8
 800808a:	47d0      	blx	sl
 800808c:	3001      	adds	r0, #1
 800808e:	d0ab      	beq.n	8007fe8 <_printf_i+0x164>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	d413      	bmi.n	80080be <_printf_i+0x23a>
 8008096:	68e0      	ldr	r0, [r4, #12]
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	4298      	cmp	r0, r3
 800809c:	bfb8      	it	lt
 800809e:	4618      	movlt	r0, r3
 80080a0:	e7a4      	b.n	8007fec <_printf_i+0x168>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4632      	mov	r2, r6
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	47d0      	blx	sl
 80080ac:	3001      	adds	r0, #1
 80080ae:	d09b      	beq.n	8007fe8 <_printf_i+0x164>
 80080b0:	3501      	adds	r5, #1
 80080b2:	68e3      	ldr	r3, [r4, #12]
 80080b4:	9903      	ldr	r1, [sp, #12]
 80080b6:	1a5b      	subs	r3, r3, r1
 80080b8:	42ab      	cmp	r3, r5
 80080ba:	dcf2      	bgt.n	80080a2 <_printf_i+0x21e>
 80080bc:	e7eb      	b.n	8008096 <_printf_i+0x212>
 80080be:	2500      	movs	r5, #0
 80080c0:	f104 0619 	add.w	r6, r4, #25
 80080c4:	e7f5      	b.n	80080b2 <_printf_i+0x22e>
 80080c6:	bf00      	nop
 80080c8:	0800a66e 	.word	0x0800a66e
 80080cc:	0800a67f 	.word	0x0800a67f

080080d0 <siprintf>:
 80080d0:	b40e      	push	{r1, r2, r3}
 80080d2:	b500      	push	{lr}
 80080d4:	b09c      	sub	sp, #112	; 0x70
 80080d6:	ab1d      	add	r3, sp, #116	; 0x74
 80080d8:	9002      	str	r0, [sp, #8]
 80080da:	9006      	str	r0, [sp, #24]
 80080dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080e0:	4809      	ldr	r0, [pc, #36]	; (8008108 <siprintf+0x38>)
 80080e2:	9107      	str	r1, [sp, #28]
 80080e4:	9104      	str	r1, [sp, #16]
 80080e6:	4909      	ldr	r1, [pc, #36]	; (800810c <siprintf+0x3c>)
 80080e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	a902      	add	r1, sp, #8
 80080f4:	f001 fb24 	bl	8009740 <_svfiprintf_r>
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	b01c      	add	sp, #112	; 0x70
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	20000090 	.word	0x20000090
 800810c:	ffff0208 	.word	0xffff0208

08008110 <quorem>:
 8008110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	6903      	ldr	r3, [r0, #16]
 8008116:	690c      	ldr	r4, [r1, #16]
 8008118:	42a3      	cmp	r3, r4
 800811a:	4607      	mov	r7, r0
 800811c:	f2c0 8081 	blt.w	8008222 <quorem+0x112>
 8008120:	3c01      	subs	r4, #1
 8008122:	f101 0814 	add.w	r8, r1, #20
 8008126:	f100 0514 	add.w	r5, r0, #20
 800812a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008138:	3301      	adds	r3, #1
 800813a:	429a      	cmp	r2, r3
 800813c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008144:	fbb2 f6f3 	udiv	r6, r2, r3
 8008148:	d331      	bcc.n	80081ae <quorem+0x9e>
 800814a:	f04f 0e00 	mov.w	lr, #0
 800814e:	4640      	mov	r0, r8
 8008150:	46ac      	mov	ip, r5
 8008152:	46f2      	mov	sl, lr
 8008154:	f850 2b04 	ldr.w	r2, [r0], #4
 8008158:	b293      	uxth	r3, r2
 800815a:	fb06 e303 	mla	r3, r6, r3, lr
 800815e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008162:	b29b      	uxth	r3, r3
 8008164:	ebaa 0303 	sub.w	r3, sl, r3
 8008168:	0c12      	lsrs	r2, r2, #16
 800816a:	f8dc a000 	ldr.w	sl, [ip]
 800816e:	fb06 e202 	mla	r2, r6, r2, lr
 8008172:	fa13 f38a 	uxtah	r3, r3, sl
 8008176:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800817a:	fa1f fa82 	uxth.w	sl, r2
 800817e:	f8dc 2000 	ldr.w	r2, [ip]
 8008182:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008186:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008190:	4581      	cmp	r9, r0
 8008192:	f84c 3b04 	str.w	r3, [ip], #4
 8008196:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800819a:	d2db      	bcs.n	8008154 <quorem+0x44>
 800819c:	f855 300b 	ldr.w	r3, [r5, fp]
 80081a0:	b92b      	cbnz	r3, 80081ae <quorem+0x9e>
 80081a2:	9b01      	ldr	r3, [sp, #4]
 80081a4:	3b04      	subs	r3, #4
 80081a6:	429d      	cmp	r5, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	d32e      	bcc.n	800820a <quorem+0xfa>
 80081ac:	613c      	str	r4, [r7, #16]
 80081ae:	4638      	mov	r0, r7
 80081b0:	f001 f8b0 	bl	8009314 <__mcmp>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	db24      	blt.n	8008202 <quorem+0xf2>
 80081b8:	3601      	adds	r6, #1
 80081ba:	4628      	mov	r0, r5
 80081bc:	f04f 0c00 	mov.w	ip, #0
 80081c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081c4:	f8d0 e000 	ldr.w	lr, [r0]
 80081c8:	b293      	uxth	r3, r2
 80081ca:	ebac 0303 	sub.w	r3, ip, r3
 80081ce:	0c12      	lsrs	r2, r2, #16
 80081d0:	fa13 f38e 	uxtah	r3, r3, lr
 80081d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081dc:	b29b      	uxth	r3, r3
 80081de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e2:	45c1      	cmp	r9, r8
 80081e4:	f840 3b04 	str.w	r3, [r0], #4
 80081e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081ec:	d2e8      	bcs.n	80081c0 <quorem+0xb0>
 80081ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081f6:	b922      	cbnz	r2, 8008202 <quorem+0xf2>
 80081f8:	3b04      	subs	r3, #4
 80081fa:	429d      	cmp	r5, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	d30a      	bcc.n	8008216 <quorem+0x106>
 8008200:	613c      	str	r4, [r7, #16]
 8008202:	4630      	mov	r0, r6
 8008204:	b003      	add	sp, #12
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	3b04      	subs	r3, #4
 800820e:	2a00      	cmp	r2, #0
 8008210:	d1cc      	bne.n	80081ac <quorem+0x9c>
 8008212:	3c01      	subs	r4, #1
 8008214:	e7c7      	b.n	80081a6 <quorem+0x96>
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	3b04      	subs	r3, #4
 800821a:	2a00      	cmp	r2, #0
 800821c:	d1f0      	bne.n	8008200 <quorem+0xf0>
 800821e:	3c01      	subs	r4, #1
 8008220:	e7eb      	b.n	80081fa <quorem+0xea>
 8008222:	2000      	movs	r0, #0
 8008224:	e7ee      	b.n	8008204 <quorem+0xf4>
	...

08008228 <_dtoa_r>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	ed2d 8b02 	vpush	{d8}
 8008230:	ec57 6b10 	vmov	r6, r7, d0
 8008234:	b095      	sub	sp, #84	; 0x54
 8008236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008238:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008242:	4604      	mov	r4, r0
 8008244:	9209      	str	r2, [sp, #36]	; 0x24
 8008246:	930f      	str	r3, [sp, #60]	; 0x3c
 8008248:	b975      	cbnz	r5, 8008268 <_dtoa_r+0x40>
 800824a:	2010      	movs	r0, #16
 800824c:	f000 fddc 	bl	8008e08 <malloc>
 8008250:	4602      	mov	r2, r0
 8008252:	6260      	str	r0, [r4, #36]	; 0x24
 8008254:	b920      	cbnz	r0, 8008260 <_dtoa_r+0x38>
 8008256:	4bb2      	ldr	r3, [pc, #712]	; (8008520 <_dtoa_r+0x2f8>)
 8008258:	21ea      	movs	r1, #234	; 0xea
 800825a:	48b2      	ldr	r0, [pc, #712]	; (8008524 <_dtoa_r+0x2fc>)
 800825c:	f001 fb80 	bl	8009960 <__assert_func>
 8008260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008264:	6005      	str	r5, [r0, #0]
 8008266:	60c5      	str	r5, [r0, #12]
 8008268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	b151      	cbz	r1, 8008284 <_dtoa_r+0x5c>
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	604a      	str	r2, [r1, #4]
 8008272:	2301      	movs	r3, #1
 8008274:	4093      	lsls	r3, r2
 8008276:	608b      	str	r3, [r1, #8]
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fe0d 	bl	8008e98 <_Bfree>
 800827e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	1e3b      	subs	r3, r7, #0
 8008286:	bfb9      	ittee	lt
 8008288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800828c:	9303      	strlt	r3, [sp, #12]
 800828e:	2300      	movge	r3, #0
 8008290:	f8c8 3000 	strge.w	r3, [r8]
 8008294:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008298:	4ba3      	ldr	r3, [pc, #652]	; (8008528 <_dtoa_r+0x300>)
 800829a:	bfbc      	itt	lt
 800829c:	2201      	movlt	r2, #1
 800829e:	f8c8 2000 	strlt.w	r2, [r8]
 80082a2:	ea33 0309 	bics.w	r3, r3, r9
 80082a6:	d11b      	bne.n	80082e0 <_dtoa_r+0xb8>
 80082a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082b4:	4333      	orrs	r3, r6
 80082b6:	f000 857a 	beq.w	8008dae <_dtoa_r+0xb86>
 80082ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082bc:	b963      	cbnz	r3, 80082d8 <_dtoa_r+0xb0>
 80082be:	4b9b      	ldr	r3, [pc, #620]	; (800852c <_dtoa_r+0x304>)
 80082c0:	e024      	b.n	800830c <_dtoa_r+0xe4>
 80082c2:	4b9b      	ldr	r3, [pc, #620]	; (8008530 <_dtoa_r+0x308>)
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	9800      	ldr	r0, [sp, #0]
 80082ce:	b015      	add	sp, #84	; 0x54
 80082d0:	ecbd 8b02 	vpop	{d8}
 80082d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d8:	4b94      	ldr	r3, [pc, #592]	; (800852c <_dtoa_r+0x304>)
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	3303      	adds	r3, #3
 80082de:	e7f3      	b.n	80082c8 <_dtoa_r+0xa0>
 80082e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082e4:	2200      	movs	r2, #0
 80082e6:	ec51 0b17 	vmov	r0, r1, d7
 80082ea:	2300      	movs	r3, #0
 80082ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082f0:	f7f8 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f4:	4680      	mov	r8, r0
 80082f6:	b158      	cbz	r0, 8008310 <_dtoa_r+0xe8>
 80082f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082fa:	2301      	movs	r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8551 	beq.w	8008da8 <_dtoa_r+0xb80>
 8008306:	488b      	ldr	r0, [pc, #556]	; (8008534 <_dtoa_r+0x30c>)
 8008308:	6018      	str	r0, [r3, #0]
 800830a:	1e43      	subs	r3, r0, #1
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	e7dd      	b.n	80082cc <_dtoa_r+0xa4>
 8008310:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008314:	aa12      	add	r2, sp, #72	; 0x48
 8008316:	a913      	add	r1, sp, #76	; 0x4c
 8008318:	4620      	mov	r0, r4
 800831a:	f001 f89f 	bl	800945c <__d2b>
 800831e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008322:	4683      	mov	fp, r0
 8008324:	2d00      	cmp	r5, #0
 8008326:	d07c      	beq.n	8008422 <_dtoa_r+0x1fa>
 8008328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800832a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800832e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008332:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008336:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800833a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800833e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008342:	4b7d      	ldr	r3, [pc, #500]	; (8008538 <_dtoa_r+0x310>)
 8008344:	2200      	movs	r2, #0
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	f7f7 ff9d 	bl	8000288 <__aeabi_dsub>
 800834e:	a36e      	add	r3, pc, #440	; (adr r3, 8008508 <_dtoa_r+0x2e0>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f8 f950 	bl	80005f8 <__aeabi_dmul>
 8008358:	a36d      	add	r3, pc, #436	; (adr r3, 8008510 <_dtoa_r+0x2e8>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f7 ff95 	bl	800028c <__adddf3>
 8008362:	4606      	mov	r6, r0
 8008364:	4628      	mov	r0, r5
 8008366:	460f      	mov	r7, r1
 8008368:	f7f8 f8dc 	bl	8000524 <__aeabi_i2d>
 800836c:	a36a      	add	r3, pc, #424	; (adr r3, 8008518 <_dtoa_r+0x2f0>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f7f8 f941 	bl	80005f8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f7 ff85 	bl	800028c <__adddf3>
 8008382:	4606      	mov	r6, r0
 8008384:	460f      	mov	r7, r1
 8008386:	f7f8 fbe7 	bl	8000b58 <__aeabi_d2iz>
 800838a:	2200      	movs	r2, #0
 800838c:	4682      	mov	sl, r0
 800838e:	2300      	movs	r3, #0
 8008390:	4630      	mov	r0, r6
 8008392:	4639      	mov	r1, r7
 8008394:	f7f8 fba2 	bl	8000adc <__aeabi_dcmplt>
 8008398:	b148      	cbz	r0, 80083ae <_dtoa_r+0x186>
 800839a:	4650      	mov	r0, sl
 800839c:	f7f8 f8c2 	bl	8000524 <__aeabi_i2d>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	f7f8 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a8:	b908      	cbnz	r0, 80083ae <_dtoa_r+0x186>
 80083aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ae:	f1ba 0f16 	cmp.w	sl, #22
 80083b2:	d854      	bhi.n	800845e <_dtoa_r+0x236>
 80083b4:	4b61      	ldr	r3, [pc, #388]	; (800853c <_dtoa_r+0x314>)
 80083b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083c2:	f7f8 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d04b      	beq.n	8008462 <_dtoa_r+0x23a>
 80083ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ce:	2300      	movs	r3, #0
 80083d0:	930e      	str	r3, [sp, #56]	; 0x38
 80083d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083d4:	1b5d      	subs	r5, r3, r5
 80083d6:	1e6b      	subs	r3, r5, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	bf43      	ittte	mi
 80083dc:	2300      	movmi	r3, #0
 80083de:	f1c5 0801 	rsbmi	r8, r5, #1
 80083e2:	9304      	strmi	r3, [sp, #16]
 80083e4:	f04f 0800 	movpl.w	r8, #0
 80083e8:	f1ba 0f00 	cmp.w	sl, #0
 80083ec:	db3b      	blt.n	8008466 <_dtoa_r+0x23e>
 80083ee:	9b04      	ldr	r3, [sp, #16]
 80083f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80083f4:	4453      	add	r3, sl
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	2300      	movs	r3, #0
 80083fa:	9306      	str	r3, [sp, #24]
 80083fc:	9b05      	ldr	r3, [sp, #20]
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d869      	bhi.n	80084d6 <_dtoa_r+0x2ae>
 8008402:	2b05      	cmp	r3, #5
 8008404:	bfc4      	itt	gt
 8008406:	3b04      	subgt	r3, #4
 8008408:	9305      	strgt	r3, [sp, #20]
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	f1a3 0302 	sub.w	r3, r3, #2
 8008410:	bfcc      	ite	gt
 8008412:	2500      	movgt	r5, #0
 8008414:	2501      	movle	r5, #1
 8008416:	2b03      	cmp	r3, #3
 8008418:	d869      	bhi.n	80084ee <_dtoa_r+0x2c6>
 800841a:	e8df f003 	tbb	[pc, r3]
 800841e:	4e2c      	.short	0x4e2c
 8008420:	5a4c      	.short	0x5a4c
 8008422:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008426:	441d      	add	r5, r3
 8008428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800842c:	2b20      	cmp	r3, #32
 800842e:	bfc1      	itttt	gt
 8008430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008434:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008438:	fa09 f303 	lslgt.w	r3, r9, r3
 800843c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008440:	bfda      	itte	le
 8008442:	f1c3 0320 	rsble	r3, r3, #32
 8008446:	fa06 f003 	lslle.w	r0, r6, r3
 800844a:	4318      	orrgt	r0, r3
 800844c:	f7f8 f85a 	bl	8000504 <__aeabi_ui2d>
 8008450:	2301      	movs	r3, #1
 8008452:	4606      	mov	r6, r0
 8008454:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008458:	3d01      	subs	r5, #1
 800845a:	9310      	str	r3, [sp, #64]	; 0x40
 800845c:	e771      	b.n	8008342 <_dtoa_r+0x11a>
 800845e:	2301      	movs	r3, #1
 8008460:	e7b6      	b.n	80083d0 <_dtoa_r+0x1a8>
 8008462:	900e      	str	r0, [sp, #56]	; 0x38
 8008464:	e7b5      	b.n	80083d2 <_dtoa_r+0x1aa>
 8008466:	f1ca 0300 	rsb	r3, sl, #0
 800846a:	9306      	str	r3, [sp, #24]
 800846c:	2300      	movs	r3, #0
 800846e:	eba8 080a 	sub.w	r8, r8, sl
 8008472:	930d      	str	r3, [sp, #52]	; 0x34
 8008474:	e7c2      	b.n	80083fc <_dtoa_r+0x1d4>
 8008476:	2300      	movs	r3, #0
 8008478:	9308      	str	r3, [sp, #32]
 800847a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847c:	2b00      	cmp	r3, #0
 800847e:	dc39      	bgt.n	80084f4 <_dtoa_r+0x2cc>
 8008480:	f04f 0901 	mov.w	r9, #1
 8008484:	f8cd 9004 	str.w	r9, [sp, #4]
 8008488:	464b      	mov	r3, r9
 800848a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800848e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008490:	2200      	movs	r2, #0
 8008492:	6042      	str	r2, [r0, #4]
 8008494:	2204      	movs	r2, #4
 8008496:	f102 0614 	add.w	r6, r2, #20
 800849a:	429e      	cmp	r6, r3
 800849c:	6841      	ldr	r1, [r0, #4]
 800849e:	d92f      	bls.n	8008500 <_dtoa_r+0x2d8>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fcb9 	bl	8008e18 <_Balloc>
 80084a6:	9000      	str	r0, [sp, #0]
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d14b      	bne.n	8008544 <_dtoa_r+0x31c>
 80084ac:	4b24      	ldr	r3, [pc, #144]	; (8008540 <_dtoa_r+0x318>)
 80084ae:	4602      	mov	r2, r0
 80084b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084b4:	e6d1      	b.n	800825a <_dtoa_r+0x32>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e7de      	b.n	8008478 <_dtoa_r+0x250>
 80084ba:	2300      	movs	r3, #0
 80084bc:	9308      	str	r3, [sp, #32]
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	eb0a 0903 	add.w	r9, sl, r3
 80084c4:	f109 0301 	add.w	r3, r9, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	bfb8      	it	lt
 80084ce:	2301      	movlt	r3, #1
 80084d0:	e7dd      	b.n	800848e <_dtoa_r+0x266>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7f2      	b.n	80084bc <_dtoa_r+0x294>
 80084d6:	2501      	movs	r5, #1
 80084d8:	2300      	movs	r3, #0
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	9508      	str	r5, [sp, #32]
 80084de:	f04f 39ff 	mov.w	r9, #4294967295
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80084e8:	2312      	movs	r3, #18
 80084ea:	9209      	str	r2, [sp, #36]	; 0x24
 80084ec:	e7cf      	b.n	800848e <_dtoa_r+0x266>
 80084ee:	2301      	movs	r3, #1
 80084f0:	9308      	str	r3, [sp, #32]
 80084f2:	e7f4      	b.n	80084de <_dtoa_r+0x2b6>
 80084f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80084fc:	464b      	mov	r3, r9
 80084fe:	e7c6      	b.n	800848e <_dtoa_r+0x266>
 8008500:	3101      	adds	r1, #1
 8008502:	6041      	str	r1, [r0, #4]
 8008504:	0052      	lsls	r2, r2, #1
 8008506:	e7c6      	b.n	8008496 <_dtoa_r+0x26e>
 8008508:	636f4361 	.word	0x636f4361
 800850c:	3fd287a7 	.word	0x3fd287a7
 8008510:	8b60c8b3 	.word	0x8b60c8b3
 8008514:	3fc68a28 	.word	0x3fc68a28
 8008518:	509f79fb 	.word	0x509f79fb
 800851c:	3fd34413 	.word	0x3fd34413
 8008520:	0800a69d 	.word	0x0800a69d
 8008524:	0800a6b4 	.word	0x0800a6b4
 8008528:	7ff00000 	.word	0x7ff00000
 800852c:	0800a699 	.word	0x0800a699
 8008530:	0800a690 	.word	0x0800a690
 8008534:	0800a66d 	.word	0x0800a66d
 8008538:	3ff80000 	.word	0x3ff80000
 800853c:	0800a7b0 	.word	0x0800a7b0
 8008540:	0800a713 	.word	0x0800a713
 8008544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008546:	9a00      	ldr	r2, [sp, #0]
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	2b0e      	cmp	r3, #14
 800854e:	f200 80ad 	bhi.w	80086ac <_dtoa_r+0x484>
 8008552:	2d00      	cmp	r5, #0
 8008554:	f000 80aa 	beq.w	80086ac <_dtoa_r+0x484>
 8008558:	f1ba 0f00 	cmp.w	sl, #0
 800855c:	dd36      	ble.n	80085cc <_dtoa_r+0x3a4>
 800855e:	4ac3      	ldr	r2, [pc, #780]	; (800886c <_dtoa_r+0x644>)
 8008560:	f00a 030f 	and.w	r3, sl, #15
 8008564:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008568:	ed93 7b00 	vldr	d7, [r3]
 800856c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008570:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008574:	eeb0 8a47 	vmov.f32	s16, s14
 8008578:	eef0 8a67 	vmov.f32	s17, s15
 800857c:	d016      	beq.n	80085ac <_dtoa_r+0x384>
 800857e:	4bbc      	ldr	r3, [pc, #752]	; (8008870 <_dtoa_r+0x648>)
 8008580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008588:	f7f8 f960 	bl	800084c <__aeabi_ddiv>
 800858c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008590:	f007 070f 	and.w	r7, r7, #15
 8008594:	2503      	movs	r5, #3
 8008596:	4eb6      	ldr	r6, [pc, #728]	; (8008870 <_dtoa_r+0x648>)
 8008598:	b957      	cbnz	r7, 80085b0 <_dtoa_r+0x388>
 800859a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859e:	ec53 2b18 	vmov	r2, r3, d8
 80085a2:	f7f8 f953 	bl	800084c <__aeabi_ddiv>
 80085a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085aa:	e029      	b.n	8008600 <_dtoa_r+0x3d8>
 80085ac:	2502      	movs	r5, #2
 80085ae:	e7f2      	b.n	8008596 <_dtoa_r+0x36e>
 80085b0:	07f9      	lsls	r1, r7, #31
 80085b2:	d508      	bpl.n	80085c6 <_dtoa_r+0x39e>
 80085b4:	ec51 0b18 	vmov	r0, r1, d8
 80085b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085bc:	f7f8 f81c 	bl	80005f8 <__aeabi_dmul>
 80085c0:	ec41 0b18 	vmov	d8, r0, r1
 80085c4:	3501      	adds	r5, #1
 80085c6:	107f      	asrs	r7, r7, #1
 80085c8:	3608      	adds	r6, #8
 80085ca:	e7e5      	b.n	8008598 <_dtoa_r+0x370>
 80085cc:	f000 80a6 	beq.w	800871c <_dtoa_r+0x4f4>
 80085d0:	f1ca 0600 	rsb	r6, sl, #0
 80085d4:	4ba5      	ldr	r3, [pc, #660]	; (800886c <_dtoa_r+0x644>)
 80085d6:	4fa6      	ldr	r7, [pc, #664]	; (8008870 <_dtoa_r+0x648>)
 80085d8:	f006 020f 	and.w	r2, r6, #15
 80085dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085e8:	f7f8 f806 	bl	80005f8 <__aeabi_dmul>
 80085ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f0:	1136      	asrs	r6, r6, #4
 80085f2:	2300      	movs	r3, #0
 80085f4:	2502      	movs	r5, #2
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	f040 8085 	bne.w	8008706 <_dtoa_r+0x4de>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1d2      	bne.n	80085a6 <_dtoa_r+0x37e>
 8008600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 808c 	beq.w	8008720 <_dtoa_r+0x4f8>
 8008608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800860c:	4b99      	ldr	r3, [pc, #612]	; (8008874 <_dtoa_r+0x64c>)
 800860e:	2200      	movs	r2, #0
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f8 fa62 	bl	8000adc <__aeabi_dcmplt>
 8008618:	2800      	cmp	r0, #0
 800861a:	f000 8081 	beq.w	8008720 <_dtoa_r+0x4f8>
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d07d      	beq.n	8008720 <_dtoa_r+0x4f8>
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	dd3c      	ble.n	80086a4 <_dtoa_r+0x47c>
 800862a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	2200      	movs	r2, #0
 8008632:	4b91      	ldr	r3, [pc, #580]	; (8008878 <_dtoa_r+0x650>)
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f7 ffde 	bl	80005f8 <__aeabi_dmul>
 800863c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008640:	3501      	adds	r5, #1
 8008642:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008646:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800864a:	4628      	mov	r0, r5
 800864c:	f7f7 ff6a 	bl	8000524 <__aeabi_i2d>
 8008650:	4632      	mov	r2, r6
 8008652:	463b      	mov	r3, r7
 8008654:	f7f7 ffd0 	bl	80005f8 <__aeabi_dmul>
 8008658:	4b88      	ldr	r3, [pc, #544]	; (800887c <_dtoa_r+0x654>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 fe16 	bl	800028c <__adddf3>
 8008660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800866c:	2b00      	cmp	r3, #0
 800866e:	d15c      	bne.n	800872a <_dtoa_r+0x502>
 8008670:	4b83      	ldr	r3, [pc, #524]	; (8008880 <_dtoa_r+0x658>)
 8008672:	2200      	movs	r2, #0
 8008674:	4630      	mov	r0, r6
 8008676:	4639      	mov	r1, r7
 8008678:	f7f7 fe06 	bl	8000288 <__aeabi_dsub>
 800867c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008680:	4606      	mov	r6, r0
 8008682:	460f      	mov	r7, r1
 8008684:	f7f8 fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	f040 8296 	bne.w	8008bba <_dtoa_r+0x992>
 800868e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008692:	4630      	mov	r0, r6
 8008694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008698:	4639      	mov	r1, r7
 800869a:	f7f8 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f040 8288 	bne.w	8008bb4 <_dtoa_r+0x98c>
 80086a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f2c0 8158 	blt.w	8008964 <_dtoa_r+0x73c>
 80086b4:	f1ba 0f0e 	cmp.w	sl, #14
 80086b8:	f300 8154 	bgt.w	8008964 <_dtoa_r+0x73c>
 80086bc:	4b6b      	ldr	r3, [pc, #428]	; (800886c <_dtoa_r+0x644>)
 80086be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f280 80e3 	bge.w	8008894 <_dtoa_r+0x66c>
 80086ce:	9b01      	ldr	r3, [sp, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f300 80df 	bgt.w	8008894 <_dtoa_r+0x66c>
 80086d6:	f040 826d 	bne.w	8008bb4 <_dtoa_r+0x98c>
 80086da:	4b69      	ldr	r3, [pc, #420]	; (8008880 <_dtoa_r+0x658>)
 80086dc:	2200      	movs	r2, #0
 80086de:	4640      	mov	r0, r8
 80086e0:	4649      	mov	r1, r9
 80086e2:	f7f7 ff89 	bl	80005f8 <__aeabi_dmul>
 80086e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ea:	f7f8 fa0b 	bl	8000b04 <__aeabi_dcmpge>
 80086ee:	9e01      	ldr	r6, [sp, #4]
 80086f0:	4637      	mov	r7, r6
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f040 8243 	bne.w	8008b7e <_dtoa_r+0x956>
 80086f8:	9d00      	ldr	r5, [sp, #0]
 80086fa:	2331      	movs	r3, #49	; 0x31
 80086fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008700:	f10a 0a01 	add.w	sl, sl, #1
 8008704:	e23f      	b.n	8008b86 <_dtoa_r+0x95e>
 8008706:	07f2      	lsls	r2, r6, #31
 8008708:	d505      	bpl.n	8008716 <_dtoa_r+0x4ee>
 800870a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	3501      	adds	r5, #1
 8008714:	2301      	movs	r3, #1
 8008716:	1076      	asrs	r6, r6, #1
 8008718:	3708      	adds	r7, #8
 800871a:	e76c      	b.n	80085f6 <_dtoa_r+0x3ce>
 800871c:	2502      	movs	r5, #2
 800871e:	e76f      	b.n	8008600 <_dtoa_r+0x3d8>
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	f8cd a01c 	str.w	sl, [sp, #28]
 8008726:	930c      	str	r3, [sp, #48]	; 0x30
 8008728:	e78d      	b.n	8008646 <_dtoa_r+0x41e>
 800872a:	9900      	ldr	r1, [sp, #0]
 800872c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800872e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008730:	4b4e      	ldr	r3, [pc, #312]	; (800886c <_dtoa_r+0x644>)
 8008732:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008736:	4401      	add	r1, r0
 8008738:	9102      	str	r1, [sp, #8]
 800873a:	9908      	ldr	r1, [sp, #32]
 800873c:	eeb0 8a47 	vmov.f32	s16, s14
 8008740:	eef0 8a67 	vmov.f32	s17, s15
 8008744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800874c:	2900      	cmp	r1, #0
 800874e:	d045      	beq.n	80087dc <_dtoa_r+0x5b4>
 8008750:	494c      	ldr	r1, [pc, #304]	; (8008884 <_dtoa_r+0x65c>)
 8008752:	2000      	movs	r0, #0
 8008754:	f7f8 f87a 	bl	800084c <__aeabi_ddiv>
 8008758:	ec53 2b18 	vmov	r2, r3, d8
 800875c:	f7f7 fd94 	bl	8000288 <__aeabi_dsub>
 8008760:	9d00      	ldr	r5, [sp, #0]
 8008762:	ec41 0b18 	vmov	d8, r0, r1
 8008766:	4639      	mov	r1, r7
 8008768:	4630      	mov	r0, r6
 800876a:	f7f8 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800876e:	900c      	str	r0, [sp, #48]	; 0x30
 8008770:	f7f7 fed8 	bl	8000524 <__aeabi_i2d>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4630      	mov	r0, r6
 800877a:	4639      	mov	r1, r7
 800877c:	f7f7 fd84 	bl	8000288 <__aeabi_dsub>
 8008780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008782:	3330      	adds	r3, #48	; 0x30
 8008784:	f805 3b01 	strb.w	r3, [r5], #1
 8008788:	ec53 2b18 	vmov	r2, r3, d8
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	f7f8 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8008794:	2800      	cmp	r0, #0
 8008796:	d165      	bne.n	8008864 <_dtoa_r+0x63c>
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4935      	ldr	r1, [pc, #212]	; (8008874 <_dtoa_r+0x64c>)
 800879e:	2000      	movs	r0, #0
 80087a0:	f7f7 fd72 	bl	8000288 <__aeabi_dsub>
 80087a4:	ec53 2b18 	vmov	r2, r3, d8
 80087a8:	f7f8 f998 	bl	8000adc <__aeabi_dcmplt>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f040 80b9 	bne.w	8008924 <_dtoa_r+0x6fc>
 80087b2:	9b02      	ldr	r3, [sp, #8]
 80087b4:	429d      	cmp	r5, r3
 80087b6:	f43f af75 	beq.w	80086a4 <_dtoa_r+0x47c>
 80087ba:	4b2f      	ldr	r3, [pc, #188]	; (8008878 <_dtoa_r+0x650>)
 80087bc:	ec51 0b18 	vmov	r0, r1, d8
 80087c0:	2200      	movs	r2, #0
 80087c2:	f7f7 ff19 	bl	80005f8 <__aeabi_dmul>
 80087c6:	4b2c      	ldr	r3, [pc, #176]	; (8008878 <_dtoa_r+0x650>)
 80087c8:	ec41 0b18 	vmov	d8, r0, r1
 80087cc:	2200      	movs	r2, #0
 80087ce:	4630      	mov	r0, r6
 80087d0:	4639      	mov	r1, r7
 80087d2:	f7f7 ff11 	bl	80005f8 <__aeabi_dmul>
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	e7c4      	b.n	8008766 <_dtoa_r+0x53e>
 80087dc:	ec51 0b17 	vmov	r0, r1, d7
 80087e0:	f7f7 ff0a 	bl	80005f8 <__aeabi_dmul>
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	9d00      	ldr	r5, [sp, #0]
 80087e8:	930c      	str	r3, [sp, #48]	; 0x30
 80087ea:	ec41 0b18 	vmov	d8, r0, r1
 80087ee:	4639      	mov	r1, r7
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7f8 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80087f6:	9011      	str	r0, [sp, #68]	; 0x44
 80087f8:	f7f7 fe94 	bl	8000524 <__aeabi_i2d>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f7 fd40 	bl	8000288 <__aeabi_dsub>
 8008808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800880a:	3330      	adds	r3, #48	; 0x30
 800880c:	f805 3b01 	strb.w	r3, [r5], #1
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	429d      	cmp	r5, r3
 8008814:	4606      	mov	r6, r0
 8008816:	460f      	mov	r7, r1
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	d134      	bne.n	8008888 <_dtoa_r+0x660>
 800881e:	4b19      	ldr	r3, [pc, #100]	; (8008884 <_dtoa_r+0x65c>)
 8008820:	ec51 0b18 	vmov	r0, r1, d8
 8008824:	f7f7 fd32 	bl	800028c <__adddf3>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4630      	mov	r0, r6
 800882e:	4639      	mov	r1, r7
 8008830:	f7f8 f972 	bl	8000b18 <__aeabi_dcmpgt>
 8008834:	2800      	cmp	r0, #0
 8008836:	d175      	bne.n	8008924 <_dtoa_r+0x6fc>
 8008838:	ec53 2b18 	vmov	r2, r3, d8
 800883c:	4911      	ldr	r1, [pc, #68]	; (8008884 <_dtoa_r+0x65c>)
 800883e:	2000      	movs	r0, #0
 8008840:	f7f7 fd22 	bl	8000288 <__aeabi_dsub>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f8 f946 	bl	8000adc <__aeabi_dcmplt>
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f af27 	beq.w	80086a4 <_dtoa_r+0x47c>
 8008856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008858:	1e6b      	subs	r3, r5, #1
 800885a:	930c      	str	r3, [sp, #48]	; 0x30
 800885c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008860:	2b30      	cmp	r3, #48	; 0x30
 8008862:	d0f8      	beq.n	8008856 <_dtoa_r+0x62e>
 8008864:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008868:	e04a      	b.n	8008900 <_dtoa_r+0x6d8>
 800886a:	bf00      	nop
 800886c:	0800a7b0 	.word	0x0800a7b0
 8008870:	0800a788 	.word	0x0800a788
 8008874:	3ff00000 	.word	0x3ff00000
 8008878:	40240000 	.word	0x40240000
 800887c:	401c0000 	.word	0x401c0000
 8008880:	40140000 	.word	0x40140000
 8008884:	3fe00000 	.word	0x3fe00000
 8008888:	4baf      	ldr	r3, [pc, #700]	; (8008b48 <_dtoa_r+0x920>)
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	4606      	mov	r6, r0
 8008890:	460f      	mov	r7, r1
 8008892:	e7ac      	b.n	80087ee <_dtoa_r+0x5c6>
 8008894:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008898:	9d00      	ldr	r5, [sp, #0]
 800889a:	4642      	mov	r2, r8
 800889c:	464b      	mov	r3, r9
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 ffd3 	bl	800084c <__aeabi_ddiv>
 80088a6:	f7f8 f957 	bl	8000b58 <__aeabi_d2iz>
 80088aa:	9002      	str	r0, [sp, #8]
 80088ac:	f7f7 fe3a 	bl	8000524 <__aeabi_i2d>
 80088b0:	4642      	mov	r2, r8
 80088b2:	464b      	mov	r3, r9
 80088b4:	f7f7 fea0 	bl	80005f8 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f7 fce2 	bl	8000288 <__aeabi_dsub>
 80088c4:	9e02      	ldr	r6, [sp, #8]
 80088c6:	9f01      	ldr	r7, [sp, #4]
 80088c8:	3630      	adds	r6, #48	; 0x30
 80088ca:	f805 6b01 	strb.w	r6, [r5], #1
 80088ce:	9e00      	ldr	r6, [sp, #0]
 80088d0:	1bae      	subs	r6, r5, r6
 80088d2:	42b7      	cmp	r7, r6
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	d137      	bne.n	800894a <_dtoa_r+0x722>
 80088da:	f7f7 fcd7 	bl	800028c <__adddf3>
 80088de:	4642      	mov	r2, r8
 80088e0:	464b      	mov	r3, r9
 80088e2:	4606      	mov	r6, r0
 80088e4:	460f      	mov	r7, r1
 80088e6:	f7f8 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80088ea:	b9c8      	cbnz	r0, 8008920 <_dtoa_r+0x6f8>
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f8:	b110      	cbz	r0, 8008900 <_dtoa_r+0x6d8>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	07d9      	lsls	r1, r3, #31
 80088fe:	d40f      	bmi.n	8008920 <_dtoa_r+0x6f8>
 8008900:	4620      	mov	r0, r4
 8008902:	4659      	mov	r1, fp
 8008904:	f000 fac8 	bl	8008e98 <_Bfree>
 8008908:	2300      	movs	r3, #0
 800890a:	702b      	strb	r3, [r5, #0]
 800890c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800890e:	f10a 0001 	add.w	r0, sl, #1
 8008912:	6018      	str	r0, [r3, #0]
 8008914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008916:	2b00      	cmp	r3, #0
 8008918:	f43f acd8 	beq.w	80082cc <_dtoa_r+0xa4>
 800891c:	601d      	str	r5, [r3, #0]
 800891e:	e4d5      	b.n	80082cc <_dtoa_r+0xa4>
 8008920:	f8cd a01c 	str.w	sl, [sp, #28]
 8008924:	462b      	mov	r3, r5
 8008926:	461d      	mov	r5, r3
 8008928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800892c:	2a39      	cmp	r2, #57	; 0x39
 800892e:	d108      	bne.n	8008942 <_dtoa_r+0x71a>
 8008930:	9a00      	ldr	r2, [sp, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d1f7      	bne.n	8008926 <_dtoa_r+0x6fe>
 8008936:	9a07      	ldr	r2, [sp, #28]
 8008938:	9900      	ldr	r1, [sp, #0]
 800893a:	3201      	adds	r2, #1
 800893c:	9207      	str	r2, [sp, #28]
 800893e:	2230      	movs	r2, #48	; 0x30
 8008940:	700a      	strb	r2, [r1, #0]
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	3201      	adds	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	e78c      	b.n	8008864 <_dtoa_r+0x63c>
 800894a:	4b7f      	ldr	r3, [pc, #508]	; (8008b48 <_dtoa_r+0x920>)
 800894c:	2200      	movs	r2, #0
 800894e:	f7f7 fe53 	bl	80005f8 <__aeabi_dmul>
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	f7f8 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800895e:	2800      	cmp	r0, #0
 8008960:	d09b      	beq.n	800889a <_dtoa_r+0x672>
 8008962:	e7cd      	b.n	8008900 <_dtoa_r+0x6d8>
 8008964:	9a08      	ldr	r2, [sp, #32]
 8008966:	2a00      	cmp	r2, #0
 8008968:	f000 80c4 	beq.w	8008af4 <_dtoa_r+0x8cc>
 800896c:	9a05      	ldr	r2, [sp, #20]
 800896e:	2a01      	cmp	r2, #1
 8008970:	f300 80a8 	bgt.w	8008ac4 <_dtoa_r+0x89c>
 8008974:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008976:	2a00      	cmp	r2, #0
 8008978:	f000 80a0 	beq.w	8008abc <_dtoa_r+0x894>
 800897c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008980:	9e06      	ldr	r6, [sp, #24]
 8008982:	4645      	mov	r5, r8
 8008984:	9a04      	ldr	r2, [sp, #16]
 8008986:	2101      	movs	r1, #1
 8008988:	441a      	add	r2, r3
 800898a:	4620      	mov	r0, r4
 800898c:	4498      	add	r8, r3
 800898e:	9204      	str	r2, [sp, #16]
 8008990:	f000 fb3e 	bl	8009010 <__i2b>
 8008994:	4607      	mov	r7, r0
 8008996:	2d00      	cmp	r5, #0
 8008998:	dd0b      	ble.n	80089b2 <_dtoa_r+0x78a>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd08      	ble.n	80089b2 <_dtoa_r+0x78a>
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	bfa8      	it	ge
 80089a6:	462b      	movge	r3, r5
 80089a8:	eba8 0803 	sub.w	r8, r8, r3
 80089ac:	1aed      	subs	r5, r5, r3
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9b06      	ldr	r3, [sp, #24]
 80089b4:	b1fb      	cbz	r3, 80089f6 <_dtoa_r+0x7ce>
 80089b6:	9b08      	ldr	r3, [sp, #32]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 809f 	beq.w	8008afc <_dtoa_r+0x8d4>
 80089be:	2e00      	cmp	r6, #0
 80089c0:	dd11      	ble.n	80089e6 <_dtoa_r+0x7be>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4632      	mov	r2, r6
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fbde 	bl	8009188 <__pow5mult>
 80089cc:	465a      	mov	r2, fp
 80089ce:	4601      	mov	r1, r0
 80089d0:	4607      	mov	r7, r0
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fb32 	bl	800903c <__multiply>
 80089d8:	4659      	mov	r1, fp
 80089da:	9007      	str	r0, [sp, #28]
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fa5b 	bl	8008e98 <_Bfree>
 80089e2:	9b07      	ldr	r3, [sp, #28]
 80089e4:	469b      	mov	fp, r3
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	1b9a      	subs	r2, r3, r6
 80089ea:	d004      	beq.n	80089f6 <_dtoa_r+0x7ce>
 80089ec:	4659      	mov	r1, fp
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fbca 	bl	8009188 <__pow5mult>
 80089f4:	4683      	mov	fp, r0
 80089f6:	2101      	movs	r1, #1
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fb09 	bl	8009010 <__i2b>
 80089fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	dd7c      	ble.n	8008b00 <_dtoa_r+0x8d8>
 8008a06:	461a      	mov	r2, r3
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f000 fbbc 	bl	8009188 <__pow5mult>
 8008a10:	9b05      	ldr	r3, [sp, #20]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	4606      	mov	r6, r0
 8008a16:	dd76      	ble.n	8008b06 <_dtoa_r+0x8de>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9306      	str	r3, [sp, #24]
 8008a1c:	6933      	ldr	r3, [r6, #16]
 8008a1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a22:	6918      	ldr	r0, [r3, #16]
 8008a24:	f000 faa4 	bl	8008f70 <__hi0bits>
 8008a28:	f1c0 0020 	rsb	r0, r0, #32
 8008a2c:	9b04      	ldr	r3, [sp, #16]
 8008a2e:	4418      	add	r0, r3
 8008a30:	f010 001f 	ands.w	r0, r0, #31
 8008a34:	f000 8086 	beq.w	8008b44 <_dtoa_r+0x91c>
 8008a38:	f1c0 0320 	rsb	r3, r0, #32
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	dd7f      	ble.n	8008b40 <_dtoa_r+0x918>
 8008a40:	f1c0 001c 	rsb	r0, r0, #28
 8008a44:	9b04      	ldr	r3, [sp, #16]
 8008a46:	4403      	add	r3, r0
 8008a48:	4480      	add	r8, r0
 8008a4a:	4405      	add	r5, r0
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	f1b8 0f00 	cmp.w	r8, #0
 8008a52:	dd05      	ble.n	8008a60 <_dtoa_r+0x838>
 8008a54:	4659      	mov	r1, fp
 8008a56:	4642      	mov	r2, r8
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 fbef 	bl	800923c <__lshift>
 8008a5e:	4683      	mov	fp, r0
 8008a60:	9b04      	ldr	r3, [sp, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dd05      	ble.n	8008a72 <_dtoa_r+0x84a>
 8008a66:	4631      	mov	r1, r6
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fbe6 	bl	800923c <__lshift>
 8008a70:	4606      	mov	r6, r0
 8008a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d069      	beq.n	8008b4c <_dtoa_r+0x924>
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4658      	mov	r0, fp
 8008a7c:	f000 fc4a 	bl	8009314 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	da63      	bge.n	8008b4c <_dtoa_r+0x924>
 8008a84:	2300      	movs	r3, #0
 8008a86:	4659      	mov	r1, fp
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fa26 	bl	8008edc <__multadd>
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a96:	4683      	mov	fp, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 818f 	beq.w	8008dbc <_dtoa_r+0xb94>
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	220a      	movs	r2, #10
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fa19 	bl	8008edc <__multadd>
 8008aaa:	f1b9 0f00 	cmp.w	r9, #0
 8008aae:	4607      	mov	r7, r0
 8008ab0:	f300 808e 	bgt.w	8008bd0 <_dtoa_r+0x9a8>
 8008ab4:	9b05      	ldr	r3, [sp, #20]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	dc50      	bgt.n	8008b5c <_dtoa_r+0x934>
 8008aba:	e089      	b.n	8008bd0 <_dtoa_r+0x9a8>
 8008abc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ac2:	e75d      	b.n	8008980 <_dtoa_r+0x758>
 8008ac4:	9b01      	ldr	r3, [sp, #4]
 8008ac6:	1e5e      	subs	r6, r3, #1
 8008ac8:	9b06      	ldr	r3, [sp, #24]
 8008aca:	42b3      	cmp	r3, r6
 8008acc:	bfbf      	itttt	lt
 8008ace:	9b06      	ldrlt	r3, [sp, #24]
 8008ad0:	9606      	strlt	r6, [sp, #24]
 8008ad2:	1af2      	sublt	r2, r6, r3
 8008ad4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008ad6:	bfb6      	itet	lt
 8008ad8:	189b      	addlt	r3, r3, r2
 8008ada:	1b9e      	subge	r6, r3, r6
 8008adc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	bfb8      	it	lt
 8008ae2:	2600      	movlt	r6, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bfb5      	itete	lt
 8008ae8:	eba8 0503 	sublt.w	r5, r8, r3
 8008aec:	9b01      	ldrge	r3, [sp, #4]
 8008aee:	2300      	movlt	r3, #0
 8008af0:	4645      	movge	r5, r8
 8008af2:	e747      	b.n	8008984 <_dtoa_r+0x75c>
 8008af4:	9e06      	ldr	r6, [sp, #24]
 8008af6:	9f08      	ldr	r7, [sp, #32]
 8008af8:	4645      	mov	r5, r8
 8008afa:	e74c      	b.n	8008996 <_dtoa_r+0x76e>
 8008afc:	9a06      	ldr	r2, [sp, #24]
 8008afe:	e775      	b.n	80089ec <_dtoa_r+0x7c4>
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	dc18      	bgt.n	8008b38 <_dtoa_r+0x910>
 8008b06:	9b02      	ldr	r3, [sp, #8]
 8008b08:	b9b3      	cbnz	r3, 8008b38 <_dtoa_r+0x910>
 8008b0a:	9b03      	ldr	r3, [sp, #12]
 8008b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b10:	b9a3      	cbnz	r3, 8008b3c <_dtoa_r+0x914>
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b18:	0d1b      	lsrs	r3, r3, #20
 8008b1a:	051b      	lsls	r3, r3, #20
 8008b1c:	b12b      	cbz	r3, 8008b2a <_dtoa_r+0x902>
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	3301      	adds	r3, #1
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	f108 0801 	add.w	r8, r8, #1
 8008b28:	2301      	movs	r3, #1
 8008b2a:	9306      	str	r3, [sp, #24]
 8008b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f47f af74 	bne.w	8008a1c <_dtoa_r+0x7f4>
 8008b34:	2001      	movs	r0, #1
 8008b36:	e779      	b.n	8008a2c <_dtoa_r+0x804>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e7f6      	b.n	8008b2a <_dtoa_r+0x902>
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	e7f4      	b.n	8008b2a <_dtoa_r+0x902>
 8008b40:	d085      	beq.n	8008a4e <_dtoa_r+0x826>
 8008b42:	4618      	mov	r0, r3
 8008b44:	301c      	adds	r0, #28
 8008b46:	e77d      	b.n	8008a44 <_dtoa_r+0x81c>
 8008b48:	40240000 	.word	0x40240000
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	dc38      	bgt.n	8008bc4 <_dtoa_r+0x99c>
 8008b52:	9b05      	ldr	r3, [sp, #20]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	dd35      	ble.n	8008bc4 <_dtoa_r+0x99c>
 8008b58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b5c:	f1b9 0f00 	cmp.w	r9, #0
 8008b60:	d10d      	bne.n	8008b7e <_dtoa_r+0x956>
 8008b62:	4631      	mov	r1, r6
 8008b64:	464b      	mov	r3, r9
 8008b66:	2205      	movs	r2, #5
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 f9b7 	bl	8008edc <__multadd>
 8008b6e:	4601      	mov	r1, r0
 8008b70:	4606      	mov	r6, r0
 8008b72:	4658      	mov	r0, fp
 8008b74:	f000 fbce 	bl	8009314 <__mcmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f73f adbd 	bgt.w	80086f8 <_dtoa_r+0x4d0>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	9d00      	ldr	r5, [sp, #0]
 8008b82:	ea6f 0a03 	mvn.w	sl, r3
 8008b86:	f04f 0800 	mov.w	r8, #0
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 f983 	bl	8008e98 <_Bfree>
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	f43f aeb4 	beq.w	8008900 <_dtoa_r+0x6d8>
 8008b98:	f1b8 0f00 	cmp.w	r8, #0
 8008b9c:	d005      	beq.n	8008baa <_dtoa_r+0x982>
 8008b9e:	45b8      	cmp	r8, r7
 8008ba0:	d003      	beq.n	8008baa <_dtoa_r+0x982>
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 f977 	bl	8008e98 <_Bfree>
 8008baa:	4639      	mov	r1, r7
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 f973 	bl	8008e98 <_Bfree>
 8008bb2:	e6a5      	b.n	8008900 <_dtoa_r+0x6d8>
 8008bb4:	2600      	movs	r6, #0
 8008bb6:	4637      	mov	r7, r6
 8008bb8:	e7e1      	b.n	8008b7e <_dtoa_r+0x956>
 8008bba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008bbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008bc0:	4637      	mov	r7, r6
 8008bc2:	e599      	b.n	80086f8 <_dtoa_r+0x4d0>
 8008bc4:	9b08      	ldr	r3, [sp, #32]
 8008bc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 80fd 	beq.w	8008dca <_dtoa_r+0xba2>
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	dd05      	ble.n	8008be0 <_dtoa_r+0x9b8>
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fb2f 	bl	800923c <__lshift>
 8008bde:	4607      	mov	r7, r0
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d05c      	beq.n	8008ca0 <_dtoa_r+0xa78>
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f915 	bl	8008e18 <_Balloc>
 8008bee:	4605      	mov	r5, r0
 8008bf0:	b928      	cbnz	r0, 8008bfe <_dtoa_r+0x9d6>
 8008bf2:	4b80      	ldr	r3, [pc, #512]	; (8008df4 <_dtoa_r+0xbcc>)
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bfa:	f7ff bb2e 	b.w	800825a <_dtoa_r+0x32>
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	3202      	adds	r2, #2
 8008c02:	0092      	lsls	r2, r2, #2
 8008c04:	f107 010c 	add.w	r1, r7, #12
 8008c08:	300c      	adds	r0, #12
 8008c0a:	f7fe fde1 	bl	80077d0 <memcpy>
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4629      	mov	r1, r5
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 fb12 	bl	800923c <__lshift>
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	444b      	add	r3, r9
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	9b02      	ldr	r3, [sp, #8]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	46b8      	mov	r8, r7
 8008c2c:	9306      	str	r3, [sp, #24]
 8008c2e:	4607      	mov	r7, r0
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	4631      	mov	r1, r6
 8008c34:	3b01      	subs	r3, #1
 8008c36:	4658      	mov	r0, fp
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	f7ff fa69 	bl	8008110 <quorem>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	3330      	adds	r3, #48	; 0x30
 8008c42:	9004      	str	r0, [sp, #16]
 8008c44:	4641      	mov	r1, r8
 8008c46:	4658      	mov	r0, fp
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	f000 fb63 	bl	8009314 <__mcmp>
 8008c4e:	463a      	mov	r2, r7
 8008c50:	4681      	mov	r9, r0
 8008c52:	4631      	mov	r1, r6
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fb79 	bl	800934c <__mdiff>
 8008c5a:	68c2      	ldr	r2, [r0, #12]
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	4605      	mov	r5, r0
 8008c60:	bb02      	cbnz	r2, 8008ca4 <_dtoa_r+0xa7c>
 8008c62:	4601      	mov	r1, r0
 8008c64:	4658      	mov	r0, fp
 8008c66:	f000 fb55 	bl	8009314 <__mcmp>
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4620      	mov	r0, r4
 8008c72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008c76:	f000 f90f 	bl	8008e98 <_Bfree>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c7e:	9d01      	ldr	r5, [sp, #4]
 8008c80:	ea43 0102 	orr.w	r1, r3, r2
 8008c84:	9b06      	ldr	r3, [sp, #24]
 8008c86:	430b      	orrs	r3, r1
 8008c88:	9b08      	ldr	r3, [sp, #32]
 8008c8a:	d10d      	bne.n	8008ca8 <_dtoa_r+0xa80>
 8008c8c:	2b39      	cmp	r3, #57	; 0x39
 8008c8e:	d029      	beq.n	8008ce4 <_dtoa_r+0xabc>
 8008c90:	f1b9 0f00 	cmp.w	r9, #0
 8008c94:	dd01      	ble.n	8008c9a <_dtoa_r+0xa72>
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	3331      	adds	r3, #49	; 0x31
 8008c9a:	9a02      	ldr	r2, [sp, #8]
 8008c9c:	7013      	strb	r3, [r2, #0]
 8008c9e:	e774      	b.n	8008b8a <_dtoa_r+0x962>
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	e7b9      	b.n	8008c18 <_dtoa_r+0x9f0>
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	e7e2      	b.n	8008c6e <_dtoa_r+0xa46>
 8008ca8:	f1b9 0f00 	cmp.w	r9, #0
 8008cac:	db06      	blt.n	8008cbc <_dtoa_r+0xa94>
 8008cae:	9905      	ldr	r1, [sp, #20]
 8008cb0:	ea41 0909 	orr.w	r9, r1, r9
 8008cb4:	9906      	ldr	r1, [sp, #24]
 8008cb6:	ea59 0101 	orrs.w	r1, r9, r1
 8008cba:	d120      	bne.n	8008cfe <_dtoa_r+0xad6>
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	ddec      	ble.n	8008c9a <_dtoa_r+0xa72>
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	f000 fab8 	bl	800923c <__lshift>
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4683      	mov	fp, r0
 8008cd0:	f000 fb20 	bl	8009314 <__mcmp>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	dc02      	bgt.n	8008ce0 <_dtoa_r+0xab8>
 8008cda:	d1de      	bne.n	8008c9a <_dtoa_r+0xa72>
 8008cdc:	07da      	lsls	r2, r3, #31
 8008cde:	d5dc      	bpl.n	8008c9a <_dtoa_r+0xa72>
 8008ce0:	2b39      	cmp	r3, #57	; 0x39
 8008ce2:	d1d8      	bne.n	8008c96 <_dtoa_r+0xa6e>
 8008ce4:	9a02      	ldr	r2, [sp, #8]
 8008ce6:	2339      	movs	r3, #57	; 0x39
 8008ce8:	7013      	strb	r3, [r2, #0]
 8008cea:	462b      	mov	r3, r5
 8008cec:	461d      	mov	r5, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cf4:	2a39      	cmp	r2, #57	; 0x39
 8008cf6:	d050      	beq.n	8008d9a <_dtoa_r+0xb72>
 8008cf8:	3201      	adds	r2, #1
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	e745      	b.n	8008b8a <_dtoa_r+0x962>
 8008cfe:	2a00      	cmp	r2, #0
 8008d00:	dd03      	ble.n	8008d0a <_dtoa_r+0xae2>
 8008d02:	2b39      	cmp	r3, #57	; 0x39
 8008d04:	d0ee      	beq.n	8008ce4 <_dtoa_r+0xabc>
 8008d06:	3301      	adds	r3, #1
 8008d08:	e7c7      	b.n	8008c9a <_dtoa_r+0xa72>
 8008d0a:	9a01      	ldr	r2, [sp, #4]
 8008d0c:	9907      	ldr	r1, [sp, #28]
 8008d0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d12:	428a      	cmp	r2, r1
 8008d14:	d02a      	beq.n	8008d6c <_dtoa_r+0xb44>
 8008d16:	4659      	mov	r1, fp
 8008d18:	2300      	movs	r3, #0
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 f8dd 	bl	8008edc <__multadd>
 8008d22:	45b8      	cmp	r8, r7
 8008d24:	4683      	mov	fp, r0
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	f04f 020a 	mov.w	r2, #10
 8008d2e:	4641      	mov	r1, r8
 8008d30:	4620      	mov	r0, r4
 8008d32:	d107      	bne.n	8008d44 <_dtoa_r+0xb1c>
 8008d34:	f000 f8d2 	bl	8008edc <__multadd>
 8008d38:	4680      	mov	r8, r0
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	9b01      	ldr	r3, [sp, #4]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	e775      	b.n	8008c30 <_dtoa_r+0xa08>
 8008d44:	f000 f8ca 	bl	8008edc <__multadd>
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	220a      	movs	r2, #10
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 f8c3 	bl	8008edc <__multadd>
 8008d56:	4607      	mov	r7, r0
 8008d58:	e7f0      	b.n	8008d3c <_dtoa_r+0xb14>
 8008d5a:	f1b9 0f00 	cmp.w	r9, #0
 8008d5e:	9a00      	ldr	r2, [sp, #0]
 8008d60:	bfcc      	ite	gt
 8008d62:	464d      	movgt	r5, r9
 8008d64:	2501      	movle	r5, #1
 8008d66:	4415      	add	r5, r2
 8008d68:	f04f 0800 	mov.w	r8, #0
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4620      	mov	r0, r4
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f000 fa62 	bl	800923c <__lshift>
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4683      	mov	fp, r0
 8008d7c:	f000 faca 	bl	8009314 <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dcb2      	bgt.n	8008cea <_dtoa_r+0xac2>
 8008d84:	d102      	bne.n	8008d8c <_dtoa_r+0xb64>
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	07db      	lsls	r3, r3, #31
 8008d8a:	d4ae      	bmi.n	8008cea <_dtoa_r+0xac2>
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	461d      	mov	r5, r3
 8008d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d94:	2a30      	cmp	r2, #48	; 0x30
 8008d96:	d0fa      	beq.n	8008d8e <_dtoa_r+0xb66>
 8008d98:	e6f7      	b.n	8008b8a <_dtoa_r+0x962>
 8008d9a:	9a00      	ldr	r2, [sp, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d1a5      	bne.n	8008cec <_dtoa_r+0xac4>
 8008da0:	f10a 0a01 	add.w	sl, sl, #1
 8008da4:	2331      	movs	r3, #49	; 0x31
 8008da6:	e779      	b.n	8008c9c <_dtoa_r+0xa74>
 8008da8:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <_dtoa_r+0xbd0>)
 8008daa:	f7ff baaf 	b.w	800830c <_dtoa_r+0xe4>
 8008dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f47f aa86 	bne.w	80082c2 <_dtoa_r+0x9a>
 8008db6:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <_dtoa_r+0xbd4>)
 8008db8:	f7ff baa8 	b.w	800830c <_dtoa_r+0xe4>
 8008dbc:	f1b9 0f00 	cmp.w	r9, #0
 8008dc0:	dc03      	bgt.n	8008dca <_dtoa_r+0xba2>
 8008dc2:	9b05      	ldr	r3, [sp, #20]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	f73f aec9 	bgt.w	8008b5c <_dtoa_r+0x934>
 8008dca:	9d00      	ldr	r5, [sp, #0]
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f7ff f99e 	bl	8008110 <quorem>
 8008dd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008dd8:	f805 3b01 	strb.w	r3, [r5], #1
 8008ddc:	9a00      	ldr	r2, [sp, #0]
 8008dde:	1aaa      	subs	r2, r5, r2
 8008de0:	4591      	cmp	r9, r2
 8008de2:	ddba      	ble.n	8008d5a <_dtoa_r+0xb32>
 8008de4:	4659      	mov	r1, fp
 8008de6:	2300      	movs	r3, #0
 8008de8:	220a      	movs	r2, #10
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f876 	bl	8008edc <__multadd>
 8008df0:	4683      	mov	fp, r0
 8008df2:	e7eb      	b.n	8008dcc <_dtoa_r+0xba4>
 8008df4:	0800a713 	.word	0x0800a713
 8008df8:	0800a66c 	.word	0x0800a66c
 8008dfc:	0800a690 	.word	0x0800a690

08008e00 <_localeconv_r>:
 8008e00:	4800      	ldr	r0, [pc, #0]	; (8008e04 <_localeconv_r+0x4>)
 8008e02:	4770      	bx	lr
 8008e04:	200001e4 	.word	0x200001e4

08008e08 <malloc>:
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <malloc+0xc>)
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	f000 bbe1 	b.w	80095d4 <_malloc_r>
 8008e12:	bf00      	nop
 8008e14:	20000090 	.word	0x20000090

08008e18 <_Balloc>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	b976      	cbnz	r6, 8008e40 <_Balloc+0x28>
 8008e22:	2010      	movs	r0, #16
 8008e24:	f7ff fff0 	bl	8008e08 <malloc>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8008e2c:	b920      	cbnz	r0, 8008e38 <_Balloc+0x20>
 8008e2e:	4b18      	ldr	r3, [pc, #96]	; (8008e90 <_Balloc+0x78>)
 8008e30:	4818      	ldr	r0, [pc, #96]	; (8008e94 <_Balloc+0x7c>)
 8008e32:	2166      	movs	r1, #102	; 0x66
 8008e34:	f000 fd94 	bl	8009960 <__assert_func>
 8008e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e3c:	6006      	str	r6, [r0, #0]
 8008e3e:	60c6      	str	r6, [r0, #12]
 8008e40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e42:	68f3      	ldr	r3, [r6, #12]
 8008e44:	b183      	cbz	r3, 8008e68 <_Balloc+0x50>
 8008e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e4e:	b9b8      	cbnz	r0, 8008e80 <_Balloc+0x68>
 8008e50:	2101      	movs	r1, #1
 8008e52:	fa01 f605 	lsl.w	r6, r1, r5
 8008e56:	1d72      	adds	r2, r6, #5
 8008e58:	0092      	lsls	r2, r2, #2
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fb5a 	bl	8009514 <_calloc_r>
 8008e60:	b160      	cbz	r0, 8008e7c <_Balloc+0x64>
 8008e62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e66:	e00e      	b.n	8008e86 <_Balloc+0x6e>
 8008e68:	2221      	movs	r2, #33	; 0x21
 8008e6a:	2104      	movs	r1, #4
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fb51 	bl	8009514 <_calloc_r>
 8008e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e74:	60f0      	str	r0, [r6, #12]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e4      	bne.n	8008e46 <_Balloc+0x2e>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	6802      	ldr	r2, [r0, #0]
 8008e82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e86:	2300      	movs	r3, #0
 8008e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e8c:	e7f7      	b.n	8008e7e <_Balloc+0x66>
 8008e8e:	bf00      	nop
 8008e90:	0800a69d 	.word	0x0800a69d
 8008e94:	0800a724 	.word	0x0800a724

08008e98 <_Bfree>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	b976      	cbnz	r6, 8008ec0 <_Bfree+0x28>
 8008ea2:	2010      	movs	r0, #16
 8008ea4:	f7ff ffb0 	bl	8008e08 <malloc>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	6268      	str	r0, [r5, #36]	; 0x24
 8008eac:	b920      	cbnz	r0, 8008eb8 <_Bfree+0x20>
 8008eae:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <_Bfree+0x3c>)
 8008eb0:	4809      	ldr	r0, [pc, #36]	; (8008ed8 <_Bfree+0x40>)
 8008eb2:	218a      	movs	r1, #138	; 0x8a
 8008eb4:	f000 fd54 	bl	8009960 <__assert_func>
 8008eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ebc:	6006      	str	r6, [r0, #0]
 8008ebe:	60c6      	str	r6, [r0, #12]
 8008ec0:	b13c      	cbz	r4, 8008ed2 <_Bfree+0x3a>
 8008ec2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ec4:	6862      	ldr	r2, [r4, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ecc:	6021      	str	r1, [r4, #0]
 8008ece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	0800a69d 	.word	0x0800a69d
 8008ed8:	0800a724 	.word	0x0800a724

08008edc <__multadd>:
 8008edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee0:	690e      	ldr	r6, [r1, #16]
 8008ee2:	4607      	mov	r7, r0
 8008ee4:	4698      	mov	r8, r3
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	f101 0014 	add.w	r0, r1, #20
 8008eec:	2300      	movs	r3, #0
 8008eee:	6805      	ldr	r5, [r0, #0]
 8008ef0:	b2a9      	uxth	r1, r5
 8008ef2:	fb02 8101 	mla	r1, r2, r1, r8
 8008ef6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008efa:	0c2d      	lsrs	r5, r5, #16
 8008efc:	fb02 c505 	mla	r5, r2, r5, ip
 8008f00:	b289      	uxth	r1, r1
 8008f02:	3301      	adds	r3, #1
 8008f04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	f840 1b04 	str.w	r1, [r0], #4
 8008f0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008f12:	dcec      	bgt.n	8008eee <__multadd+0x12>
 8008f14:	f1b8 0f00 	cmp.w	r8, #0
 8008f18:	d022      	beq.n	8008f60 <__multadd+0x84>
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	42b3      	cmp	r3, r6
 8008f1e:	dc19      	bgt.n	8008f54 <__multadd+0x78>
 8008f20:	6861      	ldr	r1, [r4, #4]
 8008f22:	4638      	mov	r0, r7
 8008f24:	3101      	adds	r1, #1
 8008f26:	f7ff ff77 	bl	8008e18 <_Balloc>
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	b928      	cbnz	r0, 8008f3a <__multadd+0x5e>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <__multadd+0x8c>)
 8008f32:	480e      	ldr	r0, [pc, #56]	; (8008f6c <__multadd+0x90>)
 8008f34:	21b5      	movs	r1, #181	; 0xb5
 8008f36:	f000 fd13 	bl	8009960 <__assert_func>
 8008f3a:	6922      	ldr	r2, [r4, #16]
 8008f3c:	3202      	adds	r2, #2
 8008f3e:	f104 010c 	add.w	r1, r4, #12
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	300c      	adds	r0, #12
 8008f46:	f7fe fc43 	bl	80077d0 <memcpy>
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff ffa3 	bl	8008e98 <_Bfree>
 8008f52:	462c      	mov	r4, r5
 8008f54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008f58:	3601      	adds	r6, #1
 8008f5a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008f5e:	6126      	str	r6, [r4, #16]
 8008f60:	4620      	mov	r0, r4
 8008f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f66:	bf00      	nop
 8008f68:	0800a713 	.word	0x0800a713
 8008f6c:	0800a724 	.word	0x0800a724

08008f70 <__hi0bits>:
 8008f70:	0c03      	lsrs	r3, r0, #16
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	b9d3      	cbnz	r3, 8008fac <__hi0bits+0x3c>
 8008f76:	0400      	lsls	r0, r0, #16
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f7e:	bf04      	itt	eq
 8008f80:	0200      	lsleq	r0, r0, #8
 8008f82:	3308      	addeq	r3, #8
 8008f84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f88:	bf04      	itt	eq
 8008f8a:	0100      	lsleq	r0, r0, #4
 8008f8c:	3304      	addeq	r3, #4
 8008f8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f92:	bf04      	itt	eq
 8008f94:	0080      	lsleq	r0, r0, #2
 8008f96:	3302      	addeq	r3, #2
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	db05      	blt.n	8008fa8 <__hi0bits+0x38>
 8008f9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fa0:	f103 0301 	add.w	r3, r3, #1
 8008fa4:	bf08      	it	eq
 8008fa6:	2320      	moveq	r3, #32
 8008fa8:	4618      	mov	r0, r3
 8008faa:	4770      	bx	lr
 8008fac:	2300      	movs	r3, #0
 8008fae:	e7e4      	b.n	8008f7a <__hi0bits+0xa>

08008fb0 <__lo0bits>:
 8008fb0:	6803      	ldr	r3, [r0, #0]
 8008fb2:	f013 0207 	ands.w	r2, r3, #7
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	d00b      	beq.n	8008fd2 <__lo0bits+0x22>
 8008fba:	07da      	lsls	r2, r3, #31
 8008fbc:	d424      	bmi.n	8009008 <__lo0bits+0x58>
 8008fbe:	0798      	lsls	r0, r3, #30
 8008fc0:	bf49      	itett	mi
 8008fc2:	085b      	lsrmi	r3, r3, #1
 8008fc4:	089b      	lsrpl	r3, r3, #2
 8008fc6:	2001      	movmi	r0, #1
 8008fc8:	600b      	strmi	r3, [r1, #0]
 8008fca:	bf5c      	itt	pl
 8008fcc:	600b      	strpl	r3, [r1, #0]
 8008fce:	2002      	movpl	r0, #2
 8008fd0:	4770      	bx	lr
 8008fd2:	b298      	uxth	r0, r3
 8008fd4:	b9b0      	cbnz	r0, 8009004 <__lo0bits+0x54>
 8008fd6:	0c1b      	lsrs	r3, r3, #16
 8008fd8:	2010      	movs	r0, #16
 8008fda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008fde:	bf04      	itt	eq
 8008fe0:	0a1b      	lsreq	r3, r3, #8
 8008fe2:	3008      	addeq	r0, #8
 8008fe4:	071a      	lsls	r2, r3, #28
 8008fe6:	bf04      	itt	eq
 8008fe8:	091b      	lsreq	r3, r3, #4
 8008fea:	3004      	addeq	r0, #4
 8008fec:	079a      	lsls	r2, r3, #30
 8008fee:	bf04      	itt	eq
 8008ff0:	089b      	lsreq	r3, r3, #2
 8008ff2:	3002      	addeq	r0, #2
 8008ff4:	07da      	lsls	r2, r3, #31
 8008ff6:	d403      	bmi.n	8009000 <__lo0bits+0x50>
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	f100 0001 	add.w	r0, r0, #1
 8008ffe:	d005      	beq.n	800900c <__lo0bits+0x5c>
 8009000:	600b      	str	r3, [r1, #0]
 8009002:	4770      	bx	lr
 8009004:	4610      	mov	r0, r2
 8009006:	e7e8      	b.n	8008fda <__lo0bits+0x2a>
 8009008:	2000      	movs	r0, #0
 800900a:	4770      	bx	lr
 800900c:	2020      	movs	r0, #32
 800900e:	4770      	bx	lr

08009010 <__i2b>:
 8009010:	b510      	push	{r4, lr}
 8009012:	460c      	mov	r4, r1
 8009014:	2101      	movs	r1, #1
 8009016:	f7ff feff 	bl	8008e18 <_Balloc>
 800901a:	4602      	mov	r2, r0
 800901c:	b928      	cbnz	r0, 800902a <__i2b+0x1a>
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <__i2b+0x24>)
 8009020:	4805      	ldr	r0, [pc, #20]	; (8009038 <__i2b+0x28>)
 8009022:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009026:	f000 fc9b 	bl	8009960 <__assert_func>
 800902a:	2301      	movs	r3, #1
 800902c:	6144      	str	r4, [r0, #20]
 800902e:	6103      	str	r3, [r0, #16]
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	0800a713 	.word	0x0800a713
 8009038:	0800a724 	.word	0x0800a724

0800903c <__multiply>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4614      	mov	r4, r2
 8009042:	690a      	ldr	r2, [r1, #16]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	429a      	cmp	r2, r3
 8009048:	bfb8      	it	lt
 800904a:	460b      	movlt	r3, r1
 800904c:	460d      	mov	r5, r1
 800904e:	bfbc      	itt	lt
 8009050:	4625      	movlt	r5, r4
 8009052:	461c      	movlt	r4, r3
 8009054:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009058:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800905c:	68ab      	ldr	r3, [r5, #8]
 800905e:	6869      	ldr	r1, [r5, #4]
 8009060:	eb0a 0709 	add.w	r7, sl, r9
 8009064:	42bb      	cmp	r3, r7
 8009066:	b085      	sub	sp, #20
 8009068:	bfb8      	it	lt
 800906a:	3101      	addlt	r1, #1
 800906c:	f7ff fed4 	bl	8008e18 <_Balloc>
 8009070:	b930      	cbnz	r0, 8009080 <__multiply+0x44>
 8009072:	4602      	mov	r2, r0
 8009074:	4b42      	ldr	r3, [pc, #264]	; (8009180 <__multiply+0x144>)
 8009076:	4843      	ldr	r0, [pc, #268]	; (8009184 <__multiply+0x148>)
 8009078:	f240 115d 	movw	r1, #349	; 0x15d
 800907c:	f000 fc70 	bl	8009960 <__assert_func>
 8009080:	f100 0614 	add.w	r6, r0, #20
 8009084:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009088:	4633      	mov	r3, r6
 800908a:	2200      	movs	r2, #0
 800908c:	4543      	cmp	r3, r8
 800908e:	d31e      	bcc.n	80090ce <__multiply+0x92>
 8009090:	f105 0c14 	add.w	ip, r5, #20
 8009094:	f104 0314 	add.w	r3, r4, #20
 8009098:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800909c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	ebac 0205 	sub.w	r2, ip, r5
 80090a6:	3a15      	subs	r2, #21
 80090a8:	f022 0203 	bic.w	r2, r2, #3
 80090ac:	3204      	adds	r2, #4
 80090ae:	f105 0115 	add.w	r1, r5, #21
 80090b2:	458c      	cmp	ip, r1
 80090b4:	bf38      	it	cc
 80090b6:	2204      	movcc	r2, #4
 80090b8:	9201      	str	r2, [sp, #4]
 80090ba:	9a02      	ldr	r2, [sp, #8]
 80090bc:	9303      	str	r3, [sp, #12]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d808      	bhi.n	80090d4 <__multiply+0x98>
 80090c2:	2f00      	cmp	r7, #0
 80090c4:	dc55      	bgt.n	8009172 <__multiply+0x136>
 80090c6:	6107      	str	r7, [r0, #16]
 80090c8:	b005      	add	sp, #20
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	f843 2b04 	str.w	r2, [r3], #4
 80090d2:	e7db      	b.n	800908c <__multiply+0x50>
 80090d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80090d8:	f1ba 0f00 	cmp.w	sl, #0
 80090dc:	d020      	beq.n	8009120 <__multiply+0xe4>
 80090de:	f105 0e14 	add.w	lr, r5, #20
 80090e2:	46b1      	mov	r9, r6
 80090e4:	2200      	movs	r2, #0
 80090e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80090ea:	f8d9 b000 	ldr.w	fp, [r9]
 80090ee:	b2a1      	uxth	r1, r4
 80090f0:	fa1f fb8b 	uxth.w	fp, fp
 80090f4:	fb0a b101 	mla	r1, sl, r1, fp
 80090f8:	4411      	add	r1, r2
 80090fa:	f8d9 2000 	ldr.w	r2, [r9]
 80090fe:	0c24      	lsrs	r4, r4, #16
 8009100:	0c12      	lsrs	r2, r2, #16
 8009102:	fb0a 2404 	mla	r4, sl, r4, r2
 8009106:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800910a:	b289      	uxth	r1, r1
 800910c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009110:	45f4      	cmp	ip, lr
 8009112:	f849 1b04 	str.w	r1, [r9], #4
 8009116:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800911a:	d8e4      	bhi.n	80090e6 <__multiply+0xaa>
 800911c:	9901      	ldr	r1, [sp, #4]
 800911e:	5072      	str	r2, [r6, r1]
 8009120:	9a03      	ldr	r2, [sp, #12]
 8009122:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009126:	3304      	adds	r3, #4
 8009128:	f1b9 0f00 	cmp.w	r9, #0
 800912c:	d01f      	beq.n	800916e <__multiply+0x132>
 800912e:	6834      	ldr	r4, [r6, #0]
 8009130:	f105 0114 	add.w	r1, r5, #20
 8009134:	46b6      	mov	lr, r6
 8009136:	f04f 0a00 	mov.w	sl, #0
 800913a:	880a      	ldrh	r2, [r1, #0]
 800913c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009140:	fb09 b202 	mla	r2, r9, r2, fp
 8009144:	4492      	add	sl, r2
 8009146:	b2a4      	uxth	r4, r4
 8009148:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800914c:	f84e 4b04 	str.w	r4, [lr], #4
 8009150:	f851 4b04 	ldr.w	r4, [r1], #4
 8009154:	f8be 2000 	ldrh.w	r2, [lr]
 8009158:	0c24      	lsrs	r4, r4, #16
 800915a:	fb09 2404 	mla	r4, r9, r4, r2
 800915e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009162:	458c      	cmp	ip, r1
 8009164:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009168:	d8e7      	bhi.n	800913a <__multiply+0xfe>
 800916a:	9a01      	ldr	r2, [sp, #4]
 800916c:	50b4      	str	r4, [r6, r2]
 800916e:	3604      	adds	r6, #4
 8009170:	e7a3      	b.n	80090ba <__multiply+0x7e>
 8009172:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1a5      	bne.n	80090c6 <__multiply+0x8a>
 800917a:	3f01      	subs	r7, #1
 800917c:	e7a1      	b.n	80090c2 <__multiply+0x86>
 800917e:	bf00      	nop
 8009180:	0800a713 	.word	0x0800a713
 8009184:	0800a724 	.word	0x0800a724

08009188 <__pow5mult>:
 8009188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800918c:	4615      	mov	r5, r2
 800918e:	f012 0203 	ands.w	r2, r2, #3
 8009192:	4606      	mov	r6, r0
 8009194:	460f      	mov	r7, r1
 8009196:	d007      	beq.n	80091a8 <__pow5mult+0x20>
 8009198:	4c25      	ldr	r4, [pc, #148]	; (8009230 <__pow5mult+0xa8>)
 800919a:	3a01      	subs	r2, #1
 800919c:	2300      	movs	r3, #0
 800919e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091a2:	f7ff fe9b 	bl	8008edc <__multadd>
 80091a6:	4607      	mov	r7, r0
 80091a8:	10ad      	asrs	r5, r5, #2
 80091aa:	d03d      	beq.n	8009228 <__pow5mult+0xa0>
 80091ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091ae:	b97c      	cbnz	r4, 80091d0 <__pow5mult+0x48>
 80091b0:	2010      	movs	r0, #16
 80091b2:	f7ff fe29 	bl	8008e08 <malloc>
 80091b6:	4602      	mov	r2, r0
 80091b8:	6270      	str	r0, [r6, #36]	; 0x24
 80091ba:	b928      	cbnz	r0, 80091c8 <__pow5mult+0x40>
 80091bc:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <__pow5mult+0xac>)
 80091be:	481e      	ldr	r0, [pc, #120]	; (8009238 <__pow5mult+0xb0>)
 80091c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091c4:	f000 fbcc 	bl	8009960 <__assert_func>
 80091c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091cc:	6004      	str	r4, [r0, #0]
 80091ce:	60c4      	str	r4, [r0, #12]
 80091d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091d8:	b94c      	cbnz	r4, 80091ee <__pow5mult+0x66>
 80091da:	f240 2171 	movw	r1, #625	; 0x271
 80091de:	4630      	mov	r0, r6
 80091e0:	f7ff ff16 	bl	8009010 <__i2b>
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80091ea:	4604      	mov	r4, r0
 80091ec:	6003      	str	r3, [r0, #0]
 80091ee:	f04f 0900 	mov.w	r9, #0
 80091f2:	07eb      	lsls	r3, r5, #31
 80091f4:	d50a      	bpl.n	800920c <__pow5mult+0x84>
 80091f6:	4639      	mov	r1, r7
 80091f8:	4622      	mov	r2, r4
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ff1e 	bl	800903c <__multiply>
 8009200:	4639      	mov	r1, r7
 8009202:	4680      	mov	r8, r0
 8009204:	4630      	mov	r0, r6
 8009206:	f7ff fe47 	bl	8008e98 <_Bfree>
 800920a:	4647      	mov	r7, r8
 800920c:	106d      	asrs	r5, r5, #1
 800920e:	d00b      	beq.n	8009228 <__pow5mult+0xa0>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	b938      	cbnz	r0, 8009224 <__pow5mult+0x9c>
 8009214:	4622      	mov	r2, r4
 8009216:	4621      	mov	r1, r4
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff ff0f 	bl	800903c <__multiply>
 800921e:	6020      	str	r0, [r4, #0]
 8009220:	f8c0 9000 	str.w	r9, [r0]
 8009224:	4604      	mov	r4, r0
 8009226:	e7e4      	b.n	80091f2 <__pow5mult+0x6a>
 8009228:	4638      	mov	r0, r7
 800922a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922e:	bf00      	nop
 8009230:	0800a878 	.word	0x0800a878
 8009234:	0800a69d 	.word	0x0800a69d
 8009238:	0800a724 	.word	0x0800a724

0800923c <__lshift>:
 800923c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	460c      	mov	r4, r1
 8009242:	6849      	ldr	r1, [r1, #4]
 8009244:	6923      	ldr	r3, [r4, #16]
 8009246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	4607      	mov	r7, r0
 800924e:	4691      	mov	r9, r2
 8009250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009254:	f108 0601 	add.w	r6, r8, #1
 8009258:	42b3      	cmp	r3, r6
 800925a:	db0b      	blt.n	8009274 <__lshift+0x38>
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff fddb 	bl	8008e18 <_Balloc>
 8009262:	4605      	mov	r5, r0
 8009264:	b948      	cbnz	r0, 800927a <__lshift+0x3e>
 8009266:	4602      	mov	r2, r0
 8009268:	4b28      	ldr	r3, [pc, #160]	; (800930c <__lshift+0xd0>)
 800926a:	4829      	ldr	r0, [pc, #164]	; (8009310 <__lshift+0xd4>)
 800926c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009270:	f000 fb76 	bl	8009960 <__assert_func>
 8009274:	3101      	adds	r1, #1
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	e7ee      	b.n	8009258 <__lshift+0x1c>
 800927a:	2300      	movs	r3, #0
 800927c:	f100 0114 	add.w	r1, r0, #20
 8009280:	f100 0210 	add.w	r2, r0, #16
 8009284:	4618      	mov	r0, r3
 8009286:	4553      	cmp	r3, sl
 8009288:	db33      	blt.n	80092f2 <__lshift+0xb6>
 800928a:	6920      	ldr	r0, [r4, #16]
 800928c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009290:	f104 0314 	add.w	r3, r4, #20
 8009294:	f019 091f 	ands.w	r9, r9, #31
 8009298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800929c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092a0:	d02b      	beq.n	80092fa <__lshift+0xbe>
 80092a2:	f1c9 0e20 	rsb	lr, r9, #32
 80092a6:	468a      	mov	sl, r1
 80092a8:	2200      	movs	r2, #0
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	fa00 f009 	lsl.w	r0, r0, r9
 80092b0:	4302      	orrs	r2, r0
 80092b2:	f84a 2b04 	str.w	r2, [sl], #4
 80092b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ba:	459c      	cmp	ip, r3
 80092bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80092c0:	d8f3      	bhi.n	80092aa <__lshift+0x6e>
 80092c2:	ebac 0304 	sub.w	r3, ip, r4
 80092c6:	3b15      	subs	r3, #21
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	3304      	adds	r3, #4
 80092ce:	f104 0015 	add.w	r0, r4, #21
 80092d2:	4584      	cmp	ip, r0
 80092d4:	bf38      	it	cc
 80092d6:	2304      	movcc	r3, #4
 80092d8:	50ca      	str	r2, [r1, r3]
 80092da:	b10a      	cbz	r2, 80092e0 <__lshift+0xa4>
 80092dc:	f108 0602 	add.w	r6, r8, #2
 80092e0:	3e01      	subs	r6, #1
 80092e2:	4638      	mov	r0, r7
 80092e4:	612e      	str	r6, [r5, #16]
 80092e6:	4621      	mov	r1, r4
 80092e8:	f7ff fdd6 	bl	8008e98 <_Bfree>
 80092ec:	4628      	mov	r0, r5
 80092ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092f6:	3301      	adds	r3, #1
 80092f8:	e7c5      	b.n	8009286 <__lshift+0x4a>
 80092fa:	3904      	subs	r1, #4
 80092fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009300:	f841 2f04 	str.w	r2, [r1, #4]!
 8009304:	459c      	cmp	ip, r3
 8009306:	d8f9      	bhi.n	80092fc <__lshift+0xc0>
 8009308:	e7ea      	b.n	80092e0 <__lshift+0xa4>
 800930a:	bf00      	nop
 800930c:	0800a713 	.word	0x0800a713
 8009310:	0800a724 	.word	0x0800a724

08009314 <__mcmp>:
 8009314:	b530      	push	{r4, r5, lr}
 8009316:	6902      	ldr	r2, [r0, #16]
 8009318:	690c      	ldr	r4, [r1, #16]
 800931a:	1b12      	subs	r2, r2, r4
 800931c:	d10e      	bne.n	800933c <__mcmp+0x28>
 800931e:	f100 0314 	add.w	r3, r0, #20
 8009322:	3114      	adds	r1, #20
 8009324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800932c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009334:	42a5      	cmp	r5, r4
 8009336:	d003      	beq.n	8009340 <__mcmp+0x2c>
 8009338:	d305      	bcc.n	8009346 <__mcmp+0x32>
 800933a:	2201      	movs	r2, #1
 800933c:	4610      	mov	r0, r2
 800933e:	bd30      	pop	{r4, r5, pc}
 8009340:	4283      	cmp	r3, r0
 8009342:	d3f3      	bcc.n	800932c <__mcmp+0x18>
 8009344:	e7fa      	b.n	800933c <__mcmp+0x28>
 8009346:	f04f 32ff 	mov.w	r2, #4294967295
 800934a:	e7f7      	b.n	800933c <__mcmp+0x28>

0800934c <__mdiff>:
 800934c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	460c      	mov	r4, r1
 8009352:	4606      	mov	r6, r0
 8009354:	4611      	mov	r1, r2
 8009356:	4620      	mov	r0, r4
 8009358:	4617      	mov	r7, r2
 800935a:	f7ff ffdb 	bl	8009314 <__mcmp>
 800935e:	1e05      	subs	r5, r0, #0
 8009360:	d110      	bne.n	8009384 <__mdiff+0x38>
 8009362:	4629      	mov	r1, r5
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff fd57 	bl	8008e18 <_Balloc>
 800936a:	b930      	cbnz	r0, 800937a <__mdiff+0x2e>
 800936c:	4b39      	ldr	r3, [pc, #228]	; (8009454 <__mdiff+0x108>)
 800936e:	4602      	mov	r2, r0
 8009370:	f240 2132 	movw	r1, #562	; 0x232
 8009374:	4838      	ldr	r0, [pc, #224]	; (8009458 <__mdiff+0x10c>)
 8009376:	f000 faf3 	bl	8009960 <__assert_func>
 800937a:	2301      	movs	r3, #1
 800937c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	bfa4      	itt	ge
 8009386:	463b      	movge	r3, r7
 8009388:	4627      	movge	r7, r4
 800938a:	4630      	mov	r0, r6
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	bfa6      	itte	ge
 8009390:	461c      	movge	r4, r3
 8009392:	2500      	movge	r5, #0
 8009394:	2501      	movlt	r5, #1
 8009396:	f7ff fd3f 	bl	8008e18 <_Balloc>
 800939a:	b920      	cbnz	r0, 80093a6 <__mdiff+0x5a>
 800939c:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <__mdiff+0x108>)
 800939e:	4602      	mov	r2, r0
 80093a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093a4:	e7e6      	b.n	8009374 <__mdiff+0x28>
 80093a6:	693e      	ldr	r6, [r7, #16]
 80093a8:	60c5      	str	r5, [r0, #12]
 80093aa:	6925      	ldr	r5, [r4, #16]
 80093ac:	f107 0114 	add.w	r1, r7, #20
 80093b0:	f104 0914 	add.w	r9, r4, #20
 80093b4:	f100 0e14 	add.w	lr, r0, #20
 80093b8:	f107 0210 	add.w	r2, r7, #16
 80093bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80093c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80093c4:	46f2      	mov	sl, lr
 80093c6:	2700      	movs	r7, #0
 80093c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80093cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093d0:	fa1f f883 	uxth.w	r8, r3
 80093d4:	fa17 f78b 	uxtah	r7, r7, fp
 80093d8:	0c1b      	lsrs	r3, r3, #16
 80093da:	eba7 0808 	sub.w	r8, r7, r8
 80093de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093e6:	fa1f f888 	uxth.w	r8, r8
 80093ea:	141f      	asrs	r7, r3, #16
 80093ec:	454d      	cmp	r5, r9
 80093ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093f2:	f84a 3b04 	str.w	r3, [sl], #4
 80093f6:	d8e7      	bhi.n	80093c8 <__mdiff+0x7c>
 80093f8:	1b2b      	subs	r3, r5, r4
 80093fa:	3b15      	subs	r3, #21
 80093fc:	f023 0303 	bic.w	r3, r3, #3
 8009400:	3304      	adds	r3, #4
 8009402:	3415      	adds	r4, #21
 8009404:	42a5      	cmp	r5, r4
 8009406:	bf38      	it	cc
 8009408:	2304      	movcc	r3, #4
 800940a:	4419      	add	r1, r3
 800940c:	4473      	add	r3, lr
 800940e:	469e      	mov	lr, r3
 8009410:	460d      	mov	r5, r1
 8009412:	4565      	cmp	r5, ip
 8009414:	d30e      	bcc.n	8009434 <__mdiff+0xe8>
 8009416:	f10c 0203 	add.w	r2, ip, #3
 800941a:	1a52      	subs	r2, r2, r1
 800941c:	f022 0203 	bic.w	r2, r2, #3
 8009420:	3903      	subs	r1, #3
 8009422:	458c      	cmp	ip, r1
 8009424:	bf38      	it	cc
 8009426:	2200      	movcc	r2, #0
 8009428:	441a      	add	r2, r3
 800942a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800942e:	b17b      	cbz	r3, 8009450 <__mdiff+0x104>
 8009430:	6106      	str	r6, [r0, #16]
 8009432:	e7a5      	b.n	8009380 <__mdiff+0x34>
 8009434:	f855 8b04 	ldr.w	r8, [r5], #4
 8009438:	fa17 f488 	uxtah	r4, r7, r8
 800943c:	1422      	asrs	r2, r4, #16
 800943e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009442:	b2a4      	uxth	r4, r4
 8009444:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009448:	f84e 4b04 	str.w	r4, [lr], #4
 800944c:	1417      	asrs	r7, r2, #16
 800944e:	e7e0      	b.n	8009412 <__mdiff+0xc6>
 8009450:	3e01      	subs	r6, #1
 8009452:	e7ea      	b.n	800942a <__mdiff+0xde>
 8009454:	0800a713 	.word	0x0800a713
 8009458:	0800a724 	.word	0x0800a724

0800945c <__d2b>:
 800945c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009460:	4689      	mov	r9, r1
 8009462:	2101      	movs	r1, #1
 8009464:	ec57 6b10 	vmov	r6, r7, d0
 8009468:	4690      	mov	r8, r2
 800946a:	f7ff fcd5 	bl	8008e18 <_Balloc>
 800946e:	4604      	mov	r4, r0
 8009470:	b930      	cbnz	r0, 8009480 <__d2b+0x24>
 8009472:	4602      	mov	r2, r0
 8009474:	4b25      	ldr	r3, [pc, #148]	; (800950c <__d2b+0xb0>)
 8009476:	4826      	ldr	r0, [pc, #152]	; (8009510 <__d2b+0xb4>)
 8009478:	f240 310a 	movw	r1, #778	; 0x30a
 800947c:	f000 fa70 	bl	8009960 <__assert_func>
 8009480:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009484:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009488:	bb35      	cbnz	r5, 80094d8 <__d2b+0x7c>
 800948a:	2e00      	cmp	r6, #0
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	d028      	beq.n	80094e2 <__d2b+0x86>
 8009490:	4668      	mov	r0, sp
 8009492:	9600      	str	r6, [sp, #0]
 8009494:	f7ff fd8c 	bl	8008fb0 <__lo0bits>
 8009498:	9900      	ldr	r1, [sp, #0]
 800949a:	b300      	cbz	r0, 80094de <__d2b+0x82>
 800949c:	9a01      	ldr	r2, [sp, #4]
 800949e:	f1c0 0320 	rsb	r3, r0, #32
 80094a2:	fa02 f303 	lsl.w	r3, r2, r3
 80094a6:	430b      	orrs	r3, r1
 80094a8:	40c2      	lsrs	r2, r0
 80094aa:	6163      	str	r3, [r4, #20]
 80094ac:	9201      	str	r2, [sp, #4]
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	61a3      	str	r3, [r4, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bf14      	ite	ne
 80094b6:	2202      	movne	r2, #2
 80094b8:	2201      	moveq	r2, #1
 80094ba:	6122      	str	r2, [r4, #16]
 80094bc:	b1d5      	cbz	r5, 80094f4 <__d2b+0x98>
 80094be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094c2:	4405      	add	r5, r0
 80094c4:	f8c9 5000 	str.w	r5, [r9]
 80094c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094cc:	f8c8 0000 	str.w	r0, [r8]
 80094d0:	4620      	mov	r0, r4
 80094d2:	b003      	add	sp, #12
 80094d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094dc:	e7d5      	b.n	800948a <__d2b+0x2e>
 80094de:	6161      	str	r1, [r4, #20]
 80094e0:	e7e5      	b.n	80094ae <__d2b+0x52>
 80094e2:	a801      	add	r0, sp, #4
 80094e4:	f7ff fd64 	bl	8008fb0 <__lo0bits>
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	6163      	str	r3, [r4, #20]
 80094ec:	2201      	movs	r2, #1
 80094ee:	6122      	str	r2, [r4, #16]
 80094f0:	3020      	adds	r0, #32
 80094f2:	e7e3      	b.n	80094bc <__d2b+0x60>
 80094f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094fc:	f8c9 0000 	str.w	r0, [r9]
 8009500:	6918      	ldr	r0, [r3, #16]
 8009502:	f7ff fd35 	bl	8008f70 <__hi0bits>
 8009506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800950a:	e7df      	b.n	80094cc <__d2b+0x70>
 800950c:	0800a713 	.word	0x0800a713
 8009510:	0800a724 	.word	0x0800a724

08009514 <_calloc_r>:
 8009514:	b513      	push	{r0, r1, r4, lr}
 8009516:	434a      	muls	r2, r1
 8009518:	4611      	mov	r1, r2
 800951a:	9201      	str	r2, [sp, #4]
 800951c:	f000 f85a 	bl	80095d4 <_malloc_r>
 8009520:	4604      	mov	r4, r0
 8009522:	b118      	cbz	r0, 800952c <_calloc_r+0x18>
 8009524:	9a01      	ldr	r2, [sp, #4]
 8009526:	2100      	movs	r1, #0
 8009528:	f7fe f960 	bl	80077ec <memset>
 800952c:	4620      	mov	r0, r4
 800952e:	b002      	add	sp, #8
 8009530:	bd10      	pop	{r4, pc}
	...

08009534 <_free_r>:
 8009534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009536:	2900      	cmp	r1, #0
 8009538:	d048      	beq.n	80095cc <_free_r+0x98>
 800953a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953e:	9001      	str	r0, [sp, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f1a1 0404 	sub.w	r4, r1, #4
 8009546:	bfb8      	it	lt
 8009548:	18e4      	addlt	r4, r4, r3
 800954a:	f000 fa65 	bl	8009a18 <__malloc_lock>
 800954e:	4a20      	ldr	r2, [pc, #128]	; (80095d0 <_free_r+0x9c>)
 8009550:	9801      	ldr	r0, [sp, #4]
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	4615      	mov	r5, r2
 8009556:	b933      	cbnz	r3, 8009566 <_free_r+0x32>
 8009558:	6063      	str	r3, [r4, #4]
 800955a:	6014      	str	r4, [r2, #0]
 800955c:	b003      	add	sp, #12
 800955e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009562:	f000 ba5f 	b.w	8009a24 <__malloc_unlock>
 8009566:	42a3      	cmp	r3, r4
 8009568:	d90b      	bls.n	8009582 <_free_r+0x4e>
 800956a:	6821      	ldr	r1, [r4, #0]
 800956c:	1862      	adds	r2, r4, r1
 800956e:	4293      	cmp	r3, r2
 8009570:	bf04      	itt	eq
 8009572:	681a      	ldreq	r2, [r3, #0]
 8009574:	685b      	ldreq	r3, [r3, #4]
 8009576:	6063      	str	r3, [r4, #4]
 8009578:	bf04      	itt	eq
 800957a:	1852      	addeq	r2, r2, r1
 800957c:	6022      	streq	r2, [r4, #0]
 800957e:	602c      	str	r4, [r5, #0]
 8009580:	e7ec      	b.n	800955c <_free_r+0x28>
 8009582:	461a      	mov	r2, r3
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	b10b      	cbz	r3, 800958c <_free_r+0x58>
 8009588:	42a3      	cmp	r3, r4
 800958a:	d9fa      	bls.n	8009582 <_free_r+0x4e>
 800958c:	6811      	ldr	r1, [r2, #0]
 800958e:	1855      	adds	r5, r2, r1
 8009590:	42a5      	cmp	r5, r4
 8009592:	d10b      	bne.n	80095ac <_free_r+0x78>
 8009594:	6824      	ldr	r4, [r4, #0]
 8009596:	4421      	add	r1, r4
 8009598:	1854      	adds	r4, r2, r1
 800959a:	42a3      	cmp	r3, r4
 800959c:	6011      	str	r1, [r2, #0]
 800959e:	d1dd      	bne.n	800955c <_free_r+0x28>
 80095a0:	681c      	ldr	r4, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	6053      	str	r3, [r2, #4]
 80095a6:	4421      	add	r1, r4
 80095a8:	6011      	str	r1, [r2, #0]
 80095aa:	e7d7      	b.n	800955c <_free_r+0x28>
 80095ac:	d902      	bls.n	80095b4 <_free_r+0x80>
 80095ae:	230c      	movs	r3, #12
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	e7d3      	b.n	800955c <_free_r+0x28>
 80095b4:	6825      	ldr	r5, [r4, #0]
 80095b6:	1961      	adds	r1, r4, r5
 80095b8:	428b      	cmp	r3, r1
 80095ba:	bf04      	itt	eq
 80095bc:	6819      	ldreq	r1, [r3, #0]
 80095be:	685b      	ldreq	r3, [r3, #4]
 80095c0:	6063      	str	r3, [r4, #4]
 80095c2:	bf04      	itt	eq
 80095c4:	1949      	addeq	r1, r1, r5
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	6054      	str	r4, [r2, #4]
 80095ca:	e7c7      	b.n	800955c <_free_r+0x28>
 80095cc:	b003      	add	sp, #12
 80095ce:	bd30      	pop	{r4, r5, pc}
 80095d0:	20001210 	.word	0x20001210

080095d4 <_malloc_r>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	1ccd      	adds	r5, r1, #3
 80095d8:	f025 0503 	bic.w	r5, r5, #3
 80095dc:	3508      	adds	r5, #8
 80095de:	2d0c      	cmp	r5, #12
 80095e0:	bf38      	it	cc
 80095e2:	250c      	movcc	r5, #12
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	4606      	mov	r6, r0
 80095e8:	db01      	blt.n	80095ee <_malloc_r+0x1a>
 80095ea:	42a9      	cmp	r1, r5
 80095ec:	d903      	bls.n	80095f6 <_malloc_r+0x22>
 80095ee:	230c      	movs	r3, #12
 80095f0:	6033      	str	r3, [r6, #0]
 80095f2:	2000      	movs	r0, #0
 80095f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f6:	f000 fa0f 	bl	8009a18 <__malloc_lock>
 80095fa:	4921      	ldr	r1, [pc, #132]	; (8009680 <_malloc_r+0xac>)
 80095fc:	680a      	ldr	r2, [r1, #0]
 80095fe:	4614      	mov	r4, r2
 8009600:	b99c      	cbnz	r4, 800962a <_malloc_r+0x56>
 8009602:	4f20      	ldr	r7, [pc, #128]	; (8009684 <_malloc_r+0xb0>)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	b923      	cbnz	r3, 8009612 <_malloc_r+0x3e>
 8009608:	4621      	mov	r1, r4
 800960a:	4630      	mov	r0, r6
 800960c:	f000 f998 	bl	8009940 <_sbrk_r>
 8009610:	6038      	str	r0, [r7, #0]
 8009612:	4629      	mov	r1, r5
 8009614:	4630      	mov	r0, r6
 8009616:	f000 f993 	bl	8009940 <_sbrk_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d123      	bne.n	8009666 <_malloc_r+0x92>
 800961e:	230c      	movs	r3, #12
 8009620:	6033      	str	r3, [r6, #0]
 8009622:	4630      	mov	r0, r6
 8009624:	f000 f9fe 	bl	8009a24 <__malloc_unlock>
 8009628:	e7e3      	b.n	80095f2 <_malloc_r+0x1e>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	1b5b      	subs	r3, r3, r5
 800962e:	d417      	bmi.n	8009660 <_malloc_r+0x8c>
 8009630:	2b0b      	cmp	r3, #11
 8009632:	d903      	bls.n	800963c <_malloc_r+0x68>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	441c      	add	r4, r3
 8009638:	6025      	str	r5, [r4, #0]
 800963a:	e004      	b.n	8009646 <_malloc_r+0x72>
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	42a2      	cmp	r2, r4
 8009640:	bf0c      	ite	eq
 8009642:	600b      	streq	r3, [r1, #0]
 8009644:	6053      	strne	r3, [r2, #4]
 8009646:	4630      	mov	r0, r6
 8009648:	f000 f9ec 	bl	8009a24 <__malloc_unlock>
 800964c:	f104 000b 	add.w	r0, r4, #11
 8009650:	1d23      	adds	r3, r4, #4
 8009652:	f020 0007 	bic.w	r0, r0, #7
 8009656:	1ac2      	subs	r2, r0, r3
 8009658:	d0cc      	beq.n	80095f4 <_malloc_r+0x20>
 800965a:	1a1b      	subs	r3, r3, r0
 800965c:	50a3      	str	r3, [r4, r2]
 800965e:	e7c9      	b.n	80095f4 <_malloc_r+0x20>
 8009660:	4622      	mov	r2, r4
 8009662:	6864      	ldr	r4, [r4, #4]
 8009664:	e7cc      	b.n	8009600 <_malloc_r+0x2c>
 8009666:	1cc4      	adds	r4, r0, #3
 8009668:	f024 0403 	bic.w	r4, r4, #3
 800966c:	42a0      	cmp	r0, r4
 800966e:	d0e3      	beq.n	8009638 <_malloc_r+0x64>
 8009670:	1a21      	subs	r1, r4, r0
 8009672:	4630      	mov	r0, r6
 8009674:	f000 f964 	bl	8009940 <_sbrk_r>
 8009678:	3001      	adds	r0, #1
 800967a:	d1dd      	bne.n	8009638 <_malloc_r+0x64>
 800967c:	e7cf      	b.n	800961e <_malloc_r+0x4a>
 800967e:	bf00      	nop
 8009680:	20001210 	.word	0x20001210
 8009684:	20001214 	.word	0x20001214

08009688 <__ssputs_r>:
 8009688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	688e      	ldr	r6, [r1, #8]
 800968e:	429e      	cmp	r6, r3
 8009690:	4682      	mov	sl, r0
 8009692:	460c      	mov	r4, r1
 8009694:	4690      	mov	r8, r2
 8009696:	461f      	mov	r7, r3
 8009698:	d838      	bhi.n	800970c <__ssputs_r+0x84>
 800969a:	898a      	ldrh	r2, [r1, #12]
 800969c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096a0:	d032      	beq.n	8009708 <__ssputs_r+0x80>
 80096a2:	6825      	ldr	r5, [r4, #0]
 80096a4:	6909      	ldr	r1, [r1, #16]
 80096a6:	eba5 0901 	sub.w	r9, r5, r1
 80096aa:	6965      	ldr	r5, [r4, #20]
 80096ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096b4:	3301      	adds	r3, #1
 80096b6:	444b      	add	r3, r9
 80096b8:	106d      	asrs	r5, r5, #1
 80096ba:	429d      	cmp	r5, r3
 80096bc:	bf38      	it	cc
 80096be:	461d      	movcc	r5, r3
 80096c0:	0553      	lsls	r3, r2, #21
 80096c2:	d531      	bpl.n	8009728 <__ssputs_r+0xa0>
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7ff ff85 	bl	80095d4 <_malloc_r>
 80096ca:	4606      	mov	r6, r0
 80096cc:	b950      	cbnz	r0, 80096e4 <__ssputs_r+0x5c>
 80096ce:	230c      	movs	r3, #12
 80096d0:	f8ca 3000 	str.w	r3, [sl]
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e4:	6921      	ldr	r1, [r4, #16]
 80096e6:	464a      	mov	r2, r9
 80096e8:	f7fe f872 	bl	80077d0 <memcpy>
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	6126      	str	r6, [r4, #16]
 80096fa:	6165      	str	r5, [r4, #20]
 80096fc:	444e      	add	r6, r9
 80096fe:	eba5 0509 	sub.w	r5, r5, r9
 8009702:	6026      	str	r6, [r4, #0]
 8009704:	60a5      	str	r5, [r4, #8]
 8009706:	463e      	mov	r6, r7
 8009708:	42be      	cmp	r6, r7
 800970a:	d900      	bls.n	800970e <__ssputs_r+0x86>
 800970c:	463e      	mov	r6, r7
 800970e:	4632      	mov	r2, r6
 8009710:	6820      	ldr	r0, [r4, #0]
 8009712:	4641      	mov	r1, r8
 8009714:	f000 f966 	bl	80099e4 <memmove>
 8009718:	68a3      	ldr	r3, [r4, #8]
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	1b9b      	subs	r3, r3, r6
 800971e:	4432      	add	r2, r6
 8009720:	60a3      	str	r3, [r4, #8]
 8009722:	6022      	str	r2, [r4, #0]
 8009724:	2000      	movs	r0, #0
 8009726:	e7db      	b.n	80096e0 <__ssputs_r+0x58>
 8009728:	462a      	mov	r2, r5
 800972a:	f000 f981 	bl	8009a30 <_realloc_r>
 800972e:	4606      	mov	r6, r0
 8009730:	2800      	cmp	r0, #0
 8009732:	d1e1      	bne.n	80096f8 <__ssputs_r+0x70>
 8009734:	6921      	ldr	r1, [r4, #16]
 8009736:	4650      	mov	r0, sl
 8009738:	f7ff fefc 	bl	8009534 <_free_r>
 800973c:	e7c7      	b.n	80096ce <__ssputs_r+0x46>
	...

08009740 <_svfiprintf_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	4698      	mov	r8, r3
 8009746:	898b      	ldrh	r3, [r1, #12]
 8009748:	061b      	lsls	r3, r3, #24
 800974a:	b09d      	sub	sp, #116	; 0x74
 800974c:	4607      	mov	r7, r0
 800974e:	460d      	mov	r5, r1
 8009750:	4614      	mov	r4, r2
 8009752:	d50e      	bpl.n	8009772 <_svfiprintf_r+0x32>
 8009754:	690b      	ldr	r3, [r1, #16]
 8009756:	b963      	cbnz	r3, 8009772 <_svfiprintf_r+0x32>
 8009758:	2140      	movs	r1, #64	; 0x40
 800975a:	f7ff ff3b 	bl	80095d4 <_malloc_r>
 800975e:	6028      	str	r0, [r5, #0]
 8009760:	6128      	str	r0, [r5, #16]
 8009762:	b920      	cbnz	r0, 800976e <_svfiprintf_r+0x2e>
 8009764:	230c      	movs	r3, #12
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	e0d1      	b.n	8009912 <_svfiprintf_r+0x1d2>
 800976e:	2340      	movs	r3, #64	; 0x40
 8009770:	616b      	str	r3, [r5, #20]
 8009772:	2300      	movs	r3, #0
 8009774:	9309      	str	r3, [sp, #36]	; 0x24
 8009776:	2320      	movs	r3, #32
 8009778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800977c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009780:	2330      	movs	r3, #48	; 0x30
 8009782:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800992c <_svfiprintf_r+0x1ec>
 8009786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800978a:	f04f 0901 	mov.w	r9, #1
 800978e:	4623      	mov	r3, r4
 8009790:	469a      	mov	sl, r3
 8009792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009796:	b10a      	cbz	r2, 800979c <_svfiprintf_r+0x5c>
 8009798:	2a25      	cmp	r2, #37	; 0x25
 800979a:	d1f9      	bne.n	8009790 <_svfiprintf_r+0x50>
 800979c:	ebba 0b04 	subs.w	fp, sl, r4
 80097a0:	d00b      	beq.n	80097ba <_svfiprintf_r+0x7a>
 80097a2:	465b      	mov	r3, fp
 80097a4:	4622      	mov	r2, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff ff6d 	bl	8009688 <__ssputs_r>
 80097ae:	3001      	adds	r0, #1
 80097b0:	f000 80aa 	beq.w	8009908 <_svfiprintf_r+0x1c8>
 80097b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097b6:	445a      	add	r2, fp
 80097b8:	9209      	str	r2, [sp, #36]	; 0x24
 80097ba:	f89a 3000 	ldrb.w	r3, [sl]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 80a2 	beq.w	8009908 <_svfiprintf_r+0x1c8>
 80097c4:	2300      	movs	r3, #0
 80097c6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ce:	f10a 0a01 	add.w	sl, sl, #1
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	9307      	str	r3, [sp, #28]
 80097d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097da:	931a      	str	r3, [sp, #104]	; 0x68
 80097dc:	4654      	mov	r4, sl
 80097de:	2205      	movs	r2, #5
 80097e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e4:	4851      	ldr	r0, [pc, #324]	; (800992c <_svfiprintf_r+0x1ec>)
 80097e6:	f7f6 fcfb 	bl	80001e0 <memchr>
 80097ea:	9a04      	ldr	r2, [sp, #16]
 80097ec:	b9d8      	cbnz	r0, 8009826 <_svfiprintf_r+0xe6>
 80097ee:	06d0      	lsls	r0, r2, #27
 80097f0:	bf44      	itt	mi
 80097f2:	2320      	movmi	r3, #32
 80097f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f8:	0711      	lsls	r1, r2, #28
 80097fa:	bf44      	itt	mi
 80097fc:	232b      	movmi	r3, #43	; 0x2b
 80097fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009802:	f89a 3000 	ldrb.w	r3, [sl]
 8009806:	2b2a      	cmp	r3, #42	; 0x2a
 8009808:	d015      	beq.n	8009836 <_svfiprintf_r+0xf6>
 800980a:	9a07      	ldr	r2, [sp, #28]
 800980c:	4654      	mov	r4, sl
 800980e:	2000      	movs	r0, #0
 8009810:	f04f 0c0a 	mov.w	ip, #10
 8009814:	4621      	mov	r1, r4
 8009816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800981a:	3b30      	subs	r3, #48	; 0x30
 800981c:	2b09      	cmp	r3, #9
 800981e:	d94e      	bls.n	80098be <_svfiprintf_r+0x17e>
 8009820:	b1b0      	cbz	r0, 8009850 <_svfiprintf_r+0x110>
 8009822:	9207      	str	r2, [sp, #28]
 8009824:	e014      	b.n	8009850 <_svfiprintf_r+0x110>
 8009826:	eba0 0308 	sub.w	r3, r0, r8
 800982a:	fa09 f303 	lsl.w	r3, r9, r3
 800982e:	4313      	orrs	r3, r2
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	46a2      	mov	sl, r4
 8009834:	e7d2      	b.n	80097dc <_svfiprintf_r+0x9c>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	1d19      	adds	r1, r3, #4
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	9103      	str	r1, [sp, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	bfbb      	ittet	lt
 8009842:	425b      	neglt	r3, r3
 8009844:	f042 0202 	orrlt.w	r2, r2, #2
 8009848:	9307      	strge	r3, [sp, #28]
 800984a:	9307      	strlt	r3, [sp, #28]
 800984c:	bfb8      	it	lt
 800984e:	9204      	strlt	r2, [sp, #16]
 8009850:	7823      	ldrb	r3, [r4, #0]
 8009852:	2b2e      	cmp	r3, #46	; 0x2e
 8009854:	d10c      	bne.n	8009870 <_svfiprintf_r+0x130>
 8009856:	7863      	ldrb	r3, [r4, #1]
 8009858:	2b2a      	cmp	r3, #42	; 0x2a
 800985a:	d135      	bne.n	80098c8 <_svfiprintf_r+0x188>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	1d1a      	adds	r2, r3, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	9203      	str	r2, [sp, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	bfb8      	it	lt
 8009868:	f04f 33ff 	movlt.w	r3, #4294967295
 800986c:	3402      	adds	r4, #2
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800993c <_svfiprintf_r+0x1fc>
 8009874:	7821      	ldrb	r1, [r4, #0]
 8009876:	2203      	movs	r2, #3
 8009878:	4650      	mov	r0, sl
 800987a:	f7f6 fcb1 	bl	80001e0 <memchr>
 800987e:	b140      	cbz	r0, 8009892 <_svfiprintf_r+0x152>
 8009880:	2340      	movs	r3, #64	; 0x40
 8009882:	eba0 000a 	sub.w	r0, r0, sl
 8009886:	fa03 f000 	lsl.w	r0, r3, r0
 800988a:	9b04      	ldr	r3, [sp, #16]
 800988c:	4303      	orrs	r3, r0
 800988e:	3401      	adds	r4, #1
 8009890:	9304      	str	r3, [sp, #16]
 8009892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009896:	4826      	ldr	r0, [pc, #152]	; (8009930 <_svfiprintf_r+0x1f0>)
 8009898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800989c:	2206      	movs	r2, #6
 800989e:	f7f6 fc9f 	bl	80001e0 <memchr>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d038      	beq.n	8009918 <_svfiprintf_r+0x1d8>
 80098a6:	4b23      	ldr	r3, [pc, #140]	; (8009934 <_svfiprintf_r+0x1f4>)
 80098a8:	bb1b      	cbnz	r3, 80098f2 <_svfiprintf_r+0x1b2>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	3307      	adds	r3, #7
 80098ae:	f023 0307 	bic.w	r3, r3, #7
 80098b2:	3308      	adds	r3, #8
 80098b4:	9303      	str	r3, [sp, #12]
 80098b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b8:	4433      	add	r3, r6
 80098ba:	9309      	str	r3, [sp, #36]	; 0x24
 80098bc:	e767      	b.n	800978e <_svfiprintf_r+0x4e>
 80098be:	fb0c 3202 	mla	r2, ip, r2, r3
 80098c2:	460c      	mov	r4, r1
 80098c4:	2001      	movs	r0, #1
 80098c6:	e7a5      	b.n	8009814 <_svfiprintf_r+0xd4>
 80098c8:	2300      	movs	r3, #0
 80098ca:	3401      	adds	r4, #1
 80098cc:	9305      	str	r3, [sp, #20]
 80098ce:	4619      	mov	r1, r3
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4620      	mov	r0, r4
 80098d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098da:	3a30      	subs	r2, #48	; 0x30
 80098dc:	2a09      	cmp	r2, #9
 80098de:	d903      	bls.n	80098e8 <_svfiprintf_r+0x1a8>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0c5      	beq.n	8009870 <_svfiprintf_r+0x130>
 80098e4:	9105      	str	r1, [sp, #20]
 80098e6:	e7c3      	b.n	8009870 <_svfiprintf_r+0x130>
 80098e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ec:	4604      	mov	r4, r0
 80098ee:	2301      	movs	r3, #1
 80098f0:	e7f0      	b.n	80098d4 <_svfiprintf_r+0x194>
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	462a      	mov	r2, r5
 80098f8:	4b0f      	ldr	r3, [pc, #60]	; (8009938 <_svfiprintf_r+0x1f8>)
 80098fa:	a904      	add	r1, sp, #16
 80098fc:	4638      	mov	r0, r7
 80098fe:	f7fe f81d 	bl	800793c <_printf_float>
 8009902:	1c42      	adds	r2, r0, #1
 8009904:	4606      	mov	r6, r0
 8009906:	d1d6      	bne.n	80098b6 <_svfiprintf_r+0x176>
 8009908:	89ab      	ldrh	r3, [r5, #12]
 800990a:	065b      	lsls	r3, r3, #25
 800990c:	f53f af2c 	bmi.w	8009768 <_svfiprintf_r+0x28>
 8009910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009912:	b01d      	add	sp, #116	; 0x74
 8009914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009918:	ab03      	add	r3, sp, #12
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	462a      	mov	r2, r5
 800991e:	4b06      	ldr	r3, [pc, #24]	; (8009938 <_svfiprintf_r+0x1f8>)
 8009920:	a904      	add	r1, sp, #16
 8009922:	4638      	mov	r0, r7
 8009924:	f7fe faae 	bl	8007e84 <_printf_i>
 8009928:	e7eb      	b.n	8009902 <_svfiprintf_r+0x1c2>
 800992a:	bf00      	nop
 800992c:	0800a884 	.word	0x0800a884
 8009930:	0800a88e 	.word	0x0800a88e
 8009934:	0800793d 	.word	0x0800793d
 8009938:	08009689 	.word	0x08009689
 800993c:	0800a88a 	.word	0x0800a88a

08009940 <_sbrk_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d06      	ldr	r5, [pc, #24]	; (800995c <_sbrk_r+0x1c>)
 8009944:	2300      	movs	r3, #0
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	f7f8 fdac 	bl	80024a8 <_sbrk>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_sbrk_r+0x1a>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_sbrk_r+0x1a>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	20001848 	.word	0x20001848

08009960 <__assert_func>:
 8009960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009962:	4614      	mov	r4, r2
 8009964:	461a      	mov	r2, r3
 8009966:	4b09      	ldr	r3, [pc, #36]	; (800998c <__assert_func+0x2c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4605      	mov	r5, r0
 800996c:	68d8      	ldr	r0, [r3, #12]
 800996e:	b14c      	cbz	r4, 8009984 <__assert_func+0x24>
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <__assert_func+0x30>)
 8009972:	9100      	str	r1, [sp, #0]
 8009974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009978:	4906      	ldr	r1, [pc, #24]	; (8009994 <__assert_func+0x34>)
 800997a:	462b      	mov	r3, r5
 800997c:	f000 f80e 	bl	800999c <fiprintf>
 8009980:	f000 faa4 	bl	8009ecc <abort>
 8009984:	4b04      	ldr	r3, [pc, #16]	; (8009998 <__assert_func+0x38>)
 8009986:	461c      	mov	r4, r3
 8009988:	e7f3      	b.n	8009972 <__assert_func+0x12>
 800998a:	bf00      	nop
 800998c:	20000090 	.word	0x20000090
 8009990:	0800a895 	.word	0x0800a895
 8009994:	0800a8a2 	.word	0x0800a8a2
 8009998:	0800a8d0 	.word	0x0800a8d0

0800999c <fiprintf>:
 800999c:	b40e      	push	{r1, r2, r3}
 800999e:	b503      	push	{r0, r1, lr}
 80099a0:	4601      	mov	r1, r0
 80099a2:	ab03      	add	r3, sp, #12
 80099a4:	4805      	ldr	r0, [pc, #20]	; (80099bc <fiprintf+0x20>)
 80099a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	f000 f88f 	bl	8009ad0 <_vfiprintf_r>
 80099b2:	b002      	add	sp, #8
 80099b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b8:	b003      	add	sp, #12
 80099ba:	4770      	bx	lr
 80099bc:	20000090 	.word	0x20000090

080099c0 <__ascii_mbtowc>:
 80099c0:	b082      	sub	sp, #8
 80099c2:	b901      	cbnz	r1, 80099c6 <__ascii_mbtowc+0x6>
 80099c4:	a901      	add	r1, sp, #4
 80099c6:	b142      	cbz	r2, 80099da <__ascii_mbtowc+0x1a>
 80099c8:	b14b      	cbz	r3, 80099de <__ascii_mbtowc+0x1e>
 80099ca:	7813      	ldrb	r3, [r2, #0]
 80099cc:	600b      	str	r3, [r1, #0]
 80099ce:	7812      	ldrb	r2, [r2, #0]
 80099d0:	1e10      	subs	r0, r2, #0
 80099d2:	bf18      	it	ne
 80099d4:	2001      	movne	r0, #1
 80099d6:	b002      	add	sp, #8
 80099d8:	4770      	bx	lr
 80099da:	4610      	mov	r0, r2
 80099dc:	e7fb      	b.n	80099d6 <__ascii_mbtowc+0x16>
 80099de:	f06f 0001 	mvn.w	r0, #1
 80099e2:	e7f8      	b.n	80099d6 <__ascii_mbtowc+0x16>

080099e4 <memmove>:
 80099e4:	4288      	cmp	r0, r1
 80099e6:	b510      	push	{r4, lr}
 80099e8:	eb01 0402 	add.w	r4, r1, r2
 80099ec:	d902      	bls.n	80099f4 <memmove+0x10>
 80099ee:	4284      	cmp	r4, r0
 80099f0:	4623      	mov	r3, r4
 80099f2:	d807      	bhi.n	8009a04 <memmove+0x20>
 80099f4:	1e43      	subs	r3, r0, #1
 80099f6:	42a1      	cmp	r1, r4
 80099f8:	d008      	beq.n	8009a0c <memmove+0x28>
 80099fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a02:	e7f8      	b.n	80099f6 <memmove+0x12>
 8009a04:	4402      	add	r2, r0
 8009a06:	4601      	mov	r1, r0
 8009a08:	428a      	cmp	r2, r1
 8009a0a:	d100      	bne.n	8009a0e <memmove+0x2a>
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a16:	e7f7      	b.n	8009a08 <memmove+0x24>

08009a18 <__malloc_lock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__malloc_lock+0x8>)
 8009a1a:	f000 bc17 	b.w	800a24c <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20001850 	.word	0x20001850

08009a24 <__malloc_unlock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__malloc_unlock+0x8>)
 8009a26:	f000 bc12 	b.w	800a24e <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20001850 	.word	0x20001850

08009a30 <_realloc_r>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	4607      	mov	r7, r0
 8009a34:	4614      	mov	r4, r2
 8009a36:	460e      	mov	r6, r1
 8009a38:	b921      	cbnz	r1, 8009a44 <_realloc_r+0x14>
 8009a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a3e:	4611      	mov	r1, r2
 8009a40:	f7ff bdc8 	b.w	80095d4 <_malloc_r>
 8009a44:	b922      	cbnz	r2, 8009a50 <_realloc_r+0x20>
 8009a46:	f7ff fd75 	bl	8009534 <_free_r>
 8009a4a:	4625      	mov	r5, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	f000 fc62 	bl	800a318 <_malloc_usable_size_r>
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d20f      	bcs.n	8009a78 <_realloc_r+0x48>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7ff fdba 	bl	80095d4 <_malloc_r>
 8009a60:	4605      	mov	r5, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0f2      	beq.n	8009a4c <_realloc_r+0x1c>
 8009a66:	4631      	mov	r1, r6
 8009a68:	4622      	mov	r2, r4
 8009a6a:	f7fd feb1 	bl	80077d0 <memcpy>
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4638      	mov	r0, r7
 8009a72:	f7ff fd5f 	bl	8009534 <_free_r>
 8009a76:	e7e9      	b.n	8009a4c <_realloc_r+0x1c>
 8009a78:	4635      	mov	r5, r6
 8009a7a:	e7e7      	b.n	8009a4c <_realloc_r+0x1c>

08009a7c <__sfputc_r>:
 8009a7c:	6893      	ldr	r3, [r2, #8]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	b410      	push	{r4}
 8009a84:	6093      	str	r3, [r2, #8]
 8009a86:	da08      	bge.n	8009a9a <__sfputc_r+0x1e>
 8009a88:	6994      	ldr	r4, [r2, #24]
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	db01      	blt.n	8009a92 <__sfputc_r+0x16>
 8009a8e:	290a      	cmp	r1, #10
 8009a90:	d103      	bne.n	8009a9a <__sfputc_r+0x1e>
 8009a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a96:	f000 b94b 	b.w	8009d30 <__swbuf_r>
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	1c58      	adds	r0, r3, #1
 8009a9e:	6010      	str	r0, [r2, #0]
 8009aa0:	7019      	strb	r1, [r3, #0]
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <__sfputs_r>:
 8009aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aac:	4606      	mov	r6, r0
 8009aae:	460f      	mov	r7, r1
 8009ab0:	4614      	mov	r4, r2
 8009ab2:	18d5      	adds	r5, r2, r3
 8009ab4:	42ac      	cmp	r4, r5
 8009ab6:	d101      	bne.n	8009abc <__sfputs_r+0x12>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	e007      	b.n	8009acc <__sfputs_r+0x22>
 8009abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac0:	463a      	mov	r2, r7
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ffda 	bl	8009a7c <__sfputc_r>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d1f3      	bne.n	8009ab4 <__sfputs_r+0xa>
 8009acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ad0 <_vfiprintf_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	460d      	mov	r5, r1
 8009ad6:	b09d      	sub	sp, #116	; 0x74
 8009ad8:	4614      	mov	r4, r2
 8009ada:	4698      	mov	r8, r3
 8009adc:	4606      	mov	r6, r0
 8009ade:	b118      	cbz	r0, 8009ae8 <_vfiprintf_r+0x18>
 8009ae0:	6983      	ldr	r3, [r0, #24]
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <_vfiprintf_r+0x18>
 8009ae4:	f000 fb14 	bl	800a110 <__sinit>
 8009ae8:	4b89      	ldr	r3, [pc, #548]	; (8009d10 <_vfiprintf_r+0x240>)
 8009aea:	429d      	cmp	r5, r3
 8009aec:	d11b      	bne.n	8009b26 <_vfiprintf_r+0x56>
 8009aee:	6875      	ldr	r5, [r6, #4]
 8009af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af2:	07d9      	lsls	r1, r3, #31
 8009af4:	d405      	bmi.n	8009b02 <_vfiprintf_r+0x32>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	059a      	lsls	r2, r3, #22
 8009afa:	d402      	bmi.n	8009b02 <_vfiprintf_r+0x32>
 8009afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009afe:	f000 fba5 	bl	800a24c <__retarget_lock_acquire_recursive>
 8009b02:	89ab      	ldrh	r3, [r5, #12]
 8009b04:	071b      	lsls	r3, r3, #28
 8009b06:	d501      	bpl.n	8009b0c <_vfiprintf_r+0x3c>
 8009b08:	692b      	ldr	r3, [r5, #16]
 8009b0a:	b9eb      	cbnz	r3, 8009b48 <_vfiprintf_r+0x78>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f000 f96e 	bl	8009df0 <__swsetup_r>
 8009b14:	b1c0      	cbz	r0, 8009b48 <_vfiprintf_r+0x78>
 8009b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b18:	07dc      	lsls	r4, r3, #31
 8009b1a:	d50e      	bpl.n	8009b3a <_vfiprintf_r+0x6a>
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	b01d      	add	sp, #116	; 0x74
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b26:	4b7b      	ldr	r3, [pc, #492]	; (8009d14 <_vfiprintf_r+0x244>)
 8009b28:	429d      	cmp	r5, r3
 8009b2a:	d101      	bne.n	8009b30 <_vfiprintf_r+0x60>
 8009b2c:	68b5      	ldr	r5, [r6, #8]
 8009b2e:	e7df      	b.n	8009af0 <_vfiprintf_r+0x20>
 8009b30:	4b79      	ldr	r3, [pc, #484]	; (8009d18 <_vfiprintf_r+0x248>)
 8009b32:	429d      	cmp	r5, r3
 8009b34:	bf08      	it	eq
 8009b36:	68f5      	ldreq	r5, [r6, #12]
 8009b38:	e7da      	b.n	8009af0 <_vfiprintf_r+0x20>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	0598      	lsls	r0, r3, #22
 8009b3e:	d4ed      	bmi.n	8009b1c <_vfiprintf_r+0x4c>
 8009b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b42:	f000 fb84 	bl	800a24e <__retarget_lock_release_recursive>
 8009b46:	e7e9      	b.n	8009b1c <_vfiprintf_r+0x4c>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b56:	2330      	movs	r3, #48	; 0x30
 8009b58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d1c <_vfiprintf_r+0x24c>
 8009b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b60:	f04f 0901 	mov.w	r9, #1
 8009b64:	4623      	mov	r3, r4
 8009b66:	469a      	mov	sl, r3
 8009b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6c:	b10a      	cbz	r2, 8009b72 <_vfiprintf_r+0xa2>
 8009b6e:	2a25      	cmp	r2, #37	; 0x25
 8009b70:	d1f9      	bne.n	8009b66 <_vfiprintf_r+0x96>
 8009b72:	ebba 0b04 	subs.w	fp, sl, r4
 8009b76:	d00b      	beq.n	8009b90 <_vfiprintf_r+0xc0>
 8009b78:	465b      	mov	r3, fp
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f7ff ff93 	bl	8009aaa <__sfputs_r>
 8009b84:	3001      	adds	r0, #1
 8009b86:	f000 80aa 	beq.w	8009cde <_vfiprintf_r+0x20e>
 8009b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8c:	445a      	add	r2, fp
 8009b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b90:	f89a 3000 	ldrb.w	r3, [sl]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80a2 	beq.w	8009cde <_vfiprintf_r+0x20e>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba4:	f10a 0a01 	add.w	sl, sl, #1
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb2:	4654      	mov	r4, sl
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bba:	4858      	ldr	r0, [pc, #352]	; (8009d1c <_vfiprintf_r+0x24c>)
 8009bbc:	f7f6 fb10 	bl	80001e0 <memchr>
 8009bc0:	9a04      	ldr	r2, [sp, #16]
 8009bc2:	b9d8      	cbnz	r0, 8009bfc <_vfiprintf_r+0x12c>
 8009bc4:	06d1      	lsls	r1, r2, #27
 8009bc6:	bf44      	itt	mi
 8009bc8:	2320      	movmi	r3, #32
 8009bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bce:	0713      	lsls	r3, r2, #28
 8009bd0:	bf44      	itt	mi
 8009bd2:	232b      	movmi	r3, #43	; 0x2b
 8009bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bde:	d015      	beq.n	8009c0c <_vfiprintf_r+0x13c>
 8009be0:	9a07      	ldr	r2, [sp, #28]
 8009be2:	4654      	mov	r4, sl
 8009be4:	2000      	movs	r0, #0
 8009be6:	f04f 0c0a 	mov.w	ip, #10
 8009bea:	4621      	mov	r1, r4
 8009bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf0:	3b30      	subs	r3, #48	; 0x30
 8009bf2:	2b09      	cmp	r3, #9
 8009bf4:	d94e      	bls.n	8009c94 <_vfiprintf_r+0x1c4>
 8009bf6:	b1b0      	cbz	r0, 8009c26 <_vfiprintf_r+0x156>
 8009bf8:	9207      	str	r2, [sp, #28]
 8009bfa:	e014      	b.n	8009c26 <_vfiprintf_r+0x156>
 8009bfc:	eba0 0308 	sub.w	r3, r0, r8
 8009c00:	fa09 f303 	lsl.w	r3, r9, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	46a2      	mov	sl, r4
 8009c0a:	e7d2      	b.n	8009bb2 <_vfiprintf_r+0xe2>
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	1d19      	adds	r1, r3, #4
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	9103      	str	r1, [sp, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bfbb      	ittet	lt
 8009c18:	425b      	neglt	r3, r3
 8009c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1e:	9307      	strge	r3, [sp, #28]
 8009c20:	9307      	strlt	r3, [sp, #28]
 8009c22:	bfb8      	it	lt
 8009c24:	9204      	strlt	r2, [sp, #16]
 8009c26:	7823      	ldrb	r3, [r4, #0]
 8009c28:	2b2e      	cmp	r3, #46	; 0x2e
 8009c2a:	d10c      	bne.n	8009c46 <_vfiprintf_r+0x176>
 8009c2c:	7863      	ldrb	r3, [r4, #1]
 8009c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c30:	d135      	bne.n	8009c9e <_vfiprintf_r+0x1ce>
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	1d1a      	adds	r2, r3, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	9203      	str	r2, [sp, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bfb8      	it	lt
 8009c3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c42:	3402      	adds	r4, #2
 8009c44:	9305      	str	r3, [sp, #20]
 8009c46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d2c <_vfiprintf_r+0x25c>
 8009c4a:	7821      	ldrb	r1, [r4, #0]
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	4650      	mov	r0, sl
 8009c50:	f7f6 fac6 	bl	80001e0 <memchr>
 8009c54:	b140      	cbz	r0, 8009c68 <_vfiprintf_r+0x198>
 8009c56:	2340      	movs	r3, #64	; 0x40
 8009c58:	eba0 000a 	sub.w	r0, r0, sl
 8009c5c:	fa03 f000 	lsl.w	r0, r3, r0
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	4303      	orrs	r3, r0
 8009c64:	3401      	adds	r4, #1
 8009c66:	9304      	str	r3, [sp, #16]
 8009c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6c:	482c      	ldr	r0, [pc, #176]	; (8009d20 <_vfiprintf_r+0x250>)
 8009c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c72:	2206      	movs	r2, #6
 8009c74:	f7f6 fab4 	bl	80001e0 <memchr>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d03f      	beq.n	8009cfc <_vfiprintf_r+0x22c>
 8009c7c:	4b29      	ldr	r3, [pc, #164]	; (8009d24 <_vfiprintf_r+0x254>)
 8009c7e:	bb1b      	cbnz	r3, 8009cc8 <_vfiprintf_r+0x1f8>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	3307      	adds	r3, #7
 8009c84:	f023 0307 	bic.w	r3, r3, #7
 8009c88:	3308      	adds	r3, #8
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8e:	443b      	add	r3, r7
 8009c90:	9309      	str	r3, [sp, #36]	; 0x24
 8009c92:	e767      	b.n	8009b64 <_vfiprintf_r+0x94>
 8009c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c98:	460c      	mov	r4, r1
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	e7a5      	b.n	8009bea <_vfiprintf_r+0x11a>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	3401      	adds	r4, #1
 8009ca2:	9305      	str	r3, [sp, #20]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f04f 0c0a 	mov.w	ip, #10
 8009caa:	4620      	mov	r0, r4
 8009cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb0:	3a30      	subs	r2, #48	; 0x30
 8009cb2:	2a09      	cmp	r2, #9
 8009cb4:	d903      	bls.n	8009cbe <_vfiprintf_r+0x1ee>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0c5      	beq.n	8009c46 <_vfiprintf_r+0x176>
 8009cba:	9105      	str	r1, [sp, #20]
 8009cbc:	e7c3      	b.n	8009c46 <_vfiprintf_r+0x176>
 8009cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e7f0      	b.n	8009caa <_vfiprintf_r+0x1da>
 8009cc8:	ab03      	add	r3, sp, #12
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	462a      	mov	r2, r5
 8009cce:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <_vfiprintf_r+0x258>)
 8009cd0:	a904      	add	r1, sp, #16
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7fd fe32 	bl	800793c <_printf_float>
 8009cd8:	4607      	mov	r7, r0
 8009cda:	1c78      	adds	r0, r7, #1
 8009cdc:	d1d6      	bne.n	8009c8c <_vfiprintf_r+0x1bc>
 8009cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce0:	07d9      	lsls	r1, r3, #31
 8009ce2:	d405      	bmi.n	8009cf0 <_vfiprintf_r+0x220>
 8009ce4:	89ab      	ldrh	r3, [r5, #12]
 8009ce6:	059a      	lsls	r2, r3, #22
 8009ce8:	d402      	bmi.n	8009cf0 <_vfiprintf_r+0x220>
 8009cea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cec:	f000 faaf 	bl	800a24e <__retarget_lock_release_recursive>
 8009cf0:	89ab      	ldrh	r3, [r5, #12]
 8009cf2:	065b      	lsls	r3, r3, #25
 8009cf4:	f53f af12 	bmi.w	8009b1c <_vfiprintf_r+0x4c>
 8009cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cfa:	e711      	b.n	8009b20 <_vfiprintf_r+0x50>
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	462a      	mov	r2, r5
 8009d02:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <_vfiprintf_r+0x258>)
 8009d04:	a904      	add	r1, sp, #16
 8009d06:	4630      	mov	r0, r6
 8009d08:	f7fe f8bc 	bl	8007e84 <_printf_i>
 8009d0c:	e7e4      	b.n	8009cd8 <_vfiprintf_r+0x208>
 8009d0e:	bf00      	nop
 8009d10:	0800a9fc 	.word	0x0800a9fc
 8009d14:	0800aa1c 	.word	0x0800aa1c
 8009d18:	0800a9dc 	.word	0x0800a9dc
 8009d1c:	0800a884 	.word	0x0800a884
 8009d20:	0800a88e 	.word	0x0800a88e
 8009d24:	0800793d 	.word	0x0800793d
 8009d28:	08009aab 	.word	0x08009aab
 8009d2c:	0800a88a 	.word	0x0800a88a

08009d30 <__swbuf_r>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	460e      	mov	r6, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	4605      	mov	r5, r0
 8009d38:	b118      	cbz	r0, 8009d42 <__swbuf_r+0x12>
 8009d3a:	6983      	ldr	r3, [r0, #24]
 8009d3c:	b90b      	cbnz	r3, 8009d42 <__swbuf_r+0x12>
 8009d3e:	f000 f9e7 	bl	800a110 <__sinit>
 8009d42:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <__swbuf_r+0x98>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d12b      	bne.n	8009da0 <__swbuf_r+0x70>
 8009d48:	686c      	ldr	r4, [r5, #4]
 8009d4a:	69a3      	ldr	r3, [r4, #24]
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	071a      	lsls	r2, r3, #28
 8009d52:	d52f      	bpl.n	8009db4 <__swbuf_r+0x84>
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	b36b      	cbz	r3, 8009db4 <__swbuf_r+0x84>
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	6820      	ldr	r0, [r4, #0]
 8009d5c:	1ac0      	subs	r0, r0, r3
 8009d5e:	6963      	ldr	r3, [r4, #20]
 8009d60:	b2f6      	uxtb	r6, r6
 8009d62:	4283      	cmp	r3, r0
 8009d64:	4637      	mov	r7, r6
 8009d66:	dc04      	bgt.n	8009d72 <__swbuf_r+0x42>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 f93c 	bl	8009fe8 <_fflush_r>
 8009d70:	bb30      	cbnz	r0, 8009dc0 <__swbuf_r+0x90>
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	60a3      	str	r3, [r4, #8]
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	6022      	str	r2, [r4, #0]
 8009d7e:	701e      	strb	r6, [r3, #0]
 8009d80:	6963      	ldr	r3, [r4, #20]
 8009d82:	3001      	adds	r0, #1
 8009d84:	4283      	cmp	r3, r0
 8009d86:	d004      	beq.n	8009d92 <__swbuf_r+0x62>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	07db      	lsls	r3, r3, #31
 8009d8c:	d506      	bpl.n	8009d9c <__swbuf_r+0x6c>
 8009d8e:	2e0a      	cmp	r6, #10
 8009d90:	d104      	bne.n	8009d9c <__swbuf_r+0x6c>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4628      	mov	r0, r5
 8009d96:	f000 f927 	bl	8009fe8 <_fflush_r>
 8009d9a:	b988      	cbnz	r0, 8009dc0 <__swbuf_r+0x90>
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <__swbuf_r+0x9c>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	d101      	bne.n	8009daa <__swbuf_r+0x7a>
 8009da6:	68ac      	ldr	r4, [r5, #8]
 8009da8:	e7cf      	b.n	8009d4a <__swbuf_r+0x1a>
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <__swbuf_r+0xa0>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	bf08      	it	eq
 8009db0:	68ec      	ldreq	r4, [r5, #12]
 8009db2:	e7ca      	b.n	8009d4a <__swbuf_r+0x1a>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f81a 	bl	8009df0 <__swsetup_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d0cb      	beq.n	8009d58 <__swbuf_r+0x28>
 8009dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8009dc4:	e7ea      	b.n	8009d9c <__swbuf_r+0x6c>
 8009dc6:	bf00      	nop
 8009dc8:	0800a9fc 	.word	0x0800a9fc
 8009dcc:	0800aa1c 	.word	0x0800aa1c
 8009dd0:	0800a9dc 	.word	0x0800a9dc

08009dd4 <__ascii_wctomb>:
 8009dd4:	b149      	cbz	r1, 8009dea <__ascii_wctomb+0x16>
 8009dd6:	2aff      	cmp	r2, #255	; 0xff
 8009dd8:	bf85      	ittet	hi
 8009dda:	238a      	movhi	r3, #138	; 0x8a
 8009ddc:	6003      	strhi	r3, [r0, #0]
 8009dde:	700a      	strbls	r2, [r1, #0]
 8009de0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009de4:	bf98      	it	ls
 8009de6:	2001      	movls	r0, #1
 8009de8:	4770      	bx	lr
 8009dea:	4608      	mov	r0, r1
 8009dec:	4770      	bx	lr
	...

08009df0 <__swsetup_r>:
 8009df0:	4b32      	ldr	r3, [pc, #200]	; (8009ebc <__swsetup_r+0xcc>)
 8009df2:	b570      	push	{r4, r5, r6, lr}
 8009df4:	681d      	ldr	r5, [r3, #0]
 8009df6:	4606      	mov	r6, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	b125      	cbz	r5, 8009e06 <__swsetup_r+0x16>
 8009dfc:	69ab      	ldr	r3, [r5, #24]
 8009dfe:	b913      	cbnz	r3, 8009e06 <__swsetup_r+0x16>
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 f985 	bl	800a110 <__sinit>
 8009e06:	4b2e      	ldr	r3, [pc, #184]	; (8009ec0 <__swsetup_r+0xd0>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	d10f      	bne.n	8009e2c <__swsetup_r+0x3c>
 8009e0c:	686c      	ldr	r4, [r5, #4]
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e14:	0719      	lsls	r1, r3, #28
 8009e16:	d42c      	bmi.n	8009e72 <__swsetup_r+0x82>
 8009e18:	06dd      	lsls	r5, r3, #27
 8009e1a:	d411      	bmi.n	8009e40 <__swsetup_r+0x50>
 8009e1c:	2309      	movs	r3, #9
 8009e1e:	6033      	str	r3, [r6, #0]
 8009e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2a:	e03e      	b.n	8009eaa <__swsetup_r+0xba>
 8009e2c:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <__swsetup_r+0xd4>)
 8009e2e:	429c      	cmp	r4, r3
 8009e30:	d101      	bne.n	8009e36 <__swsetup_r+0x46>
 8009e32:	68ac      	ldr	r4, [r5, #8]
 8009e34:	e7eb      	b.n	8009e0e <__swsetup_r+0x1e>
 8009e36:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <__swsetup_r+0xd8>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	bf08      	it	eq
 8009e3c:	68ec      	ldreq	r4, [r5, #12]
 8009e3e:	e7e6      	b.n	8009e0e <__swsetup_r+0x1e>
 8009e40:	0758      	lsls	r0, r3, #29
 8009e42:	d512      	bpl.n	8009e6a <__swsetup_r+0x7a>
 8009e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e46:	b141      	cbz	r1, 8009e5a <__swsetup_r+0x6a>
 8009e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	d002      	beq.n	8009e56 <__swsetup_r+0x66>
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7ff fb6f 	bl	8009534 <_free_r>
 8009e56:	2300      	movs	r3, #0
 8009e58:	6363      	str	r3, [r4, #52]	; 0x34
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e60:	81a3      	strh	r3, [r4, #12]
 8009e62:	2300      	movs	r3, #0
 8009e64:	6063      	str	r3, [r4, #4]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	f043 0308 	orr.w	r3, r3, #8
 8009e70:	81a3      	strh	r3, [r4, #12]
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	b94b      	cbnz	r3, 8009e8a <__swsetup_r+0x9a>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e80:	d003      	beq.n	8009e8a <__swsetup_r+0x9a>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4630      	mov	r0, r6
 8009e86:	f000 fa07 	bl	800a298 <__smakebuf_r>
 8009e8a:	89a0      	ldrh	r0, [r4, #12]
 8009e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e90:	f010 0301 	ands.w	r3, r0, #1
 8009e94:	d00a      	beq.n	8009eac <__swsetup_r+0xbc>
 8009e96:	2300      	movs	r3, #0
 8009e98:	60a3      	str	r3, [r4, #8]
 8009e9a:	6963      	ldr	r3, [r4, #20]
 8009e9c:	425b      	negs	r3, r3
 8009e9e:	61a3      	str	r3, [r4, #24]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	b943      	cbnz	r3, 8009eb6 <__swsetup_r+0xc6>
 8009ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ea8:	d1ba      	bne.n	8009e20 <__swsetup_r+0x30>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	0781      	lsls	r1, r0, #30
 8009eae:	bf58      	it	pl
 8009eb0:	6963      	ldrpl	r3, [r4, #20]
 8009eb2:	60a3      	str	r3, [r4, #8]
 8009eb4:	e7f4      	b.n	8009ea0 <__swsetup_r+0xb0>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e7f7      	b.n	8009eaa <__swsetup_r+0xba>
 8009eba:	bf00      	nop
 8009ebc:	20000090 	.word	0x20000090
 8009ec0:	0800a9fc 	.word	0x0800a9fc
 8009ec4:	0800aa1c 	.word	0x0800aa1c
 8009ec8:	0800a9dc 	.word	0x0800a9dc

08009ecc <abort>:
 8009ecc:	b508      	push	{r3, lr}
 8009ece:	2006      	movs	r0, #6
 8009ed0:	f000 fa52 	bl	800a378 <raise>
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	f7f8 fa6f 	bl	80023b8 <_exit>
	...

08009edc <__sflush_r>:
 8009edc:	898a      	ldrh	r2, [r1, #12]
 8009ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	0710      	lsls	r0, r2, #28
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	d458      	bmi.n	8009f9c <__sflush_r+0xc0>
 8009eea:	684b      	ldr	r3, [r1, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dc05      	bgt.n	8009efc <__sflush_r+0x20>
 8009ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	dc02      	bgt.n	8009efc <__sflush_r+0x20>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d0f9      	beq.n	8009ef6 <__sflush_r+0x1a>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f08:	682f      	ldr	r7, [r5, #0]
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	d032      	beq.n	8009f74 <__sflush_r+0x98>
 8009f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	075a      	lsls	r2, r3, #29
 8009f14:	d505      	bpl.n	8009f22 <__sflush_r+0x46>
 8009f16:	6863      	ldr	r3, [r4, #4]
 8009f18:	1ac0      	subs	r0, r0, r3
 8009f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f1c:	b10b      	cbz	r3, 8009f22 <__sflush_r+0x46>
 8009f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f20:	1ac0      	subs	r0, r0, r3
 8009f22:	2300      	movs	r3, #0
 8009f24:	4602      	mov	r2, r0
 8009f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f28:	6a21      	ldr	r1, [r4, #32]
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b0      	blx	r6
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	d106      	bne.n	8009f42 <__sflush_r+0x66>
 8009f34:	6829      	ldr	r1, [r5, #0]
 8009f36:	291d      	cmp	r1, #29
 8009f38:	d82c      	bhi.n	8009f94 <__sflush_r+0xb8>
 8009f3a:	4a2a      	ldr	r2, [pc, #168]	; (8009fe4 <__sflush_r+0x108>)
 8009f3c:	40ca      	lsrs	r2, r1
 8009f3e:	07d6      	lsls	r6, r2, #31
 8009f40:	d528      	bpl.n	8009f94 <__sflush_r+0xb8>
 8009f42:	2200      	movs	r2, #0
 8009f44:	6062      	str	r2, [r4, #4]
 8009f46:	04d9      	lsls	r1, r3, #19
 8009f48:	6922      	ldr	r2, [r4, #16]
 8009f4a:	6022      	str	r2, [r4, #0]
 8009f4c:	d504      	bpl.n	8009f58 <__sflush_r+0x7c>
 8009f4e:	1c42      	adds	r2, r0, #1
 8009f50:	d101      	bne.n	8009f56 <__sflush_r+0x7a>
 8009f52:	682b      	ldr	r3, [r5, #0]
 8009f54:	b903      	cbnz	r3, 8009f58 <__sflush_r+0x7c>
 8009f56:	6560      	str	r0, [r4, #84]	; 0x54
 8009f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f5a:	602f      	str	r7, [r5, #0]
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	d0ca      	beq.n	8009ef6 <__sflush_r+0x1a>
 8009f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f64:	4299      	cmp	r1, r3
 8009f66:	d002      	beq.n	8009f6e <__sflush_r+0x92>
 8009f68:	4628      	mov	r0, r5
 8009f6a:	f7ff fae3 	bl	8009534 <_free_r>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	6360      	str	r0, [r4, #52]	; 0x34
 8009f72:	e7c1      	b.n	8009ef8 <__sflush_r+0x1c>
 8009f74:	6a21      	ldr	r1, [r4, #32]
 8009f76:	2301      	movs	r3, #1
 8009f78:	4628      	mov	r0, r5
 8009f7a:	47b0      	blx	r6
 8009f7c:	1c41      	adds	r1, r0, #1
 8009f7e:	d1c7      	bne.n	8009f10 <__sflush_r+0x34>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0c4      	beq.n	8009f10 <__sflush_r+0x34>
 8009f86:	2b1d      	cmp	r3, #29
 8009f88:	d001      	beq.n	8009f8e <__sflush_r+0xb2>
 8009f8a:	2b16      	cmp	r3, #22
 8009f8c:	d101      	bne.n	8009f92 <__sflush_r+0xb6>
 8009f8e:	602f      	str	r7, [r5, #0]
 8009f90:	e7b1      	b.n	8009ef6 <__sflush_r+0x1a>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	e7ad      	b.n	8009ef8 <__sflush_r+0x1c>
 8009f9c:	690f      	ldr	r7, [r1, #16]
 8009f9e:	2f00      	cmp	r7, #0
 8009fa0:	d0a9      	beq.n	8009ef6 <__sflush_r+0x1a>
 8009fa2:	0793      	lsls	r3, r2, #30
 8009fa4:	680e      	ldr	r6, [r1, #0]
 8009fa6:	bf08      	it	eq
 8009fa8:	694b      	ldreq	r3, [r1, #20]
 8009faa:	600f      	str	r7, [r1, #0]
 8009fac:	bf18      	it	ne
 8009fae:	2300      	movne	r3, #0
 8009fb0:	eba6 0807 	sub.w	r8, r6, r7
 8009fb4:	608b      	str	r3, [r1, #8]
 8009fb6:	f1b8 0f00 	cmp.w	r8, #0
 8009fba:	dd9c      	ble.n	8009ef6 <__sflush_r+0x1a>
 8009fbc:	6a21      	ldr	r1, [r4, #32]
 8009fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fc0:	4643      	mov	r3, r8
 8009fc2:	463a      	mov	r2, r7
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	47b0      	blx	r6
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	dc06      	bgt.n	8009fda <__sflush_r+0xfe>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	e78e      	b.n	8009ef8 <__sflush_r+0x1c>
 8009fda:	4407      	add	r7, r0
 8009fdc:	eba8 0800 	sub.w	r8, r8, r0
 8009fe0:	e7e9      	b.n	8009fb6 <__sflush_r+0xda>
 8009fe2:	bf00      	nop
 8009fe4:	20400001 	.word	0x20400001

08009fe8 <_fflush_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	690b      	ldr	r3, [r1, #16]
 8009fec:	4605      	mov	r5, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_fflush_r+0x10>
 8009ff2:	2500      	movs	r5, #0
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	b118      	cbz	r0, 800a002 <_fflush_r+0x1a>
 8009ffa:	6983      	ldr	r3, [r0, #24]
 8009ffc:	b90b      	cbnz	r3, 800a002 <_fflush_r+0x1a>
 8009ffe:	f000 f887 	bl	800a110 <__sinit>
 800a002:	4b14      	ldr	r3, [pc, #80]	; (800a054 <_fflush_r+0x6c>)
 800a004:	429c      	cmp	r4, r3
 800a006:	d11b      	bne.n	800a040 <_fflush_r+0x58>
 800a008:	686c      	ldr	r4, [r5, #4]
 800a00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0ef      	beq.n	8009ff2 <_fflush_r+0xa>
 800a012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a014:	07d0      	lsls	r0, r2, #31
 800a016:	d404      	bmi.n	800a022 <_fflush_r+0x3a>
 800a018:	0599      	lsls	r1, r3, #22
 800a01a:	d402      	bmi.n	800a022 <_fflush_r+0x3a>
 800a01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a01e:	f000 f915 	bl	800a24c <__retarget_lock_acquire_recursive>
 800a022:	4628      	mov	r0, r5
 800a024:	4621      	mov	r1, r4
 800a026:	f7ff ff59 	bl	8009edc <__sflush_r>
 800a02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a02c:	07da      	lsls	r2, r3, #31
 800a02e:	4605      	mov	r5, r0
 800a030:	d4e0      	bmi.n	8009ff4 <_fflush_r+0xc>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	059b      	lsls	r3, r3, #22
 800a036:	d4dd      	bmi.n	8009ff4 <_fflush_r+0xc>
 800a038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a03a:	f000 f908 	bl	800a24e <__retarget_lock_release_recursive>
 800a03e:	e7d9      	b.n	8009ff4 <_fflush_r+0xc>
 800a040:	4b05      	ldr	r3, [pc, #20]	; (800a058 <_fflush_r+0x70>)
 800a042:	429c      	cmp	r4, r3
 800a044:	d101      	bne.n	800a04a <_fflush_r+0x62>
 800a046:	68ac      	ldr	r4, [r5, #8]
 800a048:	e7df      	b.n	800a00a <_fflush_r+0x22>
 800a04a:	4b04      	ldr	r3, [pc, #16]	; (800a05c <_fflush_r+0x74>)
 800a04c:	429c      	cmp	r4, r3
 800a04e:	bf08      	it	eq
 800a050:	68ec      	ldreq	r4, [r5, #12]
 800a052:	e7da      	b.n	800a00a <_fflush_r+0x22>
 800a054:	0800a9fc 	.word	0x0800a9fc
 800a058:	0800aa1c 	.word	0x0800aa1c
 800a05c:	0800a9dc 	.word	0x0800a9dc

0800a060 <std>:
 800a060:	2300      	movs	r3, #0
 800a062:	b510      	push	{r4, lr}
 800a064:	4604      	mov	r4, r0
 800a066:	e9c0 3300 	strd	r3, r3, [r0]
 800a06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a06e:	6083      	str	r3, [r0, #8]
 800a070:	8181      	strh	r1, [r0, #12]
 800a072:	6643      	str	r3, [r0, #100]	; 0x64
 800a074:	81c2      	strh	r2, [r0, #14]
 800a076:	6183      	str	r3, [r0, #24]
 800a078:	4619      	mov	r1, r3
 800a07a:	2208      	movs	r2, #8
 800a07c:	305c      	adds	r0, #92	; 0x5c
 800a07e:	f7fd fbb5 	bl	80077ec <memset>
 800a082:	4b05      	ldr	r3, [pc, #20]	; (800a098 <std+0x38>)
 800a084:	6263      	str	r3, [r4, #36]	; 0x24
 800a086:	4b05      	ldr	r3, [pc, #20]	; (800a09c <std+0x3c>)
 800a088:	62a3      	str	r3, [r4, #40]	; 0x28
 800a08a:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <std+0x40>)
 800a08c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <std+0x44>)
 800a090:	6224      	str	r4, [r4, #32]
 800a092:	6323      	str	r3, [r4, #48]	; 0x30
 800a094:	bd10      	pop	{r4, pc}
 800a096:	bf00      	nop
 800a098:	0800a3b1 	.word	0x0800a3b1
 800a09c:	0800a3d3 	.word	0x0800a3d3
 800a0a0:	0800a40b 	.word	0x0800a40b
 800a0a4:	0800a42f 	.word	0x0800a42f

0800a0a8 <_cleanup_r>:
 800a0a8:	4901      	ldr	r1, [pc, #4]	; (800a0b0 <_cleanup_r+0x8>)
 800a0aa:	f000 b8af 	b.w	800a20c <_fwalk_reent>
 800a0ae:	bf00      	nop
 800a0b0:	08009fe9 	.word	0x08009fe9

0800a0b4 <__sfmoreglue>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	1e4a      	subs	r2, r1, #1
 800a0b8:	2568      	movs	r5, #104	; 0x68
 800a0ba:	4355      	muls	r5, r2
 800a0bc:	460e      	mov	r6, r1
 800a0be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0c2:	f7ff fa87 	bl	80095d4 <_malloc_r>
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	b140      	cbz	r0, 800a0dc <__sfmoreglue+0x28>
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	e9c0 1600 	strd	r1, r6, [r0]
 800a0d0:	300c      	adds	r0, #12
 800a0d2:	60a0      	str	r0, [r4, #8]
 800a0d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0d8:	f7fd fb88 	bl	80077ec <memset>
 800a0dc:	4620      	mov	r0, r4
 800a0de:	bd70      	pop	{r4, r5, r6, pc}

0800a0e0 <__sfp_lock_acquire>:
 800a0e0:	4801      	ldr	r0, [pc, #4]	; (800a0e8 <__sfp_lock_acquire+0x8>)
 800a0e2:	f000 b8b3 	b.w	800a24c <__retarget_lock_acquire_recursive>
 800a0e6:	bf00      	nop
 800a0e8:	20001854 	.word	0x20001854

0800a0ec <__sfp_lock_release>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	; (800a0f4 <__sfp_lock_release+0x8>)
 800a0ee:	f000 b8ae 	b.w	800a24e <__retarget_lock_release_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	20001854 	.word	0x20001854

0800a0f8 <__sinit_lock_acquire>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	; (800a100 <__sinit_lock_acquire+0x8>)
 800a0fa:	f000 b8a7 	b.w	800a24c <__retarget_lock_acquire_recursive>
 800a0fe:	bf00      	nop
 800a100:	2000184f 	.word	0x2000184f

0800a104 <__sinit_lock_release>:
 800a104:	4801      	ldr	r0, [pc, #4]	; (800a10c <__sinit_lock_release+0x8>)
 800a106:	f000 b8a2 	b.w	800a24e <__retarget_lock_release_recursive>
 800a10a:	bf00      	nop
 800a10c:	2000184f 	.word	0x2000184f

0800a110 <__sinit>:
 800a110:	b510      	push	{r4, lr}
 800a112:	4604      	mov	r4, r0
 800a114:	f7ff fff0 	bl	800a0f8 <__sinit_lock_acquire>
 800a118:	69a3      	ldr	r3, [r4, #24]
 800a11a:	b11b      	cbz	r3, 800a124 <__sinit+0x14>
 800a11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a120:	f7ff bff0 	b.w	800a104 <__sinit_lock_release>
 800a124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a128:	6523      	str	r3, [r4, #80]	; 0x50
 800a12a:	4b13      	ldr	r3, [pc, #76]	; (800a178 <__sinit+0x68>)
 800a12c:	4a13      	ldr	r2, [pc, #76]	; (800a17c <__sinit+0x6c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	62a2      	str	r2, [r4, #40]	; 0x28
 800a132:	42a3      	cmp	r3, r4
 800a134:	bf04      	itt	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	61a3      	streq	r3, [r4, #24]
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 f820 	bl	800a180 <__sfp>
 800a140:	6060      	str	r0, [r4, #4]
 800a142:	4620      	mov	r0, r4
 800a144:	f000 f81c 	bl	800a180 <__sfp>
 800a148:	60a0      	str	r0, [r4, #8]
 800a14a:	4620      	mov	r0, r4
 800a14c:	f000 f818 	bl	800a180 <__sfp>
 800a150:	2200      	movs	r2, #0
 800a152:	60e0      	str	r0, [r4, #12]
 800a154:	2104      	movs	r1, #4
 800a156:	6860      	ldr	r0, [r4, #4]
 800a158:	f7ff ff82 	bl	800a060 <std>
 800a15c:	68a0      	ldr	r0, [r4, #8]
 800a15e:	2201      	movs	r2, #1
 800a160:	2109      	movs	r1, #9
 800a162:	f7ff ff7d 	bl	800a060 <std>
 800a166:	68e0      	ldr	r0, [r4, #12]
 800a168:	2202      	movs	r2, #2
 800a16a:	2112      	movs	r1, #18
 800a16c:	f7ff ff78 	bl	800a060 <std>
 800a170:	2301      	movs	r3, #1
 800a172:	61a3      	str	r3, [r4, #24]
 800a174:	e7d2      	b.n	800a11c <__sinit+0xc>
 800a176:	bf00      	nop
 800a178:	0800a658 	.word	0x0800a658
 800a17c:	0800a0a9 	.word	0x0800a0a9

0800a180 <__sfp>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	4607      	mov	r7, r0
 800a184:	f7ff ffac 	bl	800a0e0 <__sfp_lock_acquire>
 800a188:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <__sfp+0x84>)
 800a18a:	681e      	ldr	r6, [r3, #0]
 800a18c:	69b3      	ldr	r3, [r6, #24]
 800a18e:	b913      	cbnz	r3, 800a196 <__sfp+0x16>
 800a190:	4630      	mov	r0, r6
 800a192:	f7ff ffbd 	bl	800a110 <__sinit>
 800a196:	3648      	adds	r6, #72	; 0x48
 800a198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	d503      	bpl.n	800a1a8 <__sfp+0x28>
 800a1a0:	6833      	ldr	r3, [r6, #0]
 800a1a2:	b30b      	cbz	r3, 800a1e8 <__sfp+0x68>
 800a1a4:	6836      	ldr	r6, [r6, #0]
 800a1a6:	e7f7      	b.n	800a198 <__sfp+0x18>
 800a1a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1ac:	b9d5      	cbnz	r5, 800a1e4 <__sfp+0x64>
 800a1ae:	4b16      	ldr	r3, [pc, #88]	; (800a208 <__sfp+0x88>)
 800a1b0:	60e3      	str	r3, [r4, #12]
 800a1b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1b6:	6665      	str	r5, [r4, #100]	; 0x64
 800a1b8:	f000 f847 	bl	800a24a <__retarget_lock_init_recursive>
 800a1bc:	f7ff ff96 	bl	800a0ec <__sfp_lock_release>
 800a1c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1c8:	6025      	str	r5, [r4, #0]
 800a1ca:	61a5      	str	r5, [r4, #24]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1d4:	f7fd fb0a 	bl	80077ec <memset>
 800a1d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e4:	3468      	adds	r4, #104	; 0x68
 800a1e6:	e7d9      	b.n	800a19c <__sfp+0x1c>
 800a1e8:	2104      	movs	r1, #4
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	f7ff ff62 	bl	800a0b4 <__sfmoreglue>
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	6030      	str	r0, [r6, #0]
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d1d5      	bne.n	800a1a4 <__sfp+0x24>
 800a1f8:	f7ff ff78 	bl	800a0ec <__sfp_lock_release>
 800a1fc:	230c      	movs	r3, #12
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	e7ee      	b.n	800a1e0 <__sfp+0x60>
 800a202:	bf00      	nop
 800a204:	0800a658 	.word	0x0800a658
 800a208:	ffff0001 	.word	0xffff0001

0800a20c <_fwalk_reent>:
 800a20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a210:	4606      	mov	r6, r0
 800a212:	4688      	mov	r8, r1
 800a214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a218:	2700      	movs	r7, #0
 800a21a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a21e:	f1b9 0901 	subs.w	r9, r9, #1
 800a222:	d505      	bpl.n	800a230 <_fwalk_reent+0x24>
 800a224:	6824      	ldr	r4, [r4, #0]
 800a226:	2c00      	cmp	r4, #0
 800a228:	d1f7      	bne.n	800a21a <_fwalk_reent+0xe>
 800a22a:	4638      	mov	r0, r7
 800a22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a230:	89ab      	ldrh	r3, [r5, #12]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d907      	bls.n	800a246 <_fwalk_reent+0x3a>
 800a236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a23a:	3301      	adds	r3, #1
 800a23c:	d003      	beq.n	800a246 <_fwalk_reent+0x3a>
 800a23e:	4629      	mov	r1, r5
 800a240:	4630      	mov	r0, r6
 800a242:	47c0      	blx	r8
 800a244:	4307      	orrs	r7, r0
 800a246:	3568      	adds	r5, #104	; 0x68
 800a248:	e7e9      	b.n	800a21e <_fwalk_reent+0x12>

0800a24a <__retarget_lock_init_recursive>:
 800a24a:	4770      	bx	lr

0800a24c <__retarget_lock_acquire_recursive>:
 800a24c:	4770      	bx	lr

0800a24e <__retarget_lock_release_recursive>:
 800a24e:	4770      	bx	lr

0800a250 <__swhatbuf_r>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	460e      	mov	r6, r1
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	2900      	cmp	r1, #0
 800a25a:	b096      	sub	sp, #88	; 0x58
 800a25c:	4614      	mov	r4, r2
 800a25e:	461d      	mov	r5, r3
 800a260:	da07      	bge.n	800a272 <__swhatbuf_r+0x22>
 800a262:	2300      	movs	r3, #0
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	89b3      	ldrh	r3, [r6, #12]
 800a268:	061a      	lsls	r2, r3, #24
 800a26a:	d410      	bmi.n	800a28e <__swhatbuf_r+0x3e>
 800a26c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a270:	e00e      	b.n	800a290 <__swhatbuf_r+0x40>
 800a272:	466a      	mov	r2, sp
 800a274:	f000 f902 	bl	800a47c <_fstat_r>
 800a278:	2800      	cmp	r0, #0
 800a27a:	dbf2      	blt.n	800a262 <__swhatbuf_r+0x12>
 800a27c:	9a01      	ldr	r2, [sp, #4]
 800a27e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a286:	425a      	negs	r2, r3
 800a288:	415a      	adcs	r2, r3
 800a28a:	602a      	str	r2, [r5, #0]
 800a28c:	e7ee      	b.n	800a26c <__swhatbuf_r+0x1c>
 800a28e:	2340      	movs	r3, #64	; 0x40
 800a290:	2000      	movs	r0, #0
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	b016      	add	sp, #88	; 0x58
 800a296:	bd70      	pop	{r4, r5, r6, pc}

0800a298 <__smakebuf_r>:
 800a298:	898b      	ldrh	r3, [r1, #12]
 800a29a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a29c:	079d      	lsls	r5, r3, #30
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	d507      	bpl.n	800a2b4 <__smakebuf_r+0x1c>
 800a2a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	6123      	str	r3, [r4, #16]
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	6163      	str	r3, [r4, #20]
 800a2b0:	b002      	add	sp, #8
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	ab01      	add	r3, sp, #4
 800a2b6:	466a      	mov	r2, sp
 800a2b8:	f7ff ffca 	bl	800a250 <__swhatbuf_r>
 800a2bc:	9900      	ldr	r1, [sp, #0]
 800a2be:	4605      	mov	r5, r0
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff f987 	bl	80095d4 <_malloc_r>
 800a2c6:	b948      	cbnz	r0, 800a2dc <__smakebuf_r+0x44>
 800a2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2cc:	059a      	lsls	r2, r3, #22
 800a2ce:	d4ef      	bmi.n	800a2b0 <__smakebuf_r+0x18>
 800a2d0:	f023 0303 	bic.w	r3, r3, #3
 800a2d4:	f043 0302 	orr.w	r3, r3, #2
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	e7e3      	b.n	800a2a4 <__smakebuf_r+0xc>
 800a2dc:	4b0d      	ldr	r3, [pc, #52]	; (800a314 <__smakebuf_r+0x7c>)
 800a2de:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	6020      	str	r0, [r4, #0]
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	9b00      	ldr	r3, [sp, #0]
 800a2ec:	6163      	str	r3, [r4, #20]
 800a2ee:	9b01      	ldr	r3, [sp, #4]
 800a2f0:	6120      	str	r0, [r4, #16]
 800a2f2:	b15b      	cbz	r3, 800a30c <__smakebuf_r+0x74>
 800a2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 f8d1 	bl	800a4a0 <_isatty_r>
 800a2fe:	b128      	cbz	r0, 800a30c <__smakebuf_r+0x74>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	f023 0303 	bic.w	r3, r3, #3
 800a306:	f043 0301 	orr.w	r3, r3, #1
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	89a0      	ldrh	r0, [r4, #12]
 800a30e:	4305      	orrs	r5, r0
 800a310:	81a5      	strh	r5, [r4, #12]
 800a312:	e7cd      	b.n	800a2b0 <__smakebuf_r+0x18>
 800a314:	0800a0a9 	.word	0x0800a0a9

0800a318 <_malloc_usable_size_r>:
 800a318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a31c:	1f18      	subs	r0, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	bfbc      	itt	lt
 800a322:	580b      	ldrlt	r3, [r1, r0]
 800a324:	18c0      	addlt	r0, r0, r3
 800a326:	4770      	bx	lr

0800a328 <_raise_r>:
 800a328:	291f      	cmp	r1, #31
 800a32a:	b538      	push	{r3, r4, r5, lr}
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	d904      	bls.n	800a33c <_raise_r+0x14>
 800a332:	2316      	movs	r3, #22
 800a334:	6003      	str	r3, [r0, #0]
 800a336:	f04f 30ff 	mov.w	r0, #4294967295
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a33e:	b112      	cbz	r2, 800a346 <_raise_r+0x1e>
 800a340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a344:	b94b      	cbnz	r3, 800a35a <_raise_r+0x32>
 800a346:	4620      	mov	r0, r4
 800a348:	f000 f830 	bl	800a3ac <_getpid_r>
 800a34c:	462a      	mov	r2, r5
 800a34e:	4601      	mov	r1, r0
 800a350:	4620      	mov	r0, r4
 800a352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a356:	f000 b817 	b.w	800a388 <_kill_r>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d00a      	beq.n	800a374 <_raise_r+0x4c>
 800a35e:	1c59      	adds	r1, r3, #1
 800a360:	d103      	bne.n	800a36a <_raise_r+0x42>
 800a362:	2316      	movs	r3, #22
 800a364:	6003      	str	r3, [r0, #0]
 800a366:	2001      	movs	r0, #1
 800a368:	e7e7      	b.n	800a33a <_raise_r+0x12>
 800a36a:	2400      	movs	r4, #0
 800a36c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a370:	4628      	mov	r0, r5
 800a372:	4798      	blx	r3
 800a374:	2000      	movs	r0, #0
 800a376:	e7e0      	b.n	800a33a <_raise_r+0x12>

0800a378 <raise>:
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <raise+0xc>)
 800a37a:	4601      	mov	r1, r0
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	f7ff bfd3 	b.w	800a328 <_raise_r>
 800a382:	bf00      	nop
 800a384:	20000090 	.word	0x20000090

0800a388 <_kill_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_kill_r+0x20>)
 800a38c:	2300      	movs	r3, #0
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	4611      	mov	r1, r2
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	f7f7 ffff 	bl	8002398 <_kill>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	d102      	bne.n	800a3a4 <_kill_r+0x1c>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	b103      	cbz	r3, 800a3a4 <_kill_r+0x1c>
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	bd38      	pop	{r3, r4, r5, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20001848 	.word	0x20001848

0800a3ac <_getpid_r>:
 800a3ac:	f7f7 bfec 	b.w	8002388 <_getpid>

0800a3b0 <__sread>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b8:	f000 f894 	bl	800a4e4 <_read_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	bfab      	itete	ge
 800a3c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3c4:	181b      	addge	r3, r3, r0
 800a3c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ca:	bfac      	ite	ge
 800a3cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ce:	81a3      	strhlt	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__swrite>:
 800a3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	05db      	lsls	r3, r3, #23
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	d505      	bpl.n	800a3f0 <__swrite+0x1e>
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f000 f868 	bl	800a4c0 <_lseek_r>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	4628      	mov	r0, r5
 800a402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a406:	f000 b817 	b.w	800a438 <_write_r>

0800a40a <__sseek>:
 800a40a:	b510      	push	{r4, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a412:	f000 f855 	bl	800a4c0 <_lseek_r>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	bf15      	itete	ne
 800a41c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a41e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a426:	81a3      	strheq	r3, [r4, #12]
 800a428:	bf18      	it	ne
 800a42a:	81a3      	strhne	r3, [r4, #12]
 800a42c:	bd10      	pop	{r4, pc}

0800a42e <__sclose>:
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 b813 	b.w	800a45c <_close_r>
	...

0800a438 <_write_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	; (800a458 <_write_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f7 ffdd 	bl	8002406 <_write>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_write_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_write_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20001848 	.word	0x20001848

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_close_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 ffe9 	bl	800243e <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20001848 	.word	0x20001848

0800a47c <_fstat_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	; (800a49c <_fstat_r+0x20>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f7f7 ffe4 	bl	8002456 <_fstat>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d102      	bne.n	800a498 <_fstat_r+0x1c>
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	b103      	cbz	r3, 800a498 <_fstat_r+0x1c>
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	bd38      	pop	{r3, r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	20001848 	.word	0x20001848

0800a4a0 <_isatty_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d06      	ldr	r5, [pc, #24]	; (800a4bc <_isatty_r+0x1c>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	f7f7 ffe3 	bl	8002476 <_isatty>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_isatty_r+0x1a>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_isatty_r+0x1a>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	20001848 	.word	0x20001848

0800a4c0 <_lseek_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	; (800a4e0 <_lseek_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f7 ffdc 	bl	800248c <_lseek>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_lseek_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_lseek_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20001848 	.word	0x20001848

0800a4e4 <_read_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	; (800a504 <_read_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f7 ff6a 	bl	80023cc <_read>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_read_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_read_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20001848 	.word	0x20001848

0800a508 <_init>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr

0800a514 <_fini>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	bf00      	nop
 800a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51a:	bc08      	pop	{r3}
 800a51c:	469e      	mov	lr, r3
 800a51e:	4770      	bx	lr
